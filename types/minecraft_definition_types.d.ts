//!
// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY BY HAND!
//!

export type JsonType=string|number|boolean|JsonType[]|{[k:string]:JsonType};
export type integer=number;
export namespace b_animation_controller {
export type animationspec=string|{
[k:string]:A;
};
export type particle_effect_spec={
/**
*@description Set to false to have the effect spawned in the world without being bound to an actor (by default an effect is bound to the actor).
*/
"bind_to_actor"?:boolean;
/**
*@description The name of a particle effect that should be played.
*/
"effect":string;
/**
*@description The name of a locator on the actor where the effect should be located.
*/
"locator"?:string;
/**
*@description A molang script that will be run when the particle emitter is initialized.
*/
"pre_effect_script"?:string;
};
export type commands=string|string|string;
export type A=string;
export type B=string;
/**
*@example
*```json
*{
*  "format_version": "1.19.0",
*  "animation_controllers": {
*    "controller.animation.example": {
*      "initial_state": "default",
*      "states": {
*        "default": {
*          "transitions": [
*            {
*              "state_1": "query.is_baby"
*            }
*          ]
*        },
*        "state_1": {}
*      }
*    }
*  }
*}
*```
*@description Animation controller for behaviors.
*/
export type Main={
"format_version":B;
/**
*@description The animation controllers schema for.
*/
"animation_controllers":{
[k:string]:{
/**
*@description The states of this animation controller.
*@minProperties 1
*/
"states":{
[k:string]:{
/**
*@description The animations definition for.
*/
"animations"?:Array<animationspec>;
/**
*@description Events, commands or transitions to preform on entry of this state.
*/
"on_entry"?:Array<commands>;
/**
*@description Events, commands or transitions to preform on exit of this state.
*/
"on_exit"?:Array<commands>;
/**
*@description The transition definition for.
*@minProperties 1
*/
"transitions"?:Array<{
[k:string]:A;
}>;
};
};
/**
*@example
*```json
*"default"
*```
*@description The state to start with, if not specified state at position 0 in the array is used.
*/
"initial_state"?:string;
};
};
};
}
export namespace b_animations {
export type animationspec=string|{
[k:string]:A;
};
export type particle_effect_spec={
/**
*@description Set to false to have the effect spawned in the world without being bound to an actor (by default an effect is bound to the actor).
*/
"bind_to_actor"?:boolean;
/**
*@description The name of a particle effect that should be played.
*/
"effect":string;
/**
*@description The name of a locator on the actor where the effect should be located.
*/
"locator"?:string;
/**
*@description A molang script that will be run when the particle emitter is initialized.
*/
"pre_effect_script"?:string;
};
export type commands=string|string|string|string;
export type A=string;
export type B=string;
/**
*@example
*```json
*{
*  "format_version": "1.19.0",
*  "animations": {
*    "animation.example": {}
*  }
*}
*```
*@description Animation for behavior for.
*/
export type Main={
"format_version":B;
/**
*@description The animation specification.
*/
"animations":{
[k:string]:{
/**
*@description The time in seconds this animation will last.
*/
"animation_length"?:number;
/**
*@description Whenever this animation should loop once it reaches the end, will only happen if the animation is still active.
*/
"loop"?:boolean;
/**
*@description A timeline specification, property names are timestamps.
*/
"timeline"?:{
[k:string]:commands|Array<commands>;
};
};
};
};
}
export namespace b_biomes {
export type A=string;
export type B={
/**
*@description Materials used for the surface ceiling.
*@minItems 1
*/
"ceiling_materials":JsonType;
/**
*@description Materials used for the surface floor.
*@minItems 1
*/
"floor_materials":JsonType;
/**
*@description Material used to replace air blocks below sea level.
*/
"sea_material":string;
/**
*@description Material used to repalce solid blocks that are not surface blocks.
*/
"foundation_material":string;
/**
*@description Material used to decorate surface near sea level.
*/
"beach_material"?:string;
};
export type C={
/**
*@description UNDOCUMENTED.
*/
"temperature"?:number;
/**
*@description UNDOCUMENTED.
*/
"downfall"?:number;
/**
*@description UNDOCUMENTED.
*/
"red_spores"?:number;
/**
*@description UNDOCUMENTED.
*/
"blue_spores"?:number;
/**
*@description UNDOCUMENTED.
*/
"ash"?:number;
/**
*@description UNDOCUMENTED.
*/
"white_ash"?:number;
/**
*@description UNDOCUMENTED.
*/
"snow_accumulation"?:Array<JsonType>;
};
export type D=Record<string,never>;
export type E_coordinate=F|number|{
/**
*@description Type of distribution - uniform random, gaussian (centered in the range), or grid (either fixed-step or jittered).
*/
"distribution":string;
/**
*@description UNDOCUMENTED.
*/
"extent":Array<JsonType>;
/**
*@description When the distribution type is grid, defines the offset along this axis.
*@minimum 0
*/
"grid_offset"?:integer;
/**
*@description When the distribution type is grid, defines the distance between steps along this axis.
*@minimum 1
*/
"step_size"?:integer;
};
export type E_iteration={
/**
*@description The order in which coordinates will be evaluated. Should be used when a coordinate depends on another. If omitted, defaults to `xzy`.
*/
"coordinate_eval_order"?:string;
/**
*@description UNDOCUMENTED.
*/
"identifier":string;
/**
*@description Number of scattered positions to generate.
*/
"iterations":F;
/**
*@description UNDOCUMENTED.
*/
"places_feature":string;
"scatter_chance"?:{
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"denominator"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"numerator"?:integer;
}|F|number;
"x"?:E_coordinate;
"y"?:E_coordinate;
"z"?:E_coordinate;
};
export type F=string|number;
export type E={
/**
*@description UNDOCUMENTED.
*/
"after_sky_pass"?:Array<E_iteration>;
/**
*@description UNDOCUMENTED.
*/
"after_surface_pass"?:Array<E_iteration>;
/**
*@description UNDOCUMENTED.
*/
"after_underground_pass"?:Array<E_iteration>;
/**
*@description UNDOCUMENTED.
*/
"before_sky_pass"?:Array<E_iteration>;
/**
*@description UNDOCUMENTED.
*/
"before_surface_pass"?:Array<E_iteration>;
/**
*@description UNDOCUMENTED.
*/
"before_underground_pass"?:Array<E_iteration>;
/**
*@description UNDOCUMENTED.
*/
"final_pass"?:Array<E_iteration>;
/**
*@description UNDOCUMENTED.
*/
"first_pass"?:Array<E_iteration>;
/**
*@description UNDOCUMENTED.
*/
"surface_pass"?:Array<E_iteration>;
/**
*@description UNDOCUMENTED.
*/
"sky_pass"?:Array<E_iteration>;
/**
*@description UNDOCUMENTED.
*/
"underground_pass"?:Array<E_iteration>;
};
export type G={
/**
*@description Controls the block type used for the surface of this biome.
*@string string
*/
"top_material"?:JsonType;
/**
*@description Controls the block type used in a layer below the surface of this biome.
*@string string
*/
"mid_material"?:JsonType;
/**
*@description Controls the block type used as a floor for bodies of water in this biome.
*@string boostringlean
*/
"sea_floor_material"?:JsonType;
/**
*@description Controls the block type used deep underground in this biome.
*@string string
*/
"foundation_material"?:JsonType;
/**
*@description Controls the block type used for the bodies of water in this biome.
*@string string
*/
"sea_material"?:JsonType;
/**
*@description Controls how deep below the world water level the floor should occur.
*/
"sea_floor_depth"?:integer;
};
export type H=Record<string,never>;
export type I=Record<string,never>;
export type J={
/**
*@description Controls the block type used for the surface of this biome.
*@string string
*/
"top_material"?:JsonType;
/**
*@description Controls the block type used in a layer below the surface of this biome.
*@string string
*/
"mid_material"?:JsonType;
/**
*@description Controls the block type used as a floor for bodies of water in this biome.
*@string boostringlean
*/
"sea_floor_material"?:JsonType;
/**
*@description Controls the block type used deep underground in this biome.
*@string string
*/
"foundation_material"?:JsonType;
/**
*@description Controls the block type used for the bodies of water in this biome.
*@string string
*/
"sea_material"?:JsonType;
/**
*@description Controls how deep below the world water level the floor should occur.
*/
"sea_floor_depth"?:integer;
/**
*@description UNDOCUMENTED.
*/
"clay_material"?:string;
/**
*@description UNDOCUMENTED.
*/
"hard_clay_material"?:string;
/**
*@description UNDOCUMENTED.
*/
"bryce_pillars"?:boolean;
/**
*@description UNDOCUMENTED.
*/
"has_forest"?:boolean;
};
export type BA={
/**
*@description UNDOCUMENTED.
*/
"peaks_factor"?:number;
/**
*@description Defines surface material for steep slopes.
*/
"steep_material_adjustment"?:{
/**
*@description Block type use as steep material.
*/
"material"?:string;
/**
*@description Enable for north facing slopes.
*/
"north_slopes"?:boolean;
/**
*@description Enable for south facing slopes.
*/
"south_slopes"?:boolean;
/**
*@description Enable for west facing slopes.
*/
"west_slopes"?:boolean;
/**
*@description Enable for east facing slopes.
*/
"east_slopes"?:boolean;
};
/**
*@description Controls the density tapering that happens at the top of the world to prevent terrain from reaching too high.
*/
"top_slide"?:{
/**
*@description If false, top slide will be disabled. If true, other parameters will be taken into account
*/
"enabled"?:JsonType;
};
};
export type BB={
/**
*@description Temperature with which this biome should selected, relative to other biomes.
*/
"target_temperature"?:number;
/**
*@description Humidity with which this biome should selected, relative to other biomes.
*/
"target_humidity"?:number;
/**
*@description Altitude with which this biome should selected, relative to other biomes.
*/
"target_altitude"?:number;
/**
*@description Weirdness with which this biome should selected, relative to other biomes.
*/
"target_weirdness"?:number;
/**
*@description Weight with which this biome should selected, relative to other biomes.
*/
"weight"?:number;
};
export type BC=Record<string,never>;
export type BD_transformation=string|Array<string|Array<JsonType>>;
export type BD={
/**
*@description UNDOCUMENTED.
*/
"hills_transformation"?:BD_transformation;
/**
*@description UNDOCUMENTED.
*/
"mutate_transformation"?:BD_transformation;
/**
*@description UNDOCUMENTED.
*/
"river_transformation"?:BD_transformation;
/**
*@description UNDOCUMENTED.
*/
"shore_transformation"?:BD_transformation;
/**
*@description Controls the world generation climate categories that this biome can spawn for.  A single biome can be associated with multiple categories with different weightings.
*/
"generate_for_climates"?:Array<Array<JsonType>>;
};
export type BE={
/**
*@description UNDOCUMENTED.
*/
"noise_params"?:Array<JsonType>;
/**
*@description UNDOCUMENTED.
*/
"noise_type"?:string;
};
export type BF={
/**
*@description All adjustments that match the column's noise values will be applied in the order listed.
*/
"adjustments"?:JsonType;
};
export type BG={
/**
*@description Controls the block type used for the surface of this biome.
*@string string
*/
"top_material"?:JsonType;
/**
*@description Controls the block type used in a layer below the surface of this biome.
*@string string
*/
"mid_material"?:JsonType;
/**
*@description Controls the block type used as a floor for bodies of water in this biome.
*@string boostringlean
*/
"sea_floor_material"?:JsonType;
/**
*@description Controls the block type used deep underground in this biome.
*@string string
*/
"foundation_material"?:JsonType;
/**
*@description Controls the block type used for the bodies of water in this biome.
*@string string
*/
"sea_material"?:JsonType;
/**
*@description Controls how deep below the world water level the floor should occur.
*/
"sea_floor_depth"?:integer;
};
export type BH={
/**
*@description Controls the block type used for the surface of this biome.
*@string string
*/
"top_material"?:JsonType;
/**
*@description Controls the block type used in a layer below the surface of this biome.
*@string string
*/
"mid_material"?:JsonType;
/**
*@description Controls the block type used as a floor for bodies of water in this biome.
*@string boostringlean
*/
"sea_floor_material"?:JsonType;
/**
*@description Controls the block type used deep underground in this biome.
*@string string
*/
"foundation_material"?:JsonType;
/**
*@description Controls the block type used for the bodies of water in this biome.
*@string string
*/
"sea_material"?:JsonType;
/**
*@description Controls how deep below the world water level the floor should occur.
*/
"sea_floor_depth"?:integer;
};
export type BI=Record<string,never>;
/**
*@example
*```json
*{
*  "plains": {
*    "format_version": "1.19.0"
*  }
*}
*```
*/
export type Main={
[k:string]:{
"format_version"?:A;
"minecraft:capped_surface"?:B;
"minecraft:climate"?:C;
"minecraft:consolidated_features"?:D;
"minecraft:forced_features"?:E;
"minecraft:frozen_ocean_surface"?:G;
"minecraft:ignore_automatic_features"?:H;
"minecraft:legacy_world_generation_rules"?:I;
"minecraft:mesa_surface"?:J;
"minecraft:mountain_parameters"?:BA;
"minecraft:nether_generation_rules"?:BB;
"minecraft:nether_surface"?:BC;
"minecraft:overworld_generation_rules"?:BD;
"minecraft:overworld_height"?:BE;
"minecraft:surface_material_adjustments"?:BF;
"minecraft:surface_parameters"?:BG;
"minecraft:swamp_surface"?:BH;
"minecraft:the_end_surface"?:BI;
[k:string]:any;
};
};
}
export namespace b_blocks {
export type A=string;
export type B_components_ref={
"minecraft:collision_box"?:C;
"minecraft:crafting_table"?:D;
"minecraft:destructible_by_explosion"?:E;
"minecraft:destructible_by_mining"?:F;
"minecraft:display_name"?:G;
"minecraft:flammable"?:H;
"minecraft:friction"?:I;
"minecraft:geometry"?:J;
"minecraft:light_dampening"?:BA;
"minecraft:light_emission"?:BB;
"minecraft:loot"?:BC;
"minecraft:map_color"?:BD;
"minecraft:material_instances"?:BE;
"minecraft:part_visibility"?:BF;
"minecraft:placement_filter"?:BG;
"minecraft:rotation"?:CA;
"minecraft:selection_box"?:CC;
"minecraft:transformation"?:CD;
"minecraft:unit_cube"?:CE;
"minecraft:on_fall_on"?:CF;
"minecraft:on_interact"?:CG;
"minecraft:on_placed"?:CH;
"minecraft:on_player_destroyed"?:CI;
"minecraft:on_player_placing"?:CJ;
"minecraft:on_step_off"?:DA;
"minecraft:on_step_on"?:DB;
"minecraft:queued_ticking"?:DC;
"minecraft:random_ticking"?:DD;
};
export type C=boolean|{
/**
*@description Minimal position of the bounds of the collision box. origin is specified as [x, y, z] and must be in the range (-8, 0, -8) to (8, 16, 8), inclusive.
*/
"origin"?:Array<JsonType>;
/**
*@description Size of each side of the collision box. Size is specified as [x, y, z]. origin + size must be in the range (-8, 0, -8) to (8, 16, 8), inclusive.
*/
"size"?:Array<JsonType>;
};
export type D={
/**
*@description Defines the tags recipes should define to be crafted on this table. Limited to 64 tags. Each tag is limited to 64 characters.
*@maxItems 64
*/
"crafting_tags"?:Array<string>;
/**
*@description Specifies the language file key that maps to what text will be displayed in the UI of this table. If the string given can not be resolved as a loc string, the raw string given will be displayed. If this field is omitted, the name displayed will default to the name specified in the "display_name" component. If this block has no "display_name" component, the name displayed will default to the name of the block.
*/
"table_name"?:string;
};
export type E=boolean|{
/**
*@description Describes how resistant the block is to explosion. Greater values mean the block is less likely to break when near an explosion (or has higher resistance to explosions). The scale will be different for different explosion power levels. A negative value or 0 means it will easily explode; larger numbers increase level of resistance.
*/
"explosion_resistance"?:number;
};
export type F=boolean|{
/**
*@description Sets the number of seconds it takes to destroy the block with base equipment. Greater numbers result in greater mining times.
*/
"seconds_to_destroy"?:number;
};
export type G=string;
export type H=boolean|{
/**
*@description Sets the number of seconds it takes to destroy the block with base equipment. Greater numbers result in greater mining times.
*/
"seconds_to_destroy"?:number;
};
export type I=number;
export type J=string|{
/**
*@description The description identifier of the geometry file to use to render this block. This identifier must match an existing geometry identifier in any of the currently loaded resource packs.
*/
"identifier":string;
/**
*@description A list of bones that should be visible when rendering this block. If not specified, all bones will be visible.
*/
"bone_visibility"?:{
[k:string]:boolean;
};
};
export type BA=integer;
export type BB=integer;
export type BC=string;
export type BD=string|Array<JsonType>;
export type BE={
[k:string]:string|{
/**
*@default true
*@description Should this material have ambient occlusion applied when lighting? If true, shadows will be created around and underneath the block.
*/
"ambient_occlusion"?:boolean;
/**
*@default true
*@description Should this material be dimmed by the direction it's facing?
*/
"face_dimming"?:boolean;
/**
*@default "opaque"
*@description The render method to use. Must be one of these options: opaque - Used for a regular block texture without an alpha layer. Does not allow for transparency or translucency. double_sided - Used for completely disabling backface culling. blend - Used for a block like stained glass. Allows for transparency and translucency (slightly transparent textures). alpha_test - Used for a block like the vanilla (unstained) glass. Does not allow for translucency, only fully opaque or fully transparent textures. Also disables backface culling.
*@markdownDescription The render method to use. Must be one of these options: 
opaque - Used for a regular block texture without an alpha layer. Does not allow for transparency or translucency.
double_sided - Used for completely disabling backface culling.
blend - Used for a block like stained glass. Allows for transparency and translucency (slightly transparent textures).
alpha_test - Used for a block like the vanilla (unstained) glass. Does not allow for translucency, only fully opaque or fully transparent textures. Also disables backface culling.
*/
"render_method"?:string;
/**
*@description Texture name for the material.
*/
"texture"?:string;
};
};
export type BF={
[k:string]:string|boolean;
};
export type BI=string;
export type BJ=string;
export type BH=BI|{
"name"?:BI;
/**
*@description 
*/
"states"?:{
[k:string]:boolean|integer|string;
};
/**
*@example
*```json
*"query.any_tag('wood')"
*```
*@description A condition using Molang queries that results to true/false that can be used to query for blocks with certain tags.
*/
"tags"?:BJ;
};
export type BG={
"conditions"?:Array<{
/**
*@description List of any of the following strings describing which face(s) this block can be placed on: "up", "down", "north", "south", "east", "west", "side", "all". Limited to 6 faces.
*@uniqueItems true
*/
"allowed_faces"?:Array<string>;
/**
*@description List of blocks that this block can be placed against in the "allowed_faces" direction. Limited to 64 blocks. Each block in this list can either be specified as a String (block name) or as a BlockDescriptor. A BlockDescriptor is an object that allows you to reference a block (or multiple blocks) based on its tags, or based on its name and states. The fields of a BlockDescriptor are described below.
*/
"block_filter"?:Array<BH>;
}>;
[k:string]:any;
};
export type CB=Array<JsonType>;
export type CA=CB;
export type CC=boolean|{
/**
*@default [0,0,0]
*@description Minimal position of the bounds of the selection box. "origin" is specified as [x, y, z] and must be in the range (-8, 0, -8) to (8, 16, 8), inclusive.
*/
"origin"?:CB;
/**
*@default [8,8,8]
*@description Size of each side of the selection box. Size is specified as [x, y, z]. "origin" + "size" must be in the range (-8, 0, -8) to (8, 16, 8), inclusive.
*/
"size"?:CB;
};
export type CD={
/**
*@description Rotation in xxx?
*/
"rotation"?:Array<JsonType>;
/**
*@description UNDOCUMENTED
*/
"scale"?:Array<JsonType>;
/**
*@description UNDOCUMENTED
*/
"translation"?:Array<JsonType>;
};
export type CE=Record<string,never>;
export type CF={
/**
*@description The condition of event to be executed on the block.
*/
"condition"?:string;
/**
*@description The event executed on the block.
*/
"event"?:string;
/**
*@description The minimum distance in blocks that an actor needs to fall to trigger this event.
*/
"min_fall_distance"?:number;
/**
*@default "self"
*@description The target of event executed on the block.
*/
"target"?:string;
[k:string]:any;
};
export type CG={
/**
*@description The condition of event to be executed on the block.
*/
"condition"?:string;
/**
*@description The event executed on the block.
*/
"event"?:string;
/**
*@default "self"
*@description The target of event executed on the block.
*/
"target"?:string;
[k:string]:any;
};
export type CH={
/**
*@description The condition of event to be executed on the block.
*/
"condition"?:string;
/**
*@description The event executed on the block.
*/
"event"?:string;
/**
*@default "self"
*@description The target of event executed on the block.
*/
"target"?:string;
[k:string]:any;
};
export type CI={
/**
*@description The condition of event to be executed on the block.
*/
"condition"?:string;
/**
*@description The event executed on the block.
*/
"event"?:string;
/**
*@default "self"
*@description The target of event executed on the block.
*/
"target"?:string;
[k:string]:any;
};
export type CJ={
/**
*@description The condition of event to be executed on the block.
*/
"condition"?:string;
/**
*@description The event executed on the block.
*/
"event"?:string;
/**
*@default "self"
*@description The target of event executed on the block.
*/
"target"?:string;
[k:string]:any;
};
export type DA={
/**
*@description The condition of event to be executed on the block.
*/
"condition"?:string;
/**
*@description The event executed on the block.
*/
"event"?:string;
/**
*@default "self"
*@description The target of event executed on the block.
*/
"target"?:string;
[k:string]:any;
};
export type DB={
/**
*@description The condition of event to be executed on the block.
*/
"condition"?:string;
/**
*@description The event executed on the block.
*/
"event"?:string;
/**
*@default "self"
*@description The target of event executed on the block.
*/
"target"?:string;
[k:string]:any;
};
export type DC={
/**
*@description Describes the component that will trigger an even at a regular interval between two values.
*/
"on_tick"?:{
/**
*@default "1"
*@description The condition of event to be executed on the block. Molang
*/
"condition"?:string;
/**
*@default "set_block_property"
*@description The type of event executed on the block.
*/
"event"?:string;
"range"?:Array<JsonType>;
/**
*@description The target of event executed on the block.
*/
"target"?:string;
};
/**
*@default true
*@description Does the event loop.
*/
"looping"?:boolean;
/**
*@default [10,10]
*@description The Range between which the component will trigger his event.
*/
"range"?:Array<JsonType>;
};
export type DD={
/**
*@description the event that will be triggered on random ticks.
*/
"on_tick"?:JsonType;
/**
*@default "1"
*@description A condition using Molang queries that results to true/false. If true on the random tick, the event will be triggered. If false on the random tick, the event will not be triggered.
*/
"condition"?:string;
/**
*@default "set_block_property"
*@description The event that will be triggered.
*/
"event"?:string;
/**
*@default "self"
*@description The target of the event executed by the block
*/
"target"?:string;
};
export type DE_event_base={
/**
*@description The condition of event to be executed on the block.
*/
"condition"?:string;
/**
*@description The event executed on the block.
*/
"event"?:string;
/**
*@default "self"
*@description The target of event executed on the block.
*/
"target"?:string;
};
export type DE={
"minecraft:on_fall_on"?:DE_event_base;
"minecraft:on_interact"?:DE_event_base;
"minecraft:on_placed"?:DE_event_base;
"minecraft:on_player_destroyed"?:DE_event_base;
"minecraft:on_player_placing"?:DE_event_base;
"minecraft:on_step_off"?:DE_event_base;
"minecraft:on_step_on"?:DE_event_base;
[k:string]:any;
};
export type B={
/**
*@description The description for this block.
*/
"description":{
/**
*@default "misc"
*@description The category this block will be placed in the menu.
*/
"menu_category"?:{
/**
*@description Determines which category this block will be placed under in the inventory and crafting table container screens. Options are "construction", "nature", "equipment", "items", and "none". If omitted or "none" is specified, the block will not appear in the inventory or crafting table container screens.
*/
"category":string;
/**
*@description A translation string of an existing group in minecraft to group this item under
*/
"group"?:string;
/**
*@description If true, this item will not be shown in the /give command autocomplete list.
*/
"is_hidden_in_commands"?:boolean;
};
/**
*@description The identifier for this block. The name must include a namespace and must not use the Minecraft namespace unless overriding a Vanilla block.
*/
"identifier":BI;
/**
*@description If this block is experimental, it will only be registered if the world is marked as experimantal.
*/
"is_experimental"?:boolean;
/**
*@description Whether or not to register this block to the creative inventory menu.
*/
"register_to_creative_menu"?:boolean;
/**
*@description UNDOCUMENTED.
*/
"properties"?:{
[k:string]:Array<boolean|number|integer|string>|{
[k:string]:any;
};
};
};
"events"?:DE;
"components":B_components_ref;
/**
*@description UNDOCUMENTED.
*/
"permutations"?:Array<{
/**
*@description A Molang expression that evaluates to true or false to determine if this permutation should be used. For permutation conditions you are limited to using one Molang query: "query.block_property()"
*/
"condition"?:BJ;
"components"?:B_components_ref;
}>;
};
/**
*@description The minecraft block behavior specification.
*/
export type Main={
"format_version":A;
"minecraft:block":B;
};
}
export namespace b_dialogue {
export type A=string;
export type B_rawtext=Array<string|B_translate|B_text|B_selector|B_score>;
export type B_selector={
/**
*@example
*```json
*"@a"
*```
*@example
*```json
*"@s"
*```
*@example
*```json
*"@r"
*```
*@example
*```json
*"@p"
*```
*@example
*```json
*"@e"
*```
*@example
*```json
*"@initiator"
*```
*@description The selector to target, for dialogue files, you can use @initiator.
*@pattern ^@.*$
*/
"selector":string;
};
export type B_score={
/**
*@example
*```json
*{
*  "name": "*",
*  "objective": "random"
*}
*```
*@example
*```json
*{
*  "name": "@a[score={count=0..},c=1]",
*  "objective": "count"
*}
*```
*@description The score text component.
*/
"score":{
/**
*@example
*```json
*"@a"
*```
*@example
*```json
*"@s"
*```
*@example
*```json
*"@r"
*```
*@example
*```json
*"@p"
*```
*@example
*```json
*"@e"
*```
*@example
*```json
*"@initiator"
*```
*@example
*```json
*"*"
*```
*@description A selector, player name (can be fake), or * to target who is reading the message.
*/
"name":string;
/**
*@description The scoreboard objective to retrieve the value of.
*/
"objective":string;
};
};
export type B_text={
/**
*@description The text to display.
*/
"text":string;
};
export type B_translate={
/**
*@example
*```json
*"example.translation.key"
*```
*@description The key to translate.
*/
"translate":string;
"with"?:B_with;
};
export type B_with=JsonType;
export type B={
"rawtext":B_rawtext;
};
/**
*@example
*```json
*{
*  "format_version": "1.19.0",
*  "minecraft:npc_dialogue": {
*    "scenes": [
*      {
*        "scene_tag": "fast_travel",
*        "npc_name": {
*          "rawtext": [
*            {
*              "translate": "dialogue.guide.name"
*            }
*          ]
*        },
*        "text": {
*          "rawtext": [
*            {
*              "translate": "dialogue.fast_travel.body",
*              "with": [
*                "\n"
*              ]
*            }
*          ]
*        },
*        "buttons": []
*      }
*    ]
*  }
*}
*```
*@description Specifies the dialogue scenes.
*/
export type Main={
"format_version":A;
/**
*@description Specifies the dialogue of an npc.
*/
"minecraft:npc_dialogue":{
/**
*@description The different scenes.
*@minItems 1
*/
"scenes"?:Array<{
/**
*@description This is where you can create buttons for your NPC.
*@maxItems 6
*/
"buttons"?:Array<{
/**
*@description Set the text that is going to be displayed on your NPC’s button.
*/
"name"?:string|B;
/**
*@description allows you to add commands which will be run in-game when the button is pressed.
*/
"commands"?:Array<string>;
}>;
/**
*@description This is where you can add or change a name for your NPC dialogue box. This is an optional property that is useful for dynamically changing NPC names.
*/
"npc_name"?:string|B;
/**
*@description This is where you can define which commands will fire when the NPC dialogue box closes.
*/
"on_close_commands"?:Array<string>;
/**
*@description This is where you can define which commands will fire when the NPC dialogue box opens.
*/
"on_open_commands"?:Array<string>;
/**
*@description This is the name you will use to call this scene in-game. This is a required property.
*/
"scene_tag":string;
/**
*@description This is where you enter the dialogue you want your NPC to display in-game for this scene. You can type the dialogue text directly here or use raw text if you are using a language file. This is an optional property, but without it your NPC dialogue box will be empty.
*/
"text"?:string|B;
}>;
};
};
}
export namespace b_entities {
export type A=string;
export type C=string;
export type D=string|boolean;
export type E=string|number;
export type G={
/**
*@description The entity type that will be riding this entity.
*/
"entity_type":string;
/**
*@description The spawn event that will be used when the riding entity is created.
*/
"spawn_event"?:string;
};
export type H={
/**
*@description Duration, in seconds, for which mob won't admire items if it was hurt.
*/
"cooldown_after_being_attacked"?:integer;
/**
*@default 10
*@description Duration, in seconds, that the mob is pacified.
*/
"duration"?:integer;
};
export type J_object_item_descriptor={
/**
*@example
*```json
*"query.any_tag('minecraft:is_tool')"
*```
*@description [UNDOCUMENTED] A Molang expression ran against item or block to match.
*/
"tags"?:BB;
/**
*@example
*```json
*"minecraft:is_tool"
*```
*@description [UNDOCUMENTED] A tag to lookup item or block by.
*/
"item_tag"?:string;
};
export type BA=string;
export type BB=string;
export type J=BA|J_object_item_descriptor|{
"item"?:BA|J_object_item_descriptor;
[k:string]:any;
};
export type BC={
/**
*@pattern ^[a-zA-Z0-9_\-:]+$
*@description The event to fire.
*/
"event"?:string;
/**
*@description The target of the event.
*/
"target"?:string;
};
export type I={
/**
*@description List of items that the entity drops when it grows up.
*/
"drop_items"?:Array<J>|J;
/**
*@default 1200
*@description Amount of time before the entity grows up, -1 for always a baby.
*/
"duration"?:number;
/**
*@description List of items that can be fed to the entity. Includes `item` for the item name and `growth` to define how much time it grows up by
*/
"feed_items"?:Array<BA|{
"growth"?:number;
"item"?:J;
[k:string]:any;
}>|BA;
/**
*@description Event to run when this entity grows up.
*/
"grow_up"?:BC;
/**
*@description The feed item used will transform to this item upon successful interaction. Format: itemName:auxValue
*/
"transform_to_item"?:J;
};
export type BE=string;
export type BD={
/**
*@default "ambient"
*@description Level sound event to be played as the ambient sound.
*/
"event_name"?:string;
/**
*@description List of dynamic level sound events, with conditions for choosing between them. Evaluated in order, first one wins. If none evaluate to true, 'event_name' will take precedence.
*/
"event_names"?:Array<{
/**
*@description The condition that must be satisfied to select the given ambient sound.
*/
"condition"?:string;
/**
*@description Level sound event to be played as the ambient sound.
*/
"event_name"?:BE;
[k:string]:any;
}>;
/**
*@default 16
*@description Maximum time in seconds to randomly add to the ambient sound delay time.
*/
"range"?:number;
/**
*@default 8
*@description Minimum time in seconds before the entity plays its ambient sound again.
*/
"value"?:number;
};
export type BG_filters_spec={
/**
*@description All tests in an `all_of` group must pass in order for the group to pass.
*/
"all_of"?:BG_groups_spec;
/**
*@description One or more tests in an `any_of` group must pass in order for the group to pass.
*/
"any_of"?:BG_groups_spec;
/**
*@description All tests in a `none_of` group must fail in order for the group to pass.
*/
"none_of"?:BG_groups_spec;
[k:string]:any;
}|BH|CA|CB|CC|CD|CE|CF|CG|CH|CI|DA|DB|DC|DD|DE|DF|DG|DH|DI|DJ|EA|EB|EC|ED|EE|EF|EG|EH|EI|EJ|FA|FB|FC|FD|FE|FF|FG|FH|FI|FJ|GA|GB|GC|GD|GE|GF|GG|GH|GI|GJ|HA|HB|HC|HD|HE|HF|HG|HH|HI|HJ|IA|IB|IC|ID|IE|IF|IG|IH|II|IJ|JA|JB|JC|JD|JE|JsonType;
export type BG_groups_spec=Array<BG_groups_spec>|BG_filters_spec;
export type BI=string;
export type BJ=string;
export type BH={
/**
*@description Returns true when the bool actor property matches the value provided.
*/
"test"?:string;
/**
*@description (Required) The property name to look for
*/
"domain":string;
/**
*@default "equals"
*@description (Optional) The comparison to apply with `value`.
*/
"operator"?:BI;
/**
*@default "self"
*@description (Optional) The subject of this filter test.
*/
"subject"?:BJ;
/**
*@default true
*@description true or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type CA={
/**
*@description Compares the current time with a float value in the range (0.0, 1.0).
0.0= Noon
0.25= Sunset
0.5= Midnight
0.75= Sunrise
*/
"test"?:string;
/**
*@default "equals"
*@description (Optional) The comparison to apply with `value`.
*/
"operator"?:BI;
/**
*@default "self"
*@description (Optional) The subject of this filter test.
*/
"subject"?:BJ;
/**
*@example
*```json
*0
*```
*@example
*```json
*0.025
*```
*@example
*```json
*0.5
*```
*@example
*```json
*0.75
*```
*@example
*```json
*1
*```
*@minimum 0
*@maximum 24000
*@description (Required) A floating point value.
*/
"value":number;
[k:string]:any;
};
export type CB={
/**
*@description Compares the distance to the nearest Player with a float value.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@description (Required) A floating point value.
*/
"value":number;
[k:string]:any;
};
export type CC={
/**
*@description Returns true when the enum actor property matches the value provided.
*/
"test"?:string;
/**
*@description (Required) The property name to look for
*/
"domain":string;
/**
*@default "equals"
*@description (Optional) The comparison to apply with `value`.
*/
"operator"?:BI;
/**
*@default "self"
*@description (Optional) The subject of this filter test.
*/
"subject"?:BJ;
/**
*@description (Required) A string value.
*/
"value":string;
[k:string]:any;
};
export type CD={
/**
*@description Returns true when the float actor property matches the value provided.
*/
"test"?:string;
/**
*@description (Required) The property name to look for
*/
"domain":string;
/**
*@default "equals"
*@description (Optional) The comparison to apply with `value`.
*/
"operator"?:BI;
/**
*@default "self"
*@description (Optional) The subject of this filter test.
*/
"subject"?:BJ;
/**
*@description (Required) A floating point value.
*/
"value":number;
[k:string]:any;
};
export type CE={
/**
*@description Returns true when the subject entity has the named ability.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@description (Required) The Ability type to test.
*/
"value":string;
[k:string]:any;
};
export type CF={
/**
*@description Tests whether the biome the subject is in has the specified tag.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@description (Required) The tag to look for.
*/
"value":string;
[k:string]:any;
};
export type CG={
/**
*@description Returns true when the subject entity contains the named component.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@description (Required) The component name to look for.
*/
"value":string;
[k:string]:any;
};
export type CH={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description (Optional) true or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type CJ=string;
export type CI={
/**
*@description Returns true when the subject entity receives the named damage type.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@description The Damage type to test.
*/
"value":CJ;
[k:string]:any;
};
export type DA={
/**
*@description Tests for the presence of a named item in the designated slot of the subject entity.
*/
"test"?:"has_equipment";
/**
*@default "any"
*@description The equipment location to test.
*/
"domain"?:JsonType;
"operator"?:BI;
"subject"?:BJ;
/**
*@description The item name to look for.
*/
"value":BA;
[k:string]:any;
};
export type DB={
/**
*@description Tests whether the Subject has the specified mob effect.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@description The specified mob effect.
*/
"value":string;
[k:string]:any;
};
export type DC={
/**
*@description Tests for the presence of a named item in the designated slot of the subject entity.
*/
"test"?:"has_nametag";
/**
*@default "any"
*@description The equipment location to test.
*/
"domain"?:JsonType;
"operator"?:BI;
"subject"?:BJ;
/**
*@description The namtag to look for
*/
"value":boolean;
[k:string]:any;
};
export type DD={
/**
*@description Tests for the presence of a property of the subject entity.
*/
"test"?:string;
/**
*@default "equals"
*@description (Optionall) The comparison to apply with `value`.
*/
"operator"?:BI;
/**
*@default "self"
*@description (Optional) The subject of this filter test.
*/
"subject"?:BJ;
/**
*@description (Required) The property name to look for.
*/
"value":string;
[k:string]:any;
};
export type DE={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type DF={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type DG={
/**
*@description Returns true if the subject entity has the tag provided.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@description The tag as a string.
*@pattern [a-zA-Z0-9_]+
*/
"value":string;
[k:string]:any;
};
export type DH={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type DI={
/**
*@description Tests whether the target has any trade supply left. Will return false if the target cannot be traded with.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type DJ={
/**
*@description Compares the current 24 hour time with an int value in the range[0, 24000].
*/
"test"?:"hourly_clock_time";
"operator"?:BI;
"subject"?:BJ;
/**
*@description (Required) An integer value set between 0 and 24000.
*@minimum 0
*@maximum 24000
*/
"value":integer;
[k:string]:any;
};
export type EA={
/**
*@description Returns true when the subject entity is inside a specified Block type.
*/
"test"?:string;
/**
*@default "equals"
*@description (Optional) The comparison to apply with `value`.
*/
"operator"?:BI;
/**
*@default "self"
*@description (Optional) The subject of this filter test.
*/
"subject"?:BJ;
/**
*@description (Optional) A string value.
*/
"value"?:string;
[k:string]:any;
};
export type EB={
/**
*@description Returns true if the subject entity is in a caravan.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type EC={
/**
*@description Returns true when the subject entity is in the clouds.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type ED={
/**
*@description Returns true when the subject entity in contact with any water: water, rain, splash water bottle.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description (Optional) true or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type EE={
/**
*@description Returns true when the subject entity is in lava.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type EF={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type EG={
/**
*@description Returns true when the subject entity is in water or rain.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type EH={
/**
*@description Returns true when the subject entity is in water.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type EI={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@description The Family name to look for.
*/
"value":integer;
[k:string]:any;
};
export type EJ={
/**
*@description Returns true when the integer actor property matches the value provided.
*/
"test"?:string;
/**
*@description (Required) The property name to look for
*/
"domain":string;
/**
*@default "equals"
*@description (Optional) The comparison to apply with `value`.
*/
"operator"?:BI;
/**
*@default "self"
*@description (Optional) The subject of this filter test.
*/
"subject"?:BJ;
/**
*@description (Required) A integer value.
*/
"value":integer;
[k:string]:any;
};
export type FA={
/**
*@description Tests the current altitude against a provided value. 0= bedrock elevation.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@description The altitude value to compare with.
*@minimum 0
*/
"value":integer;
[k:string]:any;
};
export type FB={
/**
*@description Returns true if the subject entity is fleeing from other mobs.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type FC={
/**
*@description Tests whether the Subject is currently in the named biome.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@description The Biome type to test.
*/
"value":string;
[k:string]:any;
};
export type FD={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@description The Family name to look for.
*/
"value":string;
[k:string]:any;
};
export type FE={
/**
*@description Tests the current brightness against a provided value in the range (0.0f, 1.0f).
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@description The brightness value to compare with.
*@minimum 0
*@maximum 1
*/
"value":number;
[k:string]:any;
};
export type FF={
/**
*@description Returns true if the subject entity is climbing.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type FG={
/**
*@description Returns true if the subject entity is the named color.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@description The Palette Color to test.
*/
"value":string;
[k:string]:any;
};
export type FH={
/**
*@description Returns true during the daylight hours.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type FI={
/**
*@description Tests the current difficulty level of the game.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@description The game's difficulty level to test.
*/
"value":string;
[k:string]:any;
};
export type FJ={
/**
*@description Returns true when the subject entity is a member of the named family.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@description The Family name to look for.
*/
"value":string;
[k:string]:any;
};
export type GA={
/**
*@example
*```json
*"commandBlockOutput"
*```
*@example
*```json
*"commandBlocksEnabled"
*```
*@example
*```json
*"doDaylightCycle"
*```
*@example
*```json
*"doEntityDrops"
*```
*@example
*```json
*"doFireTick"
*```
*@example
*```json
*"doImmediateRespawn"
*```
*@example
*```json
*"doInsomnia"
*```
*@example
*```json
*"doMobLoot"
*```
*@example
*```json
*"doMobSpawning"
*```
*@example
*```json
*"doTileDrops"
*```
*@example
*```json
*"doWeatherCycle"
*```
*@example
*```json
*"drowningDamage"
*```
*@example
*```json
*"fallDamage"
*```
*@example
*```json
*"fireDamage"
*```
*@example
*```json
*"freezeDamage"
*```
*@example
*```json
*"functionCommandLimit"
*```
*@example
*```json
*"keepInventory"
*```
*@example
*```json
*"maxCommandChainLength"
*```
*@example
*```json
*"mobGriefing"
*```
*@example
*```json
*"naturalRegeneration"
*```
*@example
*```json
*"pvp"
*```
*@example
*```json
*"randomTickSpeed"
*```
*@example
*```json
*"respawnblocksexplode"
*```
*@example
*```json
*"sendCommandFeedback"
*```
*@example
*```json
*"showCoordinates"
*```
*@example
*```json
*"showDeathMessages"
*```
*@example
*```json
*"showTags"
*```
*@example
*```json
*"spawnRadius"
*```
*@example
*```json
*"tntExplodes"
*```
*@description The Game Rule to test.
*/
"domain":JsonType;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description Tests whether a named game rule is active.
*/
"value":boolean;
[k:string]:any;
};
export type GB={
/**
*@description Tests whether the Subject is in an area with humidity.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type GC={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type GD={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type GE={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type GF={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type GG={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@description The altitude value to compare with.
*/
"value"?:integer;
};
export type GH={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type GI={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type GJ={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type HA={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type HB={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type HC={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@description The altitude value to compare with.
*/
"value"?:integer;
[k:string]:any;
};
export type HD={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type HE={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type HF={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type HG={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type HH={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@description The Biome temperature catagory to test.
*/
"value":string;
[k:string]:any;
};
export type HI={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@description The Biome temperature value to compare with.
*@minimum 0
*@maximum 1
*/
"value":number;
[k:string]:any;
};
export type HJ={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type IA={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type IB={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@description The altitude value to compare with.
*/
"value":integer;
[k:string]:any;
};
export type IC={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type ID={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@description true or false.
*/
"value":boolean;
[k:string]:any;
};
export type IE={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@description An integer value.
*@minimum 0
*@maximum 16
*/
"value":integer;
[k:string]:any;
};
export type IF={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@description A floating point value.
*@minimum 0
*@maximum 1
*/
"value":number;
[k:string]:any;
};
export type IG={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@description An integer value.
*@minimum 0
*@maximum 7
*/
"value":integer;
[k:string]:any;
};
export type IH={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type II={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type IJ={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@description An integer value.
*/
"value":integer;
[k:string]:any;
};
export type JA={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@description An integer value.
*/
"value":integer;
[k:string]:any;
};
export type JB={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type JC={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type JD={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@example
*```json
*"thunderstorm"
*```
*@description The Family name to look for.
*/
"value":string;
[k:string]:any;
};
export type JE={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:BI;
"subject"?:BJ;
/**
*@example
*```json
*"clear"
*```
*@example
*```json
*"thunderstorm"
*```
*@description The Family name to look for.
*/
"value":string;
[k:string]:any;
};
export type BG=BG_groups_spec;
export type BF={
/**
*@default 1
*@description Anger level will decay over time. Defines how often anger towards all nuisances will be decreased by one
*/
"anger_decrement_interval"?:number;
/**
*@default 20
*@minimum 0
*@description Anger boost applied to angry threshold when mob gets angry.
*/
"angry_boost"?:integer;
/**
*@default 80
*@minimum 0
*@description Threshold that define when the mob is considered angry at a nuisance.
*/
"angry_threshold"?:integer;
/**
*@description The default amount of annoyingness for any given nuisance. Specifies how much to raise anger level on each provocation
*/
"default_annoyingness"?:number;
/**
*@description The default amount of annoyingness for projectile nuisance. Specifies how much to raise anger level on each provocation
*/
"default_projectile_annoyingness"?:number;
/**
*@default 100
*@minimum 0
*@description The maximum anger level that can be reached. Applies to any nuisance
*/
"max_anger"?:integer;
/**
*@description Filter that is applied to determine if a mob can be a nuisance.
*/
"nuisance_filter"?:BG;
"on_increase_sounds"?:BG;
/**
*@default true
*@description Defines if the mob should remove target if it falls below 'angry' threshold.
*/
"remove_targets_below_angry_threshold"?:boolean;
};
export type JF={
/**
*@description If true, other entities of the same entity definition within the broadcastRange will also become angry.
*/
"broadcast_anger"?:boolean;
/**
*@description Conditions that make this entry in the list valid.
*/
"broadcast_filters"?:BG;
/**
*@description Filter out mob types that it should not attack while angry (other Piglins).
*/
"filters"?:BG;
/**
*@default 20
*@description Distance in blocks within which other entities of the same entity definition will become angry.
*/
"broadcast_range"?:integer;
/**
*@description A list of entity families to broadcast anger to.
*/
"broadcast_targets"?:Array<string>;
/**
*@description Event to run after the number of seconds specified in duration expires (when the entity stops being "angry")
*/
"calm_event"?:BC;
/**
*@description The sound event to play when the mob is angry.
*/
"angry_sound"?:BE;
/**
*@description If true, other entities of the same entity definition within the broadcastRange will also become angry whenever this mob attacks.
*/
"broadcast_anger_on_attack"?:boolean;
/**
*@description If true, other entities of the same entity definition within the broadcastRange will also become angry whenever this mob is attacked.
*/
"broadcast_anger_on_being_attacked"?:boolean;
/**
*@default 25
*@description The amount of time in seconds that the entity will be angry.
*/
"duration"?:integer;
/**
*@description Variance in seconds added to the duration [-delta, delta].
*/
"duration_delta"?:integer;
/**
*@description The range of time in seconds to randomly wait before playing the sound again.
*/
"sound_interval"?:Array<JsonType>|{
/**
*@description The minimum interval.
*/
"range_min"?:number;
/**
*@description The maximum interval.
*/
"range_max"?:number;
};
};
export type JG={
/**
*@default 12
*@description The time in seconds required to break through doors.
*/
"break_time"?:number;
/**
*@default "hard"
*@description The minimum difficulty that the world must be on for this entity to break doors.
*/
"min_difficulty"?:string;
};
export type JH=Record<string,never>;
export type JI={
/**
*@description The type of damage that is applied to entities that enter the damage range.
*/
"cause"?:CJ;
/**
*@description Attack cooldown (in seconds) for how often this entity can attack a target.
*/
"damage_cooldown"?:number;
/**
*@default 2
*@description How much damage per tick is applied to entities that enter the damage range.
*/
"damage_per_tick"?:integer;
/**
*@default 0.2
*@description How close a hostile entity must be to have the damage applied.
*/
"damage_range"?:number;
/**
*@description The set of entities that are valid to apply the damage to when within range.
*/
"entity_filter"?:BG;
/**
*@default 5e-324
*@description If the entity should play their attack sound when attacking a target.
*/
"play_attack_sound"?:boolean;
};
export type BAA=string|{
/**
*@description The event to run when the conditions for this trigger are met.
*/
"event"?:string;
/**
*@description The list of conditions for this trigger to execute.
*/
"filters"?:BG;
/**
*@description The target of the event.
*/
"target"?:BJ;
};
export type JJ={
/**
*@description Event to be runned when the cooldown is complete.
*/
"attack_cooldown_complete_event"?:BAA;
/**
*@default [0,1]
*@description Amount of time in seconds for the cooldown. Can be specified as a number or a pair of numbers (Minimum and max).
*/
"attack_cooldown_time"?:Array<JsonType>|number;
};
export type BAB={
/**
*@description UNDOCUMENTED: value.
*/
"value":number;
};
export type BAD=number|Array<JsonType>|{
/**
*@description The minimum value of the range.
*/
"range_min"?:number;
/**
*@description The maximum value of the range.
*/
"range_max"?:number;
};
export type BAC={
/**
*@description Range of the random amount of damage the melee attack deals. A negative value can heal the entity instead of hurting it.
*/
"damage":BAD;
/**
*@example
*```json
*"wither"
*```
*@example
*```json
*"hunger"
*```
*@description Identifier of the status ailment to apply to an entity attacked by this entity's melee attack.
*/
"effect_name"?:string;
/**
*@default 1
*@description Duration in seconds of the status ailment applied to the damaged entity.
*/
"effect_duration"?:number;
};
export type BAE={
/**
*@description UNDOCUMENTED: mass.
*/
"mass"?:number;
};
export type BAF={
/**
*@description Loot table that's used to drop a random item.
*/
"barter_table"?:string;
/**
*@description Duration, in seconds, for which mob won't barter items if it was hurt.
*/
"cooldown_after_being_attacked"?:integer;
};
export type BAG=Record<string,never>;
export type BAI=string;
export type BAH={
/**
*@description The maximum radial distance in which a specified block can be detected. The biggest radius is 32.0.
*@minimum 0
*@maximum 32
*/
"sensor_radius"?:integer;
/**
*@description Blocks that will trigger the component when broken and what event will trigger.
*/
"on_break"?:Array<{
/**
*@description List of blocks that will trigger the sensor.
*/
"block_list"?:Array<BAI>;
/**
*@description Event to run when a block breaks.
*/
"on_block_broken"?:string;
}>;
/**
*@example
*```json
*{
*  "test": "has_silk_touch",
*  "subject": "other",
*  "value": false
*}
*```
*@description List of sources that break the block to listen for. If none are specified, all block breaks will be detected.
*/
"sources"?:Array<BG>;
};
export type BAJ={
/**
*@default 3
*@description Time in seconds for the boost.
*/
"duration"?:number;
/**
*@default 1
*@description Factor by which the entity's normal speed increases. E.g. 2.0 means go twice as fast.
*/
"speed_multiplier"?:number;
/**
*@description List of items that can be used to boost while riding this entity.
*/
"boost_items"?:Array<{
/**
*@default 1
*@description This is the damage that the item will take each time it is used.
*/
"damage"?:integer;
/**
*@default 1
*@description UNDOCUMENTED.
*/
"item_damage"?:integer;
/**
*@description Name of the item that can be used to boost.
*/
"item"?:J;
/**
*@description The item used to boost will become this item once it is used up.
*/
"replace_item"?:J;
}>;
};
export type BBA={
/**
*@default 55
*@description The Maximum distance from the boss at which the boss's health bar is present on the players screen.
*/
"hud_range"?:integer;
/**
*@description The name that will be displayed above the boss's health bar.
*/
"name"?:string;
/**
*@description Whether the sky should darken in the presence of the boss.
*/
"should_darken_sky"?:boolean;
};
export type BBC=string;
export type BBB={
/**
*@description A list of the blocks that can be broken as this entity moves around.
*/
"breakable_blocks"?:Array<BBC>;
};
export type BBE=BAI|{
"name"?:BAI;
/**
*@description 
*/
"states"?:{
[k:string]:boolean|integer|string;
};
/**
*@example
*```json
*"query.any_tag('wood')"
*```
*@description A condition using Molang queries that results to true/false that can be used to query for blocks with certain tags.
*/
"tags"?:BB;
};
export type BBD={
/**
*@default 15
*@description Time in seconds the entity can hold its breath.
*/
"total_supply"?:integer;
/**
*@default -20
*@description Time in seconds between suffocation damage.
*/
"suffocate_time"?:integer;
/**
*@description Time in seconds to recover breath to maximum.
*/
"inhale_time"?:number;
/**
*@default true
*@description If true, this entity can breathe in air.
*/
"breathes_air"?:boolean;
/**
*@description If true, this entity can breathe in water.
*/
"breathes_water"?:boolean;
/**
*@description If true, this entity can breathe in lava.
*/
"breathes_lava"?:boolean;
/**
*@description If true, this entity can breathe in solid blocks.
*/
"breathes_solids"?:boolean;
/**
*@default true
*@description If true, this entity will have visible bubbles while in water.
*/
"generates_bubbles"?:boolean;
/**
*@description List of blocks this entity can breathe in, in addition to the above.
*/
"breathe_blocks"?:Array<BBE>;
/**
*@description List of blocks this entity can't breathe in, in addition to the above.
*/
"non_breathe_blocks"?:Array<BBE>;
};
export type BBF_breeds_with_spec={
/**
*@description The entity definition of this entity's babies.
*/
"baby_type"?:string;
/**
*@description Event to run when this entity breeds.
*/
"breed_event"?:BBG;
/**
*@description The entity definition of this entity's mate.
*/
"mate_type"?:string;
[k:string]:any;
};
export type BBF_enviroment_requirements={
/**
*@description The block types required nearby for the entity to breed.
*/
"blocks"?:Array<BBE>|BBE;
/**
*@description The number of the required block types nearby for the entity to breed.
*/
"count"?:number;
/**
*@description How many blocks radius from the mob's center to search in for the required blocks. Bounded between 0 and 16.
*@minimum 0
*/
"radius"?:number;
[k:string]:any;
};
export type BBG={
/**
*@pattern ^[a-zA-Z0-9_\-:]+$
*@description The event to fire.
*/
"event"?:string;
/**
*@description The target of the event.
*/
"target"?:string;
"filters"?:BG;
};
export type BBF={
/**
*@description If true, entities can breed while sitting.
*/
"allow_sitting"?:boolean;
/**
*@default true
*@description If true, the entities will blend their attributes in the offspring after they breed. For example, horses blend their health, movement, and jump_strength in their offspring.
*/
"blend_attributes"?:boolean;
/**
*@default 60
*@description Time in seconds before the Entity can breed again.
*/
"breed_cooldown"?:number;
/**
*@description The list of items that can be used to get the entity into the `love` state.
*/
"breed_items"?:Array<J>|J;
/**
*@description The list of entity definitions that this entity can breed with.
*/
"breeds_with"?:BBF_breeds_with_spec|Array<BBF_breeds_with_spec>;
/**
*@description Determines how likely the baby of parents with the same variant will deny that variant and take a random variant within the given range instead.
*/
"deny_parents_variant"?:{
/**
*@description The percentage chance of denying the parents` variant.
*/
"chance"?:number;
/**
*@description The inclusive maximum of the variant range.
*/
"max_variant"?:integer;
/**
*@description The inclusive minimum of the variant range.
*/
"min_variant"?:integer;
};
/**
*@description The list of nearby block requirements to get the entity into the `love` state.
*/
"environment_requirements"?:BBF_enviroment_requirements|Array<BBF_enviroment_requirements>;
/**
*@description Chance that up to 16 babies will spawn between 0.0 and 1.0, where 1.0 is 100%.
*@minimum 0
*@maximum 1
*/
"extra_baby_chance"?:number;
/**
*@description The filters to run when attempting to fall in love.
*/
"love_filters"?:BG;
/**
*@description Determines how likely the babies are to NOT inherit one of their parent's variances. Values are between 0.0 and 1.0, with a higher number meaning more likely to mutate.
*/
"mutation_factor"?:{
/**
*@minimum 0
*@maximum 1
*@description The percentage chance of a mutation on the entity's color.
*/
"color"?:number;
/**
*@minimum 0
*@maximum 1
*@description The percentage chance of a mutation on the entity's extra variant type.
*/
"extra_variant"?:number;
/**
*@minimum 0
*@maximum 1
*@description The percentage chance of a mutation on the entity's variant type.
*/
"variant"?:number;
};
/**
*@description If true, the entity will become pregnant instead of spawning a baby.
*/
"causes_pregnancy"?:boolean;
/**
*@default true
*@description If true, the babies will be automatically tamed if its parents are.
*/
"inherit_tamed"?:boolean;
/**
*@description If true, the entity needs to be at full health before it can breed.
*/
"require_full_health"?:boolean;
/**
*@default true
*@description If true, the entities need to be tamed first before they can breed.
*/
"require_tame"?:boolean;
/**
*@description The feed item used will transform to this item upon successful interaction. Format: itemName:auxValue
*/
"transform_to_item"?:string;
};
export type BBH={
/**
*@default 2
*@description Time in seconds before the Entity can be bribed again.
*/
"bribe_cooldown"?:number;
/**
*@description The list of items that can be used to bribe the entity.
*/
"bribe_items"?:Array<J>;
};
export type BBI={
/**
*@description Base buoyancy used to calculate how much will a mob float.
*/
"base_buoyancy"?:number;
/**
*@default true
*@description Applies gravity each tick. Causes more of a wave simulation, but will cause more gravity to be applied outside liquids.
*/
"apply_gravity"?:boolean;
/**
*@default 1
*@description Base buoyancy used to calculate how much will a mob float.
*/
"buoyancy"?:number;
/**
*@default 0.03
*@description Probability for a big wave hitting the entity. Only used if `simulate_waves` is true.
*/
"big_wave_probability"?:number;
/**
*@default 10
*@description Multiplier for the speed to make a big wave. Triggered depending on `big_wave_probability`.
*/
"big_wave_speed"?:number;
/**
*@description How much an actor will be dragged down when the Buoyancy Component is removed.
*/
"drag_down_on_buoyancy_removed"?:number;
/**
*@description List of blocks this entity can float on. Must be a liquid block.
*/
"liquid_blocks"?:Array<BBE>;
/**
*@default true
*@description Should the movement simulate waves going through.
*/
"simulate_waves"?:boolean;
};
export type BBJ=boolean|{
[k:string]:any;
};
export type BCA=Record<string,never>;
export type BCB={
/**
*@default true
*@description Marks the entity as being able to fly, the pathfinder won't be restricted to paths where a solid block is required underneath it.
*/
"value"?:boolean;
};
export type BCC=Record<string,never>;
export type BCD={
/**
*@default true
*@description If true, celebration will be broadcasted to other entities in the radius.
*/
"broadcast"?:boolean;
/**
*@description The list of conditions that target of hunt must satisfy to initiate celebration.
*/
"celebration_targets"?:BG;
/**
*@description The sound event to play when the mob is celebrating.
*/
"celebrate_sound"?:BE;
/**
*@default 4
*@description Duration, in seconds, of celebration.
*/
"duration"?:integer;
/**
*@default 16
*@description If broadcast is enabled, specifies the radius in which it will notify other entities for celebration.
*/
"radius"?:number;
/**
*@description The range of time in seconds to randomly wait before playing the sound again.
*/
"sound_interval"?:Array<JsonType>|number|{
/**
*@description Minimum.
*/
"range_min"?:number;
/**
*@description Maximum.
*/
"range_max"?:number;
};
};
export type BCE={
/**
*@default 1
*@description Height of the collision box in blocks. A negative value will be assumed to be 0
*/
"height"?:number;
/**
*@default 1
*@description Width and Depth of the collision box in blocks. A negative value will be assumed to be 0
*/
"width"?:number;
};
export type BCF={
/**
*@description The Palette Color value of the entity.
*/
"value"?:integer;
};
export type BCG={
/**
*@description The second Palette Color value of the entity.
*/
"value"?:integer;
};
export type BCH={
/**
*@description Determines if the mob will grant mobs of the same type combat buffs if they kill the target.
*/
"apply_to_family"?:boolean;
/**
*@description Determines if the mob will grant itself the combat buffs if it kills the target.
*/
"apply_to_self"?:boolean;
/**
*@default 5
*@description The duration in seconds of Regeneration I added to the mob.
*/
"regeneration_duration"?:integer;
};
export type BCI={
/**
*@description The object containing the conditional bandwidth optimization values.
*/
"conditional_values"?:Array<{
/**
*@description In relation to the optimization value, determines the maximum ticks spatial update packets can be not sent.
*/
"max_dropped_ticks"?:integer;
/**
*@description The maximum distance considered during bandwidth optimizations. Any value below the Maximum is interpolated to find optimization, and any value greater than or equal to this Maximum results in Maximum optimization.
*/
"max_optimized_distance"?:number;
/**
*@description When set to true, smaller motion packets will be sent during drop packet intervals, resulting in the same amount of packets being sent as without optimizations but with much less data being sent. This should be used when actors are travelling very quickly or teleporting to prevent visual oddities.
*/
"use_motion_prediction_hints"?:boolean;
/**
*@description Conditions that must be met for these optimization values to be used.
*/
"conditional_values"?:Array<BG>;
}>;
/**
*@description The object containing the default bandwidth optimization values.
*/
"default_values"?:{
/**
*@description In relation to the optimization value, determines the maximum ticks spatial update packets can be not sent.
*/
"max_dropped_ticks"?:integer;
/**
*@description The maximum distance considered during bandwidth optimizations. Any value below the Maximum is interpolated to find optimization, and any value greater than or equal to this Maximum results in Maximum optimization.
*/
"max_optimized_distance"?:number;
/**
*@description When set to true, smaller motion packets will be sent during drop packet intervals, resulting in the same amount of packets being sent as without optimizations but with much less data being sent. This should be used when actors are travelling very quickly or teleporting to prevent visual oddities.
*/
"use_motion_prediction_hints"?:boolean;
};
};
export type BCJ={
/**
*@description Defines a hitbox size and pivot to test against.
*/
"hitboxes"?:Array<{
/**
*@description Height of the hitbox in blocks. A negative value will be assumed to be 0.
*/
"width"?:number;
/**
*@description Width and Depth of the hitbox in blocks. A negative value will be assumed to be 0.
*/
"height"?:number;
/**
*@description The offset from the entity's anchor where the hitbox will spawn.
*/
"pivot"?:Array<JsonType>;
}>;
};
export type BDA={
/**
*@default 1
*@description Amount of damage caused each hurt.
*/
"damage_per_hurt"?:integer;
/**
*@description Time in seconds between damage.
*/
"time_between_hurt"?:number;
};
export type BDB_triggers={
/**
*@default "none"
*@description Type of damage that triggers the events.
*/
"cause"?:CJ;
/**
*@description A modifier that adds to/removes from the base damage from the damage cause. It does not reduce damage to less than 0.
*/
"damage_modifier"?:number;
/**
*@default 1
*@description A multiplier that modifies the base damage from the damage cause. If deals_damage is true the multiplier can only reduce the damage the entity will take to a minimum of 1.
*/
"damage_multiplier"?:number;
/**
*@default true
*@description If true, the damage dealt to the entity will take away health from it, set to false to make the entity ignore that damage.
*/
"deals_damage"?:boolean;
/**
*@description Specifies filters for entity definitions and events.
*/
"on_damage"?:BAA;
/**
*@description Defines what sound to play, if any, when the on_damage filters are met.
*/
"on_damage_sound_event"?:BE;
};
export type BDB={
/**
*@example
*```json
*[
*  {
*    "cause": "all",
*    "deals_damage": false
*  }
*]
*```
*@description The list of triggers that fire when the environment conditions match the given filter criteria.
*/
"triggers"?:Array<BDB_triggers>|BDB_triggers;
};
export type BDC={
/**
*@default 1
*@description The dash cooldown in seconds.
*/
"cooldown_time"?:number;
/**
*@default 1
*@description Horizontal momentum of the dash.
*/
"horizontal_momentum"?:number;
/**
*@default 1
*@description Vertical momentum of the dash.
*/
"vertical_momentum"?:number;
};
export type BDD={
/**
*@description Angle in degrees.
*/
"value"?:number;
};
export type BDE={
/**
*@default true
*@description Determines if `min_range_random_chance` is used in the standard despawn rules.
*/
"despawn_from_chance"?:boolean;
/**
*@description Defines the minimum and maximum distance for despawn to occur.
*/
"despawn_from_distance"?:{
/**
*@default 128
*@description Maximum distance for standard despawn rules to instantly despawn the mob.
*/
"max_distance"?:integer;
/**
*@default 32
*@description Minimum distance for standard despawn rules to try to despawn the mob.
*/
"min_distance"?:integer;
};
/**
*@default true
*@description Determines if the `min_range_inactivity_timer` is used in the standard despawn rules.
*/
"despawn_from_inactivity"?:boolean;
/**
*@default true
*@description Determines if the mob is instantly despawned at the edge of simulation distance in the standard despawn rules.
*/
"despawn_from_simulation_edge"?:boolean;
/**
*@description The list of conditions that must be satisfied before the Actor is despawned. If a filter is defined then standard despawn rules are ignored.
*/
"filters"?:BG;
/**
*@default 30
*@description The amount of time in seconds that the mob must be inactive.
*/
"min_range_inactivity_timer"?:integer;
/**
*@default 800
*@description A random chance between 1 and the given value.
*/
"min_range_random_chance"?:integer;
/**
*@description If true, all entities linked to this entity in a child relationship (eg. leashed) will also be despawned.
*/
"remove_child_entities"?:boolean;
};
export type BDF={
/**
*@description Event to fire when the drying out time runs out.
*/
"dried_out_event"?:BC;
/**
*@description Event to fire when entity was already dried out but received increase in water supply.
*/
"recover_after_dried_out_event"?:BC;
/**
*@description Event to fire when entity stopped drying out, for example got into water or under rain.
*/
"stopped_drying_out_event"?:BC;
/**
*@description Amount of time in seconds to dry out fully.
*/
"total_time"?:number;
/**
*@description Optional amount of additional time in seconds given by using splash water bottle on entity.
*/
"water_bottle_refill_time"?:number;
};
export type BDG={
/**
*@description The type of dwelling the mob wishes to join. Current Types: village
*/
"dwelling_type"?:string;
/**
*@description The role of which the mob plays in the dwelling. Current Roles: inhabitant, defender, hostile, passive.
*/
"dweller_role"?:string;
/**
*@description How often the mob checks on their dwelling status in ticks. Positive values only.
*@minimum 0
*/
"update_interval_base"?:number;
/**
*@description The variant value in ticks that will be added to the update_interval_base.
*/
"update_interval_variant"?:number;
/**
*@description Whether or not the mob can find and add POI's to the dwelling.
*/
"can_find_poi"?:boolean;
/**
*@description How much reputation should the players be rewarded on first founding?.
*/
"first_founding_reward"?:integer;
/**
*@description Can this mob migrate between dwellings? Or does it only have its initial dwelling?.
*/
"can_migrate"?:boolean;
/**
*@description A padding distance for checking if the mob is within the dwelling.
*/
"dwelling_bounds_tolerance"?:number;
/**
*@description Allows the user to define a starting profession for this particular Dweller, instead of letting them choose organically. (They still need to gain experience from trading before this takes effect.)
*/
"preferred_profession"?:string;
};
export type BDH={
/**
*@description Determines when the mob transforms, if the trades should be converted when the new mob has a economy_trade_table. When the trades are converted, the mob will generate a new trade list with their new trade table, but then it will try to convert any of the same trades over to have the same enchantments and user data. For example, if the original has a Emerald to Enchanted Iron Sword (Sharpness 1), and the new trade also has an Emerald for Enchanted Iron Sword, then the enchantment will be Sharpness 1.
*/
"convert_trades_economy"?:boolean;
/**
*@default [-5,-20]
*@description How much should the discount be modified by when the player has cured the Zombie Villager. Can be specified as a pair of numbers (low-tier trade discount and high-tier trade discount)
*/
"cured_discount"?:Array<JsonType>;
/**
*@description Name to be displayed while trading with this entity.
*/
"display_name"?:string;
/**
*@default -4
*@description Used in legacy prices to determine how much should Demand be modified by when the player has the Hero of the Village mob effect.
*/
"hero_demand_discount"?:integer;
/**
*@default [-25,-63]
*@description The Maximum the discount can be modified by when the player has cured the Zombie Villager. Can be specified as a pair of numbers (low-tier trade discount and high-tier trade discount)
*/
"max_cured_discount"?:Array<JsonType>;
/**
*@default -200
*@description The Maximum the discount can be modified by when the player has cured a nearby Zombie Villager.
*/
"max_nearby_cured_discount"?:integer;
/**
*@default -25
*@description How much should the discount be modified by when the player has cured a nearby Zombie Villager.
*/
"nearby_cured_discount"?:integer;
/**
*@description Used to determine if trading with entity opens the new trade screen.
*/
"new_screen"?:boolean;
/**
*@description Determines if the trades should persist when the mob transforms. This makes it so that the next time the mob is transformed to something with a trade_table or economy_trade_table, then it keeps their trades.
*/
"persist_trades"?:boolean;
/**
*@default true
*@description Show an in game trade screen when interacting with the mob.
*/
"show_trade_screen"?:boolean;
/**
*@description File path relative to the resource pack root for this entity's trades.
*/
"table"?:string;
/**
*@description Determines whether the legacy formula is used to determines the trade prices.
*/
"use_legacy_price_formula"?:boolean;
};
export type BDI={
/**
*@default -1
*@description The maximum number of entities that must pass the filter conditions for the event to send.
*/
"maximum_count"?:integer;
/**
*@default 1
*@description The minimum number of entities that must pass the filter conditions for the event to send.
*/
"minimum_count"?:integer;
/**
*@default true
*@description If true the sensor range is additive on top of the entity's size.
*/
"relative_range"?:boolean;
/**
*@description If true requires all nearby entities to pass the filter conditions for the event to send.
*/
"require_all"?:boolean;
/**
*@default 10
*@description The maximum distance another entity can be from this and have the filters checked against it.
*/
"sensor_range"?:number;
"event_filters"?:BG;
/**
*@description event.
*/
"event"?:string;
};
export type BDJ_trigger=BAA;
export type BDJ={
/**
*@description The list of triggers that fire when the environment conditions match the given filter criteria.
*/
"triggers"?:Array<BDJ_trigger>|BDJ_trigger;
};
export type BEA=Record<string,never>;
export type BEC=string;
export type BEB={
/**
*@description A list of slots with the chance to drop an equipped item from that slot.
*/
"slot_drop_chance"?:Array<{
/**
*@description The chance that the item in this slot will drop.
*/
"drop_chance"?:number;
/**
*@example
*```json
*"slot.weapon.mainhand"
*```
*@description The slot in which the item will drop from.
*/
"slot"?:string;
}>;
/**
*@description The file path to the equipment table, relative to the behavior pack's root.
*/
"table"?:BEC;
};
export type BED={
/**
*@description List of slots and the item that can be equipped.
*/
"slots"?:Array<{
/**
*@description The slot number of this slot.
*/
"slot"?:integer;
/**
*@description The list of items that can go in this slot.
*/
"accepted_items"?:Array<J>;
/**
*@description Identifier of the item that can be equipped for this slot.
*/
"item"?:J;
/**
*@description Text to be displayed when the entity can be equipped with this item when playing with Touch-screen controls.
*/
"interact_text"?:string;
/**
*@description Event to trigger when this entity is equipped with this item.
*/
"on_equip"?:BC;
/**
*@description Event to trigger when this item is removed from this entity.
*/
"on_unequip"?:BC;
[k:string]:any;
}>;
};
export type BEE={
/**
*@default 0.1
*@description Amount of exhaustion applied when attacking.
*/
"attack"?:number;
/**
*@default 0.1
*@description Amount of exhaustion applied when taking damage.
*/
"damage"?:number;
/**
*@default 6
*@description Amount of exhaustion applied when healed through food regeneration.
*/
"heal"?:number;
/**
*@default 0.05
*@description Amount of exhaustion applied when jumping.
*/
"jump"?:number;
/**
*@default 0.005
*@description Amount of exhaustion applied when mining.
*/
"mine"?:number;
/**
*@default 0.01
*@description Amount of exhaustion applied when sprinting.
*/
"sprint"?:number;
/**
*@default 0.2
*@description Amount of exhaustion applied when sprint jumping.
*/
"sprint_jump"?:number;
/**
*@default 0.01
*@description Amount of exhaustion applied when swimming.
*/
"swim"?:number;
/**
*@description Amount of exhaustion applied when walking.
*/
"walk"?:number;
};
export type BEF={
/**
*@description A molang expression defining the amount of experience rewarded when this entity is successfully bred. An array of expressions adds each expression's result together for a final total.
*/
"on_bred"?:string|number;
/**
*@description A molang expression defining the amount of experience rewarded when this entity dies. An array of expressions adds each expression's result together for a final total.
*/
"on_death"?:string|number;
};
export type BEG={
/**
*@default true
*@description If true, the explosion will destroy blocks in the explosion radius.
*/
"breaks_blocks"?:boolean;
/**
*@description If true, blocks in the explosion radius will be set on fire.
*/
"causes_fire"?:boolean;
/**
*@description If true, whether the explosion breaks blocks is affected by the mob griefing game rule.
*/
"destroy_affected_by_griefing"?:boolean;
/**
*@description If true, whether the explosion causes fire is affected by the mob griefing game rule.
*/
"fire_affected_by_griefing"?:boolean;
/**
*@default [0,0]
*@description The range for the random amount of time the fuse will be lit before exploding, a negative value means the explosion will be immediate.
*/
"fuse_length"?:Array<JsonType>|number;
/**
*@description If true, the fuse is already lit when this component is added to the entity.
*/
"fuse_lit"?:boolean;
/**
*@description A blocks explosion resistance will be capped at this value when an explosion occurs.
*/
"max_resistance"?:number;
/**
*@default 3
*@description The radius of the explosion in blocks and the amount of damage the explosion deals.
*/
"power"?:number;
};
export type BEH={
/**
*@default 1
*@description UNDOCUMENTED: value.
*/
"value"?:number;
};
export type BEI=Record<string,never>;
export type BEJ=Record<string,never>;
export type BFA={
/**
*@description The amount of blocks away the entity will look at to push away from.
*/
"block_distance"?:number;
/**
*@description The weight of the push back away from blocks.
*/
"block_weight"?:number;
/**
*@description The amount of push back given to a flocker that breaches out of the water.
*/
"breach_influence"?:number;
/**
*@default 1
*@description The threshold in which to start applying cohesion.
*/
"cohesion_threshold"?:number;
/**
*@default 1
*@description The weight applied for the cohesion steering of the flock.
*/
"cohesion_weight"?:number;
/**
*@description The weight on which to apply on the goal output.
*/
"goal_weight"?:number;
/**
*@description Determines the high bound amount of entities that can be allowed in the flock.
*/
"high_flock_limit"?:integer;
/**
*@description Tells the Flocking Component if the entity exists in water.
*/
"in_water"?:boolean;
/**
*@description The area around the entity that allows others to be added to the flock.
*/
"influence_radius"?:number;
/**
*@description The distance in which the flocker will stop applying cohesion.
*/
"innner_cohesion_threshold"?:number;
/**
*@description The percentage chance between 0-1 that a fish will spawn and not want to join flocks. Invalid values will be capped at the end points.
*/
"loner_chance"?:number;
/**
*@description Determines the low bound amount of entities that can be allowed in the flock.
*/
"low_flock_limit"?:integer;
/**
*@description Tells the flockers that they can only match similar entities that also match the variant, mark variants, and color data of the other potential flockers.
*/
"match_variants"?:boolean;
/**
*@description The Maximum height allowable in the air or water.
*/
"max_height"?:number;
/**
*@description The Minimum height allowable in the air or water.
*/
"min_height"?:number;
/**
*@default 2
*@description The distance that is determined to be to close to another flocking and to start applying separation.
*/
"separation_threshold"?:number;
/**
*@default 1
*@description The weight applied to the separation of the flock.
*/
"separation_weight"?:number;
/**
*@description Tells the flockers that they will follow flocks based on the center of mass.
*/
"use_center_of_mass"?:boolean;
};
export type BFB={
/**
*@default 0.02
*@description Flying speed in blocks per tick.
*/
"value"?:number;
};
export type BFC={
/**
*@description UNDOCUMENTED.
*/
"value"?:integer;
/**
*@description UNDOCUMENTED.
*/
"max"?:integer;
};
export type BFD={
/**
*@default 1
*@description The higher the number, the more the friction affects this entity. A value of 1.0 means regular friction, while 2.0 means twice as much
*/
"value"?:number;
};
export type BFE={
/**
*@description If true, the `flap` game event will be emitted when the entity moves through air.
*/
"emit_flap"?:boolean;
/**
*@default true
*@description If true, the `entityMove` game event will be emitted when the entity moves on ground or through a solid.
*/
"emit_move"?:boolean;
/**
*@default true
*@description If true, the `swim` game event will be emitted when the entity moves through a liquid.
*/
"emit_swim"?:boolean;
};
export type BFF_integer_range=integer|{
/**
*@description Lower bound of the vaues.
*/
"range_min"?:integer;
/**
*@description Upper bound of the vaues.
*/
"range_max"?:integer;
[k:string]:any;
};
export type BFF={
/**
*@default 0.03125
*@description Chance that an allele will be replaced with a random one instead of the parent's allele during birth.
*/
"mutation_rate"?:number;
/**
*@description The list of genes that this entity has and will cross with a partner during breeding.
*/
"genes"?:Array<{
/**
*@description The range of positive integer allele values for this gene. Spawned mobs will have a random number in this range assigned to them.
*/
"allele_range"?:BFF_integer_range;
/**
*@description The list of genetic variants for this gene. These check for particular allele combinations and fire events when all of them are satisfied.
*/
"genetic_variants"?:Array<{
/**
*@description Event to run when this mob is created and matches the above allele conditions.
*/
"birth_event"?:BC;
/**
*@default -1
*@description If this value is non-negative, compare both the mob's main and hidden alleles with this value for a match with both. Can also be a range of integers.
*/
"both_allele"?:BFF_integer_range;
/**
*@default -1
*@description If this value is non-negative, compare both the mob's main and hidden alleles with this value for a match with either. Can also be a range of integers.
*/
"either_allele"?:integer;
/**
*@default -1
*@description If this value is non-negative, compare the mob's hidden allele with this value for a match. Can also be a range of integers.
*/
"hidden_allele"?:integer;
/**
*@default -1
*@description If this value is non-negative, compare the mob's main allele with this value for a match. Can also be a range of integers.
*/
"main_allele"?:BFF_integer_range;
/**
*@default -1
*@description If this value is non-negative, overrides the chance for this gene that an allele will be replaced with a random one instead of the parent's allele during birth. Non-negative values greater than 1 will be the same as the value 1.
*/
"mutation_rate"?:number;
[k:string]:any;
}>;
/**
*@description The name of the gene.
*/
"name"?:string;
[k:string]:any;
}>;
};
export type BFG={
/**
*@description Defines sets of items that can be used to trigger events when used on this entity. The item will also be taken and placed in the entity's inventory.
*/
"triggers"?:{
/**
*@description An optional cool down in seconds to prevent spamming interactions.
*/
"cooldown"?:number;
/**
*@description The list of items that can be given to the entity to place in their inventory.
*/
"items"?:Array<J>;
/**
*@description Event to fire when the correct item is given.
*/
"on_give"?:BC;
};
};
export type BFH={
/**
*@description The value of the entity's offset from the terrain, in blocks.
*/
"value"?:number;
};
export type BFI={
/**
*@description The list of conditions that must be satisfied for other entities to be counted towards group size.
*/
"filters"?:BG;
/**
*@default 16
*@description Radius from center of entity.
*/
"radius"?:number;
};
export type BFJ={
/**
*@description Value between 0-1. Chance of success per tick.
*@minimum 0
*@maximum 1
*/
"chance"?:number;
/**
*@default 10
*@description Number of charges.
*/
"charges"?:integer;
};
export type BGA_effect={
/**
*@description UNDOCUMENTED.
*/
"name"?:string;
/**
*@minimum 0
*@description The duration of the effect.
*/
"duration"?:integer;
/**
*@minimum 0
*@description The amplifier of the effect.
*/
"amplifier"?:integer;
[k:string]:any;
};
export type BGA={
"filters"?:BG;
/**
*@description Determines if item can be used regardless of entity being at full health.
*/
"force_use"?:boolean;
/**
*@description The array of items that can be used to heal this entity.
*/
"items"?:Array<{
/**
*@description The filter group that defines the conditions for using this item to heal the entity.
*/
"filters"?:BG;
/**
*@default 1
*@description The amount of health this entity gains when fed this item.
*/
"heal_amount"?:integer;
/**
*@description Item that can be used to heal this entity.
*/
"item"?:J;
"effects"?:BGA_effect|Array<BGA_effect>;
[k:string]:any;
}>;
};
export type BGB={
/**
*@description The maximum starting health an entity has.
*/
"max"?:integer;
/**
*@description The amount of health an entity to start with by default.
*/
"value"?:integer|{
/**
*@description The minimum amount of health this mob could have.
*/
"range_min":number;
/**
*@description The maximum amount of health this mob could have.
*/
"range_max":number;
};
};
export type BGC={
/**
*@description A Molang expression defining the inter-beat interval in seconds. A value of zero or less means no heartbeat..
*/
"interval"?:E;
/**
*@description Level sound event to be played as the heartbeat sound.
*/
"sound_event"?:string;
};
export type BGD=Record<string,never>;
export type BGE={
/**
*@default -1
*@description The radius that the entity will be restricted to in relation to its home.
*/
"restriction_radius"?:integer;
/**
*@description Optional block list that the home position will be associated with. If any of the blocks no longer exist at that position, the home restriction is removed. Example syntax: minecraft:sand. Not supported: minecraft:sand:1
*/
"home_block_list"?:Array<BA>;
};
export type BGF={
/**
*@description The multiplier to apply to the jumping height.
*/
"value"?:{
"range_min"?:number;
"range_max"?:number;
}|number;
};
export type BGG={
/**
*@description An array of conditions used to compare the event to.
*/
"damage_conditions"?:Array<{
"filters"?:BG;
/**
*@description Damage cause.
*/
"cause"?:CJ;
/**
*@description Amount of damage done each tick that the conditions are met.
*/
"damage_per_tick"?:integer;
}>;
};
export type BGH=Record<string,never>;
export type BGI=Record<string,never>;
export type BHA={
/**
*@description The block id, for example: `minecraft:air'.
*/
"name"?:string;
/**
*@description The block states.
*/
"states"?:{
[k:string]:string|boolean|number;
};
};
export type BGJ={
/**
*@description List of blocks, with certain block states, that we are monitoring to see if the entity is inside.
*/
"block_list"?:Array<{
"block"?:BHA;
/**
*@description Event to run when this mob enters a valid block.
*/
"entered_block_event"?:BC;
/**
*@description Event to run when this mob leaves a valid block.
*/
"exited_block_event"?:BC;
}>;
};
export type BHB={
/**
*@default 3
*@description Number of days the mob has to stay up until the insomnia effect begins.
*/
"days_until_insomnia"?:number;
};
export type BHC={
/**
*@description If true, all entities linked to this entity in a child relationship (eg. leashed) will also be despawned.
*/
"remove_child_entities"?:boolean;
};
export type BHD_interaction_spec={
/**
*@description Loot table with items to add to the player's inventory upon successful interaction.
*/
"add_items"?:{
/**
*@description File path, relative to the Behavior Pack's path, to the loot table file.
*/
"table"?:BEC;
};
/**
*@description Time in seconds before this entity can be interacted with again.
*/
"cooldown"?:number;
/**
*@description Allows entity to admire the item. Requires "minecraft:admire_item" and "minecraft:behavior.admire_item" to work.
*/
"admire"?:boolean;
/**
*@description Allows entity to barter with the item. Requires "minecraft:barter" to work.
*/
"barter"?:boolean;
/**
*@description Time in seconds before this entity can be interacted with after being attacked.
*/
"cooldown_after_being_attacked"?:number;
/**
*@description The amount of health this entity will recover or hurt when interacting with this item. Negative values will harm the entity.
*/
"health_amount"?:integer;
/**
*@description The amount of damage the item will take when used to interact with this entity. A value of 0 means the item won't lose durability.
*/
"hurt_item"?:integer;
/**
*@description Text to show when the player is able to interact in this way with this entity when playing with Touch-screen controls.
*/
"interact_text"?:string;
/**
*@description Event to fire when the interaction occurs.
*/
"on_interact"?:BAA;
/**
*@description Particle effect that will be triggered at the start of the interaction.
*/
"particle_on_start"?:{
/**
*@description Whether or not the particle will appear closer to who performed the interaction.
*/
"particle_offset_towards_interactor"?:boolean;
/**
*@description The type of particle that will be spawned.
*/
"particle_type"?:string;
/**
*@description Will offset the particle this amount in the y direction.
*/
"particle_y_offset"?:number;
[k:string]:any;
};
/**
*@description List of sounds to play when the interaction occurs.
*/
"play_sounds"?:BE;
/**
*@description List of entities to spawn when the interaction occurs.
*/
"spawn_entities"?:string;
/**
*@description Loot table with items to drop on the ground upon successful interaction.
*/
"spawn_items"?:{
/**
*@description File path, relative to the Behavior Pack's path, to the loot table file.
*/
"table"?:BEC;
};
/**
*@description If true, the player will do the "swing" animation when interacting with this entity.
*/
"swing"?:boolean;
/**
*@description The feed item used will transform to this item upon successful interaction. Format: itemName:auxValue
*/
"transform_to_item"?:string;
/**
*@description If true, the interaction will use an item.
*/
"use_item"?:boolean;
/**
*@description Vibration to emit when the interaction occurs. Admitted values are entity_interact (used by default), shear, and none (no vibration emitted).
*/
"vibration"?:string;
/**
*@description UNDOCUMENTED Item to give to the player upon successful interaction.
*/
"give_item"?:boolean;
/**
*@description UNDOCUMENTED Takes an item from the player.
*/
"take_item"?:boolean;
};
export type BHD={
/**
*@description The interactions.
*/
"interactions"?:BHD_interaction_spec|Array<BHD_interaction_spec>;
};
export type BHE={
/**
*@description Number of slots that this entity can gain per extra strength.
*/
"additional_slots_per_strength"?:integer;
/**
*@description If true, the contents of this inventory can be removed by a hopper.
*/
"can_be_siphoned_from"?:boolean;
/**
*@default "none"
*@description Type of container this entity has. Can be horse, minecart_chest, chest_boat, minecart_hopper, inventory, container or hopper
*/
"container_type"?:string;
/**
*@default 5
*@description Number of slots the container has.
*/
"inventory_size"?:integer;
/**
*@description If true, only the entity can access the inventory.
*/
"private"?:boolean;
/**
*@description If true, the entity's inventory can only be accessed by its owner or itself.
*/
"restrict_to_owner"?:boolean;
};
export type BHF=Record<string,never>;
export type BHG=Record<string,never>;
export type BHH=Record<string,never>;
export type BHI={
/**
*@description The text that will display when interacting with this entity with a dye when playing with Touch-screen controls.
*/
"interact_text"?:string;
};
export type BHJ=Record<string,never>;
export type BIA=Record<string,never>;
export type BIB=Record<string,never>;
export type BIC=Record<string,never>;
export type BID=Record<string,never>;
export type BIE=Record<string,never>;
export type BIF={
/**
*@description UNDOCUMENTED.
*/
"value"?:boolean;
};
export type BIG=Record<string,never>;
export type BIH=Record<string,never>;
export type BII={
/**
*@description List of items that can be used to control this entity.
*/
"control_items"?:Array<string>|string;
};
export type BIJ=Record<string,never>;
export type BJA=Record<string,never>;
export type BJB={
/**
*@default 0.42
*@description The initial vertical velocity for the jump.
*/
"jump_power"?:number;
};
export type BJC={
/**
*@default 1
*@description Percentage of knockback to reduce with 1.0 being 100% reduction.
*/
"value"?:number;
/**
*@default 1
*@description The maximum amount of knockback resistance that can be applied to the entity.
*/
"maximum"?:number;
};
export type BJD={
/**
*@description UNDOCUMENTED.
*/
"value"?:number;
};
export type BJE={
/**
*@description If true, players can leash this entity even if it is already leashed to another mob.
*/
"can_be_stolen"?:boolean;
/**
*@default 6
*@description Distance in blocks at which the leash stiffens, restricting movement.
*/
"hard_distance"?:number;
/**
*@default 10
*@description Distance in blocks at which the leash breaks.
*/
"max_distance"?:number;
/**
*@description Event to call when this entity is leashed.
*/
"on_leash"?:BC;
/**
*@description Event to call when this entity is unleashed.
*/
"on_unleash"?:BC;
/**
*@default 4
*@description Distance in blocks at which the `spring` effect starts acting to keep this entity close to the entity that leashed it.
*/
"soft_distance"?:number;
};
export type BJF={
/**
*@description If true, invulnerable entities (e.g. Players in creative mode) are considered valid targets.
*/
"allow_invulnerable"?:boolean;
/**
*@description Defines the entities that can trigger this component.
*/
"filters"?:BG;
/**
*@default [0,0]
*@description The range for the random amount of time during which the entity is `cooling down` and won't get angered or look for a target.
*/
"look_cooldown"?:BAD;
/**
*@description The event identifier to run when the entities specified in filters look at this entity.
*/
"look_event"?:BC;
/**
*@default 10
*@description Maximum distance this entity will look for another entity looking at it.
*/
"search_radius"?:number;
/**
*@default true
*@description If true, this entity will set the attack target as the entity that looked at it.
*/
"set_target"?:boolean;
};
export type BJG={
/**
*@default "loot_tables/empty.json"
*@pattern ^loot_tables/.*.json$
*@description The path to the loot table, relative to the Behavior Pack's root.
*/
"table":string;
};
export type BJH=Record<string,never>;
export type BJI={
/**
*@description The ID of the variant. By convention, 0 is the ID of the base entity
*/
"value":integer;
};
export type BJJ={
/**
*@description Time in seconds to wait between each application of the effect.
*/
"cooldown_time"?:integer;
/**
*@default 0.2
*@description How close a hostile entity must be to have the mob effect applied.
*/
"effect_range"?:number;
/**
*@default 10
*@description How long the applied mob effect lasts in seconds.
*/
"effect_time"?:integer;
/**
*@description Filter to use for conditions.
*/
"entity_filter"?:BG;
/**
*@description The mob effect that is applied to entities that enter this entities effect range.
*/
"mob_effect"?:string;
};
export type CAA={
/**
*@default 1
*@description The higher the number, the less often the movement sound will be played.
*/
"value":number;
};
export type CAB={
/**
*@default 30
*@description The maximum number in degrees the mob can turn per tick.
*/
"max_turn"?:number;
};
export type CAC={
/**
*@default 30
*@description The maximum number in degrees the mob can turn per tick.
*/
"max_turn"?:number;
};
export type CAD={
/**
*@default 30
*@description The maximum number in degrees the mob can turn per tick.
*/
"max_turn"?:number;
};
export type CAE={
/**
*@default 30
*@description The maximum number in degrees the mob can turn per tick.
*/
"max_turn"?:number;
};
export type CAF={
/**
*@default 30
*@description The maximum number in degrees the mob can turn per tick.
*/
"max_turn"?:number;
/**
*@description UNDOCUMENTED.
*/
"start_speed"?:number;
/**
*@description UNDOCUMENTED.
*/
"speed_when_turning"?:number;
};
export type CAG={
/**
*@default 30
*@description The maximum number in degrees the mob can turn per tick.
*/
"max_turn"?:number;
};
export type CAH={
/**
*@default [0,0]
*@description Delay after landing when using the slime move control.
*/
"jump_delay"?:Array<JsonType>;
/**
*@default 30
*@description The maximum number in degrees the mob can turn per tick.
*/
"max_turn"?:number;
};
export type CAI={
/**
*@default 30
*@description The maximum number in degrees the mob can turn per tick.
*/
"max_turn"?:number;
};
export type CAJ={
/**
*@default 30
*@description The maximum number in degrees the mob can turn per tick.
*/
"max_turn"?:number;
/**
*@default 0.05
*@description Strength of the sway movement.
*/
"sway_amplitude"?:number;
/**
*@default 0.5
*@description Multiplier for the frequency of the sway movement.
*/
"sway_frequency"?:number;
};
export type CBA={
/**
*@description UNDOCUMENTED.
*/
"value"?:Array<JsonType>|number|{
"range_min"?:number;
"range_max"?:number;
};
/**
*@description UNDOCUMENTED.
*/
"max"?:number;
};
export type CBB_name_action={
/**
*@description List of special names that will cause the events defined in `on_named` to fire.
*/
"name_filter"?:string;
/**
*@description Event to be called when this entity acquires the name specified in `name_filter'.
*/
"on_named"?:BC;
};
export type CBB={
/**
*@default true
*@description If true, this entity can be renamed with name tags.
*/
"allow_name_tag_renaming"?:boolean;
/**
*@description If true, the name will always be shown.
*/
"always_show"?:boolean;
/**
*@description Trigger to run when the entity gets named.
*/
"default_trigger"?:BAA;
/**
*@description Describes the special names for this entity and the events to call when the entity acquires those names.
*/
"name_actions"?:Array<CBB_name_action>|CBB_name_action;
};
export type CBC={
/**
*@description Tells the pathfinder to avoid blocks that cause damage when finding a path.
*/
"avoid_damage_blocks"?:boolean;
/**
*@description Tells the pathfinder to avoid portals (like nether portals) when finding a path.
*/
"avoid_portals"?:boolean;
/**
*@description Whether or not the pathfinder should avoid tiles that are exposed to the sun when creating paths.
*/
"avoid_sun"?:boolean;
/**
*@description Tells the pathfinder to avoid water when creating a path.
*/
"avoid_water"?:boolean;
/**
*@description Tells the pathfinder which blocks to avoid when creating a path.
*/
"blocks_to_avoid"?:Array<BBE>;
/**
*@description Tells the pathfinder whether or not it can jump out of water (like a dolphin).
*/
"can_breach"?:boolean;
/**
*@description Tells the pathfinder that it can path through a closed door and break it.
*/
"can_break_doors"?:boolean;
/**
*@default true
*@description Tells the pathfinder whether or not it can jump up blocks.
*/
"can_jump"?:boolean;
/**
*@description Tells the pathfinder that it can path through a closed door assuming the AI will open the door.
*/
"can_open_doors"?:boolean;
/**
*@description Tells the pathfinder that it can path through a closed iron door assuming the AI will open the door.
*/
"can_open_iron_doors"?:boolean;
/**
*@default true
*@description Whether a path can be created through a door.
*/
"can_pass_doors"?:boolean;
/**
*@description Tells the pathfinder that it can start pathing when in the air.
*/
"can_path_from_air"?:boolean;
/**
*@description Tells the pathfinder whether or not it can travel on the surface of the lava.
*/
"can_path_over_lava"?:boolean;
/**
*@description Tells the pathfinder whether or not it can travel on the surface of the water.
*/
"can_path_over_water"?:boolean;
/**
*@default true
*@description Tells the pathfinder whether or not it will be pulled down by gravity while in water.
*/
"can_sink"?:boolean;
/**
*@description Tells the pathfinder whether or not it can path anywhere through water and plays swimming animation along that path.
*/
"can_swim"?:boolean;
/**
*@default true
*@description Tells the pathfinder whether or not it can walk on the ground outside water.
*/
"can_walk"?:boolean;
/**
*@description Tells the pathfinder whether or not it can travel in lava like walking on ground.
*/
"can_walk_in_lava"?:boolean;
/**
*@description Tells the pathfinder whether or not it can walk on the ground underwater.
*/
"is_amphibious"?:boolean;
};
export type CBD={
/**
*@description Tells the pathfinder to avoid blocks that cause damage when finding a path.
*/
"avoid_damage_blocks"?:boolean;
/**
*@description Tells the pathfinder to avoid portals (like nether portals) when finding a path.
*/
"avoid_portals"?:boolean;
/**
*@description Whether or not the pathfinder should avoid tiles that are exposed to the sun when creating paths.
*/
"avoid_sun"?:boolean;
/**
*@description Tells the pathfinder to avoid water when creating a path.
*/
"avoid_water"?:boolean;
/**
*@description Tells the pathfinder which blocks to avoid when creating a path.
*/
"blocks_to_avoid"?:Array<BBE>;
/**
*@description Tells the pathfinder whether or not it can jump out of water (like a dolphin).
*/
"can_breach"?:boolean;
/**
*@description Tells the pathfinder that it can path through a closed door and break it.
*/
"can_break_doors"?:boolean;
/**
*@default true
*@description Tells the pathfinder whether or not it can jump up blocks.
*/
"can_jump"?:boolean;
/**
*@description Tells the pathfinder that it can path through a closed door assuming the AI will open the door.
*/
"can_open_doors"?:boolean;
/**
*@description Tells the pathfinder that it can path through a closed iron door assuming the AI will open the door.
*/
"can_open_iron_doors"?:boolean;
/**
*@default true
*@description Whether a path can be created through a door.
*/
"can_pass_doors"?:boolean;
/**
*@description Tells the pathfinder that it can start pathing when in the air.
*/
"can_path_from_air"?:boolean;
/**
*@description Tells the pathfinder whether or not it can travel on the surface of the lava.
*/
"can_path_over_lava"?:boolean;
/**
*@description Tells the pathfinder whether or not it can travel on the surface of the water.
*/
"can_path_over_water"?:boolean;
/**
*@default true
*@description Tells the pathfinder whether or not it will be pulled down by gravity while in water.
*/
"can_sink"?:boolean;
/**
*@description Tells the pathfinder whether or not it can path anywhere through water and plays swimming animation along that path.
*/
"can_swim"?:boolean;
/**
*@default true
*@description Tells the pathfinder whether or not it can walk on the ground outside water.
*/
"can_walk"?:boolean;
/**
*@description Tells the pathfinder whether or not it can travel in lava like walking on ground.
*/
"can_walk_in_lava"?:boolean;
/**
*@description Tells the pathfinder whether or not it can walk on the ground underwater.
*/
"is_amphibious"?:boolean;
};
export type CBE={
/**
*@description Tells the pathfinder to avoid blocks that cause damage when finding a path.
*/
"avoid_damage_blocks"?:boolean;
/**
*@description Tells the pathfinder to avoid portals (like nether portals) when finding a path.
*/
"avoid_portals"?:boolean;
/**
*@description Whether or not the pathfinder should avoid tiles that are exposed to the sun when creating paths.
*/
"avoid_sun"?:boolean;
/**
*@description Tells the pathfinder to avoid water when creating a path.
*/
"avoid_water"?:boolean;
/**
*@description Tells the pathfinder which blocks to avoid when creating a path.
*/
"blocks_to_avoid"?:Array<BBE>;
/**
*@description Tells the pathfinder whether or not it can jump out of water (like a dolphin).
*/
"can_breach"?:boolean;
/**
*@description Tells the pathfinder that it can path through a closed door and break it.
*/
"can_break_doors"?:boolean;
/**
*@default true
*@description Tells the pathfinder whether or not it can jump up blocks.
*/
"can_jump"?:boolean;
/**
*@description Tells the pathfinder that it can path through a closed door assuming the AI will open the door.
*/
"can_open_doors"?:boolean;
/**
*@description Tells the pathfinder that it can path through a closed iron door assuming the AI will open the door.
*/
"can_open_iron_doors"?:boolean;
/**
*@default true
*@description Whether a path can be created through a door.
*/
"can_pass_doors"?:boolean;
/**
*@description Tells the pathfinder that it can start pathing when in the air.
*/
"can_path_from_air"?:boolean;
/**
*@description Tells the pathfinder whether or not it can travel on the surface of the lava.
*/
"can_path_over_lava"?:boolean;
/**
*@description Tells the pathfinder whether or not it can travel on the surface of the water.
*/
"can_path_over_water"?:boolean;
/**
*@default true
*@description Tells the pathfinder whether or not it will be pulled down by gravity while in water.
*/
"can_sink"?:boolean;
/**
*@description Tells the pathfinder whether or not it can path anywhere through water and plays swimming animation along that path.
*/
"can_swim"?:boolean;
/**
*@default true
*@description Tells the pathfinder whether or not it can walk on the ground outside water.
*/
"can_walk"?:boolean;
/**
*@description Tells the pathfinder whether or not it can travel in lava like walking on ground.
*/
"can_walk_in_lava"?:boolean;
/**
*@description Tells the pathfinder whether or not it can walk on the ground underwater.
*/
"is_amphibious"?:boolean;
};
export type CBF={
/**
*@description Tells the pathfinder to avoid blocks that cause damage when finding a path.
*/
"avoid_damage_blocks"?:boolean;
/**
*@description Tells the pathfinder to avoid portals (like nether portals) when finding a path.
*/
"avoid_portals"?:boolean;
/**
*@description Whether or not the pathfinder should avoid tiles that are exposed to the sun when creating paths.
*/
"avoid_sun"?:boolean;
/**
*@description Tells the pathfinder to avoid water when creating a path.
*/
"avoid_water"?:boolean;
/**
*@description Tells the pathfinder which blocks to avoid when creating a path.
*/
"blocks_to_avoid"?:Array<BBE>;
/**
*@description Tells the pathfinder whether or not it can jump out of water (like a dolphin).
*/
"can_breach"?:boolean;
/**
*@description Tells the pathfinder that it can path through a closed door and break it.
*/
"can_break_doors"?:boolean;
/**
*@default true
*@description Tells the pathfinder whether or not it can jump up blocks.
*/
"can_jump"?:boolean;
/**
*@description Tells the pathfinder that it can path through a closed door assuming the AI will open the door.
*/
"can_open_doors"?:boolean;
/**
*@description Tells the pathfinder that it can path through a closed iron door assuming the AI will open the door.
*/
"can_open_iron_doors"?:boolean;
/**
*@default true
*@description Whether a path can be created through a door.
*/
"can_pass_doors"?:boolean;
/**
*@description Tells the pathfinder that it can start pathing when in the air.
*/
"can_path_from_air"?:boolean;
/**
*@description Tells the pathfinder whether or not it can travel on the surface of the lava.
*/
"can_path_over_lava"?:boolean;
/**
*@description Tells the pathfinder whether or not it can travel on the surface of the water.
*/
"can_path_over_water"?:boolean;
/**
*@default true
*@description Tells the pathfinder whether or not it will be pulled down by gravity while in water.
*/
"can_sink"?:boolean;
/**
*@description Tells the pathfinder whether or not it can path anywhere through water and plays swimming animation along that path.
*/
"can_swim"?:boolean;
/**
*@default true
*@description Tells the pathfinder whether or not it can walk on the ground outside water.
*/
"can_walk"?:boolean;
/**
*@description Tells the pathfinder whether or not it can travel in lava like walking on ground.
*/
"can_walk_in_lava"?:boolean;
/**
*@description Tells the pathfinder whether or not it can walk on the ground underwater.
*/
"is_amphibious"?:boolean;
};
export type CBG={
/**
*@description Tells the pathfinder to avoid blocks that cause damage when finding a path.
*/
"avoid_damage_blocks"?:boolean;
/**
*@description Tells the pathfinder to avoid portals (like nether portals) when finding a path.
*/
"avoid_portals"?:boolean;
/**
*@description Whether or not the pathfinder should avoid tiles that are exposed to the sun when creating paths.
*/
"avoid_sun"?:boolean;
/**
*@description Tells the pathfinder to avoid water when creating a path.
*/
"avoid_water"?:boolean;
/**
*@description Tells the pathfinder which blocks to avoid when creating a path.
*/
"blocks_to_avoid"?:Array<BBE>;
/**
*@description Tells the pathfinder whether or not it can jump out of water (like a dolphin).
*/
"can_breach"?:boolean;
/**
*@description Tells the pathfinder that it can path through a closed door and break it.
*/
"can_break_doors"?:boolean;
/**
*@default true
*@description Tells the pathfinder whether or not it can jump up blocks.
*/
"can_jump"?:boolean;
/**
*@description Tells the pathfinder that it can path through a closed door assuming the AI will open the door.
*/
"can_open_doors"?:boolean;
/**
*@description Tells the pathfinder that it can path through a closed iron door assuming the AI will open the door.
*/
"can_open_iron_doors"?:boolean;
/**
*@default true
*@description Whether a path can be created through a door.
*/
"can_pass_doors"?:boolean;
/**
*@description Tells the pathfinder that it can start pathing when in the air.
*/
"can_path_from_air"?:boolean;
/**
*@description Tells the pathfinder whether or not it can travel on the surface of the lava.
*/
"can_path_over_lava"?:boolean;
/**
*@description Tells the pathfinder whether or not it can travel on the surface of the water.
*/
"can_path_over_water"?:boolean;
/**
*@default true
*@description Tells the pathfinder whether or not it will be pulled down by gravity while in water.
*/
"can_sink"?:boolean;
/**
*@description Tells the pathfinder whether or not it can path anywhere through water and plays swimming animation along that path.
*/
"can_swim"?:boolean;
/**
*@default true
*@description Tells the pathfinder whether or not it can walk on the ground outside water.
*/
"can_walk"?:boolean;
/**
*@description Tells the pathfinder whether or not it can travel in lava like walking on ground.
*/
"can_walk_in_lava"?:boolean;
/**
*@description Tells the pathfinder whether or not it can walk on the ground underwater.
*/
"is_amphibious"?:boolean;
};
export type CBH={
/**
*@description Tells the pathfinder to avoid blocks that cause damage when finding a path.
*/
"avoid_damage_blocks"?:boolean;
/**
*@description Tells the pathfinder to avoid portals (like nether portals) when finding a path.
*/
"avoid_portals"?:boolean;
/**
*@description Whether or not the pathfinder should avoid tiles that are exposed to the sun when creating paths.
*/
"avoid_sun"?:boolean;
/**
*@description Tells the pathfinder to avoid water when creating a path.
*/
"avoid_water"?:boolean;
/**
*@description Tells the pathfinder which blocks to avoid when creating a path.
*/
"blocks_to_avoid"?:Array<BBE>;
/**
*@description Tells the pathfinder whether or not it can jump out of water (like a dolphin).
*/
"can_breach"?:boolean;
/**
*@description Tells the pathfinder that it can path through a closed door and break it.
*/
"can_break_doors"?:boolean;
/**
*@default true
*@description Tells the pathfinder whether or not it can jump up blocks.
*/
"can_jump"?:boolean;
/**
*@description Tells the pathfinder that it can path through a closed door assuming the AI will open the door.
*/
"can_open_doors"?:boolean;
/**
*@description Tells the pathfinder that it can path through a closed iron door assuming the AI will open the door.
*/
"can_open_iron_doors"?:boolean;
/**
*@default true
*@description Whether a path can be created through a door.
*/
"can_pass_doors"?:boolean;
/**
*@description Tells the pathfinder that it can start pathing when in the air.
*/
"can_path_from_air"?:boolean;
/**
*@description Tells the pathfinder whether or not it can travel on the surface of the lava.
*/
"can_path_over_lava"?:boolean;
/**
*@description Tells the pathfinder whether or not it can travel on the surface of the water.
*/
"can_path_over_water"?:boolean;
/**
*@default true
*@description Tells the pathfinder whether or not it will be pulled down by gravity while in water.
*/
"can_sink"?:boolean;
/**
*@description Tells the pathfinder whether or not it can path anywhere through water and plays swimming animation along that path.
*/
"can_swim"?:boolean;
/**
*@default true
*@description Tells the pathfinder whether or not it can walk on the ground outside water.
*/
"can_walk"?:boolean;
/**
*@description Tells the pathfinder whether or not it can travel in lava like walking on ground.
*/
"can_walk_in_lava"?:boolean;
/**
*@description Tells the pathfinder whether or not it can walk on the ground underwater.
*/
"is_amphibious"?:boolean;
};
export type CBI={
/**
*@description Tells the pathfinder to avoid blocks that cause damage when finding a path.
*/
"avoid_damage_blocks"?:boolean;
/**
*@description Tells the pathfinder to avoid portals (like nether portals) when finding a path.
*/
"avoid_portals"?:boolean;
/**
*@description Whether or not the pathfinder should avoid tiles that are exposed to the sun when creating paths.
*/
"avoid_sun"?:boolean;
/**
*@description Tells the pathfinder to avoid water when creating a path.
*/
"avoid_water"?:boolean;
/**
*@description Tells the pathfinder which blocks to avoid when creating a path.
*/
"blocks_to_avoid"?:Array<BBE>;
/**
*@description Tells the pathfinder whether or not it can jump out of water (like a dolphin).
*/
"can_breach"?:boolean;
/**
*@description Tells the pathfinder that it can path through a closed door and break it.
*/
"can_break_doors"?:boolean;
/**
*@default true
*@description Tells the pathfinder whether or not it can jump up blocks.
*/
"can_jump"?:boolean;
/**
*@description Tells the pathfinder whether or not it float.
*/
"can_float"?:boolean;
/**
*@description Tells the pathfinder that it can path through a closed door assuming the AI will open the door.
*/
"can_open_doors"?:boolean;
/**
*@description Tells the pathfinder that it can path through a closed iron door assuming the AI will open the door.
*/
"can_open_iron_doors"?:boolean;
/**
*@default true
*@description Whether a path can be created through a door.
*/
"can_pass_doors"?:boolean;
/**
*@description Tells the pathfinder that it can start pathing when in the air.
*/
"can_path_from_air"?:boolean;
/**
*@description Tells the pathfinder whether or not it can travel on the surface of the lava.
*/
"can_path_over_lava"?:boolean;
/**
*@description Tells the pathfinder whether or not it can travel on the surface of the water.
*/
"can_path_over_water"?:boolean;
/**
*@default true
*@description Tells the pathfinder whether or not it will be pulled down by gravity while in water.
*/
"can_sink"?:boolean;
/**
*@description Tells the pathfinder whether or not it can path anywhere through water and plays swimming animation along that path.
*/
"can_swim"?:boolean;
/**
*@default true
*@description Tells the pathfinder whether or not it can walk on the ground outside water.
*/
"can_walk"?:boolean;
/**
*@description Tells the pathfinder whether or not it can travel in lava like walking on ground.
*/
"can_walk_in_lava"?:boolean;
/**
*@description Tells the pathfinder whether or not it can walk on the ground underwater.
*/
"is_amphibious"?:boolean;
};
export type CBJ_rangeXYZ=Array<JsonType>;
export type CBJ={
/**
*@description The data belonging to this npc.
*/
"npc_data"?:{
/**
*@description UNDOCUMENTED.
*/
"portrait_offsets"?:{
/**
*@description UNDOCUMENTED.
*/
"translate"?:CBJ_rangeXYZ;
/**
*@description UNDOCUMENTED.
*/
"scale"?:CBJ_rangeXYZ;
};
/**
*@description UNDOCUMENTED.
*/
"picker_offsets"?:{
/**
*@description UNDOCUMENTED.
*/
"translate"?:CBJ_rangeXYZ;
/**
*@description UNDOCUMENTED.
*/
"scale"?:CBJ_rangeXYZ;
};
/**
*@description UNDOCUMENTED.
*/
"skin_list"?:Array<{
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"variant"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"mark_variant"?:integer;
}>;
};
};
export type CCA=BAA;
export type CCB=BAA;
export type CCC=BAA;
export type CCD=BAA;
export type CCE=BAA;
export type CCF=BAA;
export type CCG=BAA;
export type CCH=BAA;
export type CCI=BAA;
export type CCJ=BAA;
export type CDA=Record<string,never>;
export type CDB={
/**
*@description Event to call when the entity is done peeking.
*/
"on_close"?:BC;
/**
*@description Event to call when the entity starts peeking.
*/
"on_open"?:BC;
/**
*@description Event to call when the entity's target entity starts peeking.
*/
"on_target_open"?:BC;
};
export type CDC=Record<string,never>;
export type CDD={
/**
*@default true
*@description Whether or not the entity collides with things.
*/
"has_collision"?:boolean;
/**
*@default true
*@description Whether or not the entity is affected by gravity.
*/
"has_gravity"?:boolean;
/**
*@default true
*@description Whether or not the entity is pushed to the closest space.
*/
"push_towards_closest_space"?:boolean;
};
export type CDE={
/**
*@description The maximum player saturation value.
*/
"value"?:number;
/**
*@description The maximum player saturation value.
*/
"max"?:number;
};
export type CDF={
/**
*@default true
*@description UNDOCUMENTED.
*/
"value"?:number;
/**
*@default true
*@description UNDOCUMENTED.
*/
"max"?:number;
};
export type CDG={
/**
*@default true
*@description UNDOCUMENTED.
*/
"value"?:number;
/**
*@default true
*@description UNDOCUMENTED.
*/
"max"?:number;
};
export type CDH={
/**
*@default true
*@description UNDOCUMENTED.
*/
"value"?:number;
};
export type CDI={
/**
*@description Cost for non-preferred blocks.
*/
"default_block_cost"?:number;
/**
*@description Added cost for jumping up a node.
*/
"jump_cost"?:integer;
/**
*@default 3
*@description Distance mob can fall without taking damage.
*/
"max_fall_blocks"?:integer;
/**
*@description A list of blocks with their associated cost.
*/
"preferred_path_blocks"?:Array<{
"cost"?:number;
"blocks"?:Array<BBE>;
}>;
};
export type CEA=Array<JsonType>;
export type CEB=string|{
/**
*@pattern ^[a-zA-Z0-9_\-:]+$
*@description The event to fire.
*/
"event"?:string;
/**
*@description The target of the event.
*/
"target"?:string;
[k:string]:any;
};
export type CDJ={
/**
*@description Allows you to choose an anchor point for where the projectile is fired from. 0 = Original point, 1 = EyeHeight, and 2 = Middle or body height.
*/
"anchor"?:integer;
/**
*@description Alters the angle at which a projectile is vertically shot. Many splash potions in the game use this to offset their angles by -20 degrees.
*/
"angle_offset"?:number;
/**
*@description If true, the entity hit will be set on fire.
*/
"catch_fire"?:boolean;
/**
*@description If true, when a projectile deals damage, whether or not to spawn in the critical damage particles.
*/
"crit_particle_on_hurt"?:boolean;
/**
*@description When this projectile deals damage, whether or not to immediately destroy this projectile.
*/
"destroy_on_hurt"?:boolean;
/**
*@description Entity Definitions defined here can't be hurt by the projectile.
*/
"filter"?:string;
/**
*@description If true, whether the projectile causes fire is affected by the mob griefing game rule.
*/
"fire_affected_by_griefing"?:boolean;
/**
*@default 0.05
*@description The gravity applied to this entity when thrown. When this actor is not on the ground, subtracts this amount from the actors change in vertical position every tick. The higher the value, the faster the entity falls.
*/
"gravity"?:number;
/**
*@description The sound that plays when the projectile hits the ground.
*/
"hit_ground_sound"?:BE;
/**
*@description The sound that plays when the projectile hits something.
*/
"hit_sound"?:BE;
/**
*@description If true, the projectile homes in to the nearest entity.
*/
"homing"?:boolean;
/**
*@default 0.99
*@description The fraction of the projectile's speed maintained every frame while traveling in air.
*/
"inertia"?:number;
/**
*@description If true, the projectile will be treated as dangerous to the players.
*/
"is_dangerous"?:boolean;
/**
*@default true
*@description If true, the projectile will knock back the entity it hits.
*/
"knockback"?:boolean;
/**
*@description If true, the entity hit will be struck by lightning.
*/
"lightning"?:boolean;
/**
*@default 0.6
*@description The fraction of the projectile's speed maintained every frame while traveling in water.
*/
"liquid_inertia"?:number;
/**
*@default true
*@description If true, the projectile can hit multiple entities per flight.
*/
"multiple_targets"?:boolean;
/**
*@description SEE on_hit/mob_effect.
*/
"mob_effect"?:JsonType;
/**
*@default [0,0,0]
*@description The offset from the entity's anchor where the projectile will spawn.
*/
"offset"?:CEA;
/**
*@default 5
*@description Time in seconds that the entity hit will be on fire for.
*/
"on_fire_time"?:number;
/**
*@description Defines the behaviors that may execute on a projectile's hit, including impact damage, impact effect, and stuck in ground. See more on these parameters below.
*/
"on_hit"?:{
/**
*@description Determines if the struck object is set on fire.
*/
"catch_fire"?:boolean;
/**
*@description The event that is triggered on a hit. See the table below for all definition event parameters.
*/
"definition_event"?:{
/**
*@description The projectile that will be affected by this event.
*/
"affect_projectile"?:boolean;
/**
*@description The shooter that will be affected by this event.
*/
"affect_shooter"?:boolean;
/**
*@description All entities in the splash area will be affected by this event.
*/
"affect_splash_area"?:boolean;
/**
*@description The target will be affected by this event.
*/
"affect_target"?:boolean;
/**
*@description The event triggered. Also has an option filters parameter to limit affected targets.
*/
"event_trigger"?:CEB;
/**
*@description The splash area that will be affected.
*/
"splash_area"?:number;
};
/**
*@description If the target is on fire, then douse hte fire.
*/
"douse_fire"?:boolean;
/**
*@description An area of entities that is frozen to block on hits. Has shape of either sphere or cube, snap_to_block boolean ,and size decimal properties.
*/
"freeze_on_hit"?:{
/**
*@default "sphere"
*@description The shape of the area that is frozen.
*/
"shape"?:JsonType;
/**
*@description If true, the area will snap to the nearest block.
*/
"snap_to_block"?:boolean;
/**
*@description The size of the area that is frozen.
*/
"size"?:number;
};
/**
*@description Grants XP on hit. Has minXP for minimum XP granted, maxXp for maximum, or simply flat xp properties.
*/
"grant_xp"?:{
/**
*@description The minimum XP granted.
*/
"minXP"?:number;
/**
*@description The maximum XP granted.
*/
"maxXP"?:number;
};
/**
*@description Determines if the owner of the entity is hurt on hit. Contains decimal owner_damage, knockback boolean, and ignite boolean.
*/
"hurt_owner"?:{
/**
*@description The amount of damage the owner will take.
*/
"owner_damage"?:number;
/**
*@description If true, the owner will be knocked back.
*/
"knockback"?:boolean;
/**
*@description If true, the owner will be set on fire.
*/
"ignite"?:boolean;
};
/**
*@description Determines if a fire may be started on a flammable target.
*/
"ignite"?:boolean;
/**
*@description Defines the damage that an entity may receive on being hit by this projectile. See the table below for all impact_damage parameters.
*/
"impact_damage"?:{
/**
*@description Determines if the struck object is set on fire.
*/
"catch_fire"?:boolean;
/**
*@default true
*@description Whether lightning can be channeled through hte weapon.
*/
"channeling"?:boolean;
/**
*@default 1
*@description The damage dealt on impact.
*/
"damage"?:number;
/**
*@description Projectile is removed on hit.
*/
"destroy_on_hit"?:boolean;
/**
*@default true
*@description If true, then the hit must cause damage to destroy the projectile.
*/
"destroy_on_hit_requires_damage"?:boolean;
/**
*@default "not set"
*@description The identifier of an entity that can be hit.
*/
"filter"?:string;
/**
*@default true
*@description If true, the projectile will knock back the entity it hits.
*/
"knockback"?:boolean;
/**
*@description Maximum critical damage.
*/
"max_critical_damage"?:integer;
/**
*@description Minimum critical damage.
*/
"min_critical_damage"?:integer;
/**
*@default 2
*@description How much the base damage is multiplied.
*/
"power_multiplier"?:number;
/**
*@description If true, damage will be randomized based on damage and speed.
*/
"semi_random_diff_damage"?:boolean;
/**
*@description If true, then the hit must cause damage to update the last hurt property.
*/
"set_last_hurt_requires_damage"?:boolean;
};
/**
*@description The target receives a mob effect. See the table below for all mob_effect parameters.
*/
"mob_effect"?:{
/**
*@description If true, a mob will spawn that is not hostile, like the bat entity in Minecraft.
*/
"ambient"?:boolean;
/**
*@default 1
*@description The multiplier of the amplification of this effect.
*/
"amplifier"?:integer;
/**
*@default 1
*@description The effect's duration.
*/
"duration"?:integer;
/**
*@description The effect's duration on easy mode.
*/
"durationeasy"?:integer;
/**
*@default 800
*@description The effect's duration on hard mode.
*/
"durationhard"?:integer;
/**
*@default 200
*@description The effect's duration on normal mode.
*/
"durationnormal"?:integer;
/**
*@default "not set"
*@description The identifier of the mob entity to affect.
*/
"effect"?:string;
/**
*@description Does the entity's look change.
*/
"visible"?:boolean;
};
/**
*@description The amount of time a target will remain on fire.
*/
"on_fire_time"?:number;
/**
*@description The particles that spawn on hit. See the table below for all particle_on_hit parameters.
*/
"particle_on_hit"?:{
/**
*@default 6
*@description The number of particles to spawn.
*/
"num_particles"?:number;
/**
*@description If true, spawns particles on an entity hit.
*/
"on_entity_hit"?:boolean;
/**
*@description If true, spawns particles on any other hit.
*/
"on_other_hit"?:boolean;
/**
*@default "not set"
*@description The id of the particle to spawn on hit.
*/
"particle_type"?:string;
};
/**
*@default -1
*@description Defines the effect the arrow will apply to the entity it hits.
*/
"potion_effect"?:integer;
/**
*@description Removes the projectile.
*/
"remove_on_hit"?:{
[k:string]:JsonType;
};
/**
*@description Potion spawns an area of effect cloud. See the table below for all spawn_aoe_cloud parameters.
*/
"spawn_aoe_cloud"?:{
/**
*@default true
*@description Determines if the projectile shooter is affected.
*/
"affect_owner"?:boolean;
/**
*@description Particle color defined by three rgb values.
*/
"color"?:CEA;
/**
*@description How long the particle emits.
*/
"duration"?:integer;
/**
*@description The particle emitter.
*/
"particle"?:integer;
/**
*@default -1
*@description The id of the potion.
*/
"potion"?:integer;
/**
*@description Defines the affected area.
*/
"radius"?:number;
/**
*@default -1
*@description Defines the affected area when potion is used.
*/
"radius_on_use"?:number;
/**
*@description Delay before the potion can affect the area again.
*/
"reapplication_delay"?:integer;
};
/**
*@description Contains information on the chance of spawning an entity on hit. See parameters below.
*/
"spawn_chance"?:{
/**
*@description The amount of new entities spawned.
*/
"first_spawn_count"?:integer;
/**
*@description The chance that a spawn occurs when a projectile hits the entity.
*/
"first_spawn_percent_chance"?:number;
/**
*@default 8
*@description The chance that a first spawn occurs when a projectile hits the entity.
*/
"first_spawn_chance"?:number;
/**
*@default 32
*@description The chance that a second spawn occurs when a projectile hits the entity.
*/
"second_spawn_chance"?:number;
/**
*@description The amount of new entities spawned in teh second spawn.
*/
"second_spawn_count"?:integer;
/**
*@description Determines if a baby spawns.
*/
"spawn_baby"?:boolean;
/**
*@default "not set"
*@description The entity that will spawn.
*/
"spawn_definition"?:string;
};
/**
*@description Decides if the object sticks in ground and contains shake_time integer parameter to determine how long it will shake.
*/
"stick_in_ground"?:{
[k:string]:any;
};
/**
*@description Determines if the owner is transported on hit.
*/
"teleport_owner"?:boolean;
/**
*@description Creates a splash area for effects caused by a thrown potion.
*/
"thrown_potion_effect"?:{
[k:string]:any;
};
};
/**
*@default "iconcrack"
*@description Particle to use upon collision.
*/
"particle"?:string;
/**
*@default -1
*@description Defines the effect the arrow will apply to the entity it hits.
*/
"potion_effect"?:integer;
/**
*@default 1.3
*@description Determines the velocity of the projectile.
*/
"power"?:number;
/**
*@description If true, this entity will be reflected back when hit.
*/
"reflect_on_hurt"?:boolean;
/**
*@description If true, damage will be randomized based on damage and speed.
*/
"semi_random_diff_damage"?:boolean;
/**
*@description The sound that plays when the projectile is shot.
*/
"shoot_sound"?:BE;
/**
*@default true
*@description If true, the projectile will be shot towards the target of the entity firing it.
*/
"shoot_target"?:boolean;
/**
*@description If true, the projectile will bounce upon hit.
*/
"should_bounce"?:boolean;
/**
*@description If true, the projectile will be treated like a splash potion.
*/
"splash_potion"?:boolean;
/**
*@default 4
*@description Radius in blocks of the 'splash' effect.
*/
"splash_range"?:number;
/**
*@description Determines if the projectile stops when the target is hurt.
*/
"stop_on_hurt"?:boolean;
/**
*@description The base accuracy. Accuracy is determined by the formula uncertaintyBase - difficultyLevel * uncertaintyMultiplier.
*/
"uncertainty_base"?:number;
/**
*@description Determines how much difficulty affects accuracy. Accuracy is determined by the formula uncertaintyBase - difficultyLevel * uncertaintyMultiplier.
*/
"uncertainty_multiplier"?:number;
};
export type CEC={
/**
*@description The value of the entity's push-through, in blocks.
*/
"value"?:number;
};
export type CED={
/**
*@default true
*@description Whether the entity can be pushed by other entities.
*/
"is_pushable"?:boolean;
/**
*@default true
*@description Whether the entity can be pushed by pistons safely.
*/
"is_pushable_by_piston"?:boolean;
};
export type CEE={
/**
*@description Event to run we attempt to trigger a raid on the village.
*/
"triggered_event"?:CEB;
};
export type CEF={
/**
*@default 0.4
*@description Maximum speed that this entity will move at when on the rail.
*/
"max_speed"?:number;
};
export type CEG={
/**
*@description If true, on tick this entity will trigger its on_deactivate behavior.
*/
"check_block_types"?:boolean;
/**
*@default true
*@description If true, this entity will eject all of its riders when it passes over an activated rail.
*/
"eject_on_activate"?:boolean;
/**
*@description If true, this entity will eject all of its riders when it passes over a deactivated rail.
*/
"eject_on_deactivate"?:boolean;
/**
*@description Event to call when the rail is activated.
*/
"on_activate"?:BC;
/**
*@description Event to call when the rail is deactivated.
*/
"on_deactivate"?:BC;
/**
*@default true
*@description If true, command blocks will start ticking when passing over an activated rail.
*/
"tick_command_block_on_activate"?:boolean;
/**
*@description If false, command blocks will stop ticking when passing over a deactivated rail.
*/
"tick_command_block_on_deactivate"?:boolean;
};
export type CEH={
/**
*@default 3
*@description The strength with which blocking entities should be knocked back.
*/
"knockback_strength"?:number;
/**
*@description A list of weighted responses to the melee attack being blocked.
*/
"reaction_choices"?:Array<{
/**
*@description The chance of this reaction being picked.
*/
"weight"?:integer;
/**
*@description An event that runs when this reaction is picked.
*/
"value"?:CEB;
}>;
};
export type CEI_seats_spec={
/**
*@default 181
*@description Angle in degrees that a rider is allowed to rotate while riding this entity. Omit this property for no limit
*/
"lock_rider_rotation"?:number;
/**
*@description Defines the maximum number of riders that can be riding this entity for this seat to be valid.
*/
"max_rider_count"?:integer;
/**
*@description Defines the minimum number of riders that need to be riding this entity before this seat can be used.
*/
"min_rider_count"?:integer;
/**
*@default [0,0,0]
*@description Position of this seat relative to this entity's position.
*/
"position"?:CEA;
/**
*@description Offset to rotate riders by.
*/
"rotate_rider_by"?:E;
};
export type CEI={
/**
*@description The seat that designates the driver of the entity.
*/
"controlling_seat"?:integer;
/**
*@default true
*@description If true, this entity can't be interacted with if the entity interacting with it is crouching.
*/
"crouching_skip_interact"?:boolean;
/**
*@description List of entities that can ride this entity.
*/
"family_types"?:Array<string>;
/**
*@description The text to display when the player can interact with the entity when playing with Touch-screen controls.
*/
"interact_text"?:string;
/**
*@description If true, this entity will pull in entities that are in the correct family_types into any available seats.
*/
"pull_in_entities"?:boolean;
/**
*@description If true, this entity will be picked when looked at by the rider.
*/
"rider_can_interact"?:boolean;
/**
*@default 1
*@description The number of entities that can ride this entity at the same time.
*/
"seat_count"?:integer;
/**
*@description The list of positions and number of riders for each position for entities riding this entity.
*/
"seats"?:CEI_seats_spec|Array<CEI_seats_spec>;
};
export type CEJ={
/**
*@default 1
*@description Ending scale of the entity when it's fully grown.
*/
"end_scale"?:number;
/**
*@default 1
*@description Initial scale of the newborn entity.
*/
"start_scale"?:number;
};
export type CFA={
/**
*@description The value of the scale. 1.0 means the entity will appear at the scale they are defined in their model. Higher numbers make the entity bigger
*/
"value"?:number;
};
export type CFB={
/**
*@description The minimum the scheduler will be delayed.
*@minimum 0
*/
"min_delay_secs"?:number;
/**
*@description The maximum the scheduler will be delayed.
*@minimum 0
*/
"max_delay_secs"?:number;
/**
*@description The list of triggers that fire when the conditions match the given filter criteria. If any filter criteria overlap the first defined event will be picked.
*/
"scheduled_events"?:Array<{
"filters"?:BG;
"event"?:CEB;
}>;
};
export type CFC={
/**
*@description A bucket for all other items in the game. Note this category is always least priority items.
*/
"all_items"?:boolean;
/**
*@default -1
*@description Maximum number of this item the mob will hold.
*/
"all_items_max_amount"?:integer;
/**
*@default -1
*@description Number of this item considered extra that the entity wants to share.
*/
"all_items_surplus_amount"?:integer;
/**
*@default -1
*@description Number of this item this entity wants to share.
*/
"all_items_want_amount"?:integer;
/**
*@description List of items that the entity wants to share.
*/
"items"?:Array<{
/**
*@description Mob will admire the item after picking up by looking at it. For this to happen the mob needs to have an Admire component and an Admire goal.
*/
"admire"?:boolean;
/**
*@description Mob will barter for the item after picking it up. For this to work the mob needs to have a Barter component and a Barter goal.
*/
"barter"?:boolean;
/**
*@description Determines whether the mob will consume the item or not.
*/
"consume_item"?:boolean;
/**
*@description Defines the item this entity wants to craft with the item defined above. Should be an item name.
*/
"craft_into"?:string;
/**
*@description The name of the item.
*/
"item"?:BA;
/**
*@description Aux value for the item.
*/
"item_aux"?:integer;
/**
*@description Maximum number of this item the mob will hold.
*/
"max_amount"?:integer;
/**
*@description Maximum number of this item the mob will pick up during a single goal tick.
*/
"pickup_limit"?:integer;
/**
*@description Prioritizes which items the entity prefers. 0 is the highest priority.
*/
"priority"?:integer;
/**
*@description Determines whether the mob will try to put the item in its inventory if it has the inventory component and if it can't be equipped.
*/
"stored_in_inventory"?:boolean;
/**
*@description Number of this item considered extra that the entity wants to share.
*/
"surplus_amount"?:integer;
/**
*@description Number of this item this entity wants to have.
*/
"want_amount"?:integer;
/**
*@description Determines whether the mob can only pickup the item and not drop it.
*/
"pickup_only"?:boolean;
}>;
};
export type CFD={
/**
*@default -1
*@description ID of the Potion effect to be applied on hit.
*/
"aux_val"?:integer;
/**
*@example
*```json
*"minecraft:arrow"
*```
*@example
*```json
*"minecraft:small_fireball"
*```
*@example
*```json
*"minecraft:thrown_trident"
*```
*@description Actor definition to use as projectile for the ranged attack. The actor definition must have the projectile component to be able to be shot as a projectile
*/
"def"?:string;
/**
*@example
*```json
*"dragonfireball"
*```
*@description UNDOCUMENTED.
*/
"type"?:string;
};
export type CFE={
/**
*@description Event to run when the entity enters the `sit` state.
*/
"sit_event"?:BC;
/**
*@description Event to run when the entity exits the `sit` state.
*/
"stand_event"?:BC;
};
export type CFF={
/**
*@description The ID of the skin. By convention, 0 is the ID of the base skin
*/
"value"?:integer;
};
export type CFG={
/**
*@default 1
*@description The value of the volume the entity uses for sound effects.
*/
"value"?:number;
};
export type CFH_entity_spawn={
/**
*@description If present, the specified entity will only spawn if the filter evaluates to true.
*/
"filters"?:BG;
/**
*@default 600
*@description Maximum amount of time to randomly wait in seconds before another entity is spawned.
*/
"max_wait_time"?:integer;
/**
*@default 300
*@description Minimum amount of time to randomly wait in seconds before another entity is spawned.
*/
"min_wait_time"?:integer;
/**
*@default 1
*@description The number of entities of this type to spawn each time that this triggers.
*/
"num_to_spawn"?:integer;
/**
*@description If true, this the spawned entity will be leashed to the parent.
*/
"should_leash"?:boolean;
/**
*@description If true, this component will only ever spawn the specified entity once.
*/
"single_use"?:boolean;
/**
*@description Identifier of the entity to spawn, leave empty to spawn the item defined above instead.
*/
"spawn_entity"?:string;
/**
*@default "minecraft:entity_born"
*@description Event to call when the entity is spawned.
*/
"spawn_event"?:string;
/**
*@default "egg"
*@description Item identifier of the item to spawn.
*/
"spawn_item"?:J;
/**
*@default "born"
*@description Method to use to spawn the entity.
*/
"spawn_method"?:string;
/**
*@default "plop"
*@description Identifier of the sound effect to play when the entity is spawned.
*/
"spawn_sound"?:BE;
};
export type CFH={
/**
*@description The entities to spawn.
*/
"entities"?:CFH_entity_spawn|Array<CFH_entity_spawn>;
};
export type CFI={
/**
*@description List of effects to add to this entity after adding this component.
*/
"add_effects"?:Array<string|{
/**
*@description The level of the effect, same as used in the /effect command (0 for level I, 1 for level II, etc). Defaults to 0. NOTE: Values can be negative but its not an intentional feature
*@minimum 0
*/
"amplifier"?:integer;
/**
*@description Boolean value that should cause the particles emitted by the entity to be partially transparent. This does not work properly, resulting in this property having no effect. Defaults to false.
*/
"ambient"?:boolean;
/**
*@description The amount of time in seconds the effect should last. This allows for fractional numbers. For example, instant effects should be set to 0.05 seconds (one tick).
*@minimum 0
*/
"duration"?:number;
/**
*@description Boolean value. When set to true, applying this effect displays an animated graphic on-screen similar to the totem of undying effect. Obviously, this only works for players. Defaults to false.
*/
"display_on_screen_animation"?:boolean;
/**
*@description The string identifier of the status effect to add. These are the same as used in the /effect command.
*/
"effect"?:string;
/**
*@description Boolean value. When set to true, the effect will be visible to the player. Defaults to true.
*/
"visible"?:boolean;
}>;
/**
*@description List of identifiers of effects to be removed from this entity after adding this component.
*/
"remove_effects"?:Array<string>|string;
};
export type CFJ={
/**
*@default 5
*@description The maximum strength of this entity.
*/
"max"?:integer;
/**
*@default 1
*@description The initial value of the strength.
*/
"value"?:integer;
};
export type CGA=Record<string,never>;
export type CGB={
/**
*@default 1
*@description The chance of taming the entity with each item use between 0.0 and 1.0, where 1.0 is 100%
*@minimum 0
*@maximum 1
*/
"probability"?:number;
/**
*@description Event to run when this entity becomes tamed.
*/
"tame_event"?:BC;
/**
*@description The list of items that can be used to tame this entity.
*/
"tame_items"?:Array<BA>|BA;
};
export type CGC_feed_items={
/**
*@description Name of the item this entity likes and can be used to increase this entity's temper.
*/
"item"?:J;
/**
*@description The amount of temper this entity gains when fed this item.
*/
"temper_mod"?:number;
[k:string]:any;
};
export type CGC_auto_reject_items={
/**
*@description Name of the item this entity dislikes and will cause it to get angry if used while untamed.
*/
"item"?:J;
[k:string]:any;
};
export type CGC={
/**
*@default 5
*@description The amount the entity's temper will increase when mounted.
*/
"attempt_temper_mod"?:integer;
/**
*@description The list of items that, if carried while interacting with the entity, will anger it.
*/
"auto_reject_items"?:CGC_auto_reject_items|Array<CGC_auto_reject_items>;
/**
*@description The text that shows in the feeding interact button.
*/
"feed_text"?:string;
/**
*@description The list of items that can be used to increase the entity's temper and speed up the taming process.
*/
"feed_items"?:CGC_feed_items|Array<CGC_feed_items>;
/**
*@default 100
*@description The maximum value for the entity's random starting temper.
*/
"max_temper"?:integer;
/**
*@description The minimum value for the entity's random starting temper.
*/
"min_temper"?:integer;
/**
*@description The text that shows in the riding interact button.
*/
"ride_text"?:string;
/**
*@description Event that triggers when the entity becomes tamed.
*/
"tame_event"?:BC;
};
export type CGD={
/**
*@description Whether the other entity needs to be visible to trigger `inside` events.
*/
"must_see"?:boolean;
/**
*@default 1
*@description Maximum distance in blocks that another entity will be considered in the `inside` range.
*/
"inside_range"?:number;
/**
*@description Event to call when an entity gets in the inside range. Can specify `event` for the name of the event and `target` for the target of the event
*/
"on_inside_range"?:BC;
/**
*@description Event to call when an entity gets in the outside range. Can specify `event` for the name of the event and `target` for the target of the event
*/
"on_outside_range"?:BC;
/**
*@description Event to call when an entity exits visual range. Can specify `event` for the name of the event and `target` for the target of the event
*/
"on_vision_lost_inside_range"?:BC;
/**
*@default 5
*@description Maximum distance in blocks that another entity will be considered in the `outside` range.
*/
"outside_range"?:number;
};
export type CGE={
/**
*@default 0.01
*@description Modifies the chance that the entity will teleport if the entity is in darkness.
*/
"dark_teleport_chance"?:number;
/**
*@default 0.01
*@description Modifies the chance that the entity will teleport if the entity is in daylight.
*/
"light_teleport_chance"?:number;
/**
*@default 20
*@description Maximum amount of time in seconds between random teleports.
*/
"max_random_teleport_time"?:number;
/**
*@description Minimum amount of time in seconds between random teleports.
*/
"min_random_teleport_time"?:number;
/**
*@default [32,16,32]
*@description Entity will teleport to a random position within the area defined by this cube.
*/
"random_teleport_cube"?:Array<JsonType>;
/**
*@default true
*@description If true, the entity will teleport randomly.
*/
"random_teleports"?:boolean;
/**
*@default 16
*@description Maximum distance the entity will teleport when chasing a target.
*/
"target_distance"?:number;
/**
*@default 1
*@description The chance that the entity will teleport between 0.0 and 1.0. 1.0 means 100%
*/
"target_teleport_chance"?:number;
};
export type CGF={
/**
*@default 128
*@description The distance at which the closest player has to be before this entity despawns. This option will be ignored if never_despawn is true. Min: 128 blocks.
*@minimum 128
*/
"distance_to_players"?:number;
/**
*@default true
*@description If true, this entity will not despawn even if players are far away. If false, distance_to_players will be used to determine when to despawn.
*/
"never_despawn"?:boolean;
/**
*@default 2
*@description The area around the entity to tick. Default: 2. Allowed range: 2-6.
*@minimum 2
*@maximum 6
*/
"radius"?:integer;
};
export type CGG={
/**
*@default true
*@description If true, the timer will restart every time after it fires.
*/
"looping"?:boolean;
/**
*@default true
*@description If true, the amount of time on the timer will be random between the Minimum and Maximum values specified in time.
*/
"randomInterval"?:boolean;
/**
*@example
*```json
*1
*```
*@example
*```json
*[
*  1,
*  5
*]
*```
*@description Amount of time in seconds for the timer. Can be specified as a number or a pair of numbers (Minimum and max). Incompatible with random_time_choices.
*/
"time"?:Array<JsonType>|number;
/**
*@description Event to fire when the time on the timer runs out.
*/
"time_down_event"?:BC;
/**
*@default []
*@description This is a list of objects, representing one value in seconds that can be picked before firing the event and an optional weight. Incompatible with time.
*/
"random_time_choices"?:Array<{
/**
*@description The weight on how likely this section is to trigger.
*/
"weight"?:integer;
/**
*@description The value in seconds that would be used if this section was picked.
*/
"value"?:integer;
}>;
};
export type CGH=Record<string,never>;
export type CGI={
/**
*@description Determines when the mob transforms, if the trades should be converted when the new mob has a economy_trade_table. When the trades are converted, the mob will generate a new trade list with their new trade table, but then it will try to convert any of the same trades over to have the same enchantments and user data. For example, if the original has a Emerald to Enchanted Iron Sword (Sharpness 1), and the new trade also has an Emerald for Enchanted Iron Sword, then the enchantment will be Sharpness 1.
*/
"convert_trades_economy"?:boolean;
/**
*@description Name to be displayed while trading with this entity.
*/
"display_name"?:string;
/**
*@description Used to determine if trading with entity opens the new trade screen.
*/
"new_screen"?:boolean;
/**
*@description Determines if the trades should persist when the mob transforms. This makes it so that the next time the mob is transformed to something with a trade_table or economy_trade_table, then it keeps their trades.
*/
"persist_trades"?:boolean;
/**
*@description File path relative to the resource pack root for this entity's trades.
*/
"table"?:string;
};
export type CGJ={
/**
*@default "air"
*@description The type of block you wish to be spawned by the entity as it move about the world. Solid blocks may not be spawned at an offset of ().
*/
"block_type"?:string;
/**
*@description One or more conditions that must be met in order to cause the chosen block type to spawn.
*/
"spawn_filter"?:BG;
/**
*@default [0,0,0]
*@description The distance from the entities current position to spawn the block. Capped at up to 16 blocks away. The X value is left/right(-/+), the Z value is backward/forward(-/+), the Y value is below/above(-/+).
*/
"spawn_offset"?:Array<JsonType>;
};
export type CHA={
/**
*@description List of components to add to the entity after the transformation.
*/
"add"?:{
/**
*@description Names of component groups to add.
*/
"component_groups"?:Array<string>;
};
/**
*@description Sound to play when the transformation starts.
*/
"begin_transform_sound"?:BE;
/**
*@description Defines the properties of the delay for the transformation.
*/
"delay"?:number|{
/**
*@description Chance that the entity will look for nearby blocks that can speed up the transformation. Value must be between 0.0 and 1.0
*/
"block_assist_chance"?:number;
/**
*@description Chance that, once a block is found, will help speed up the transformation.
*/
"block_chance"?:number;
/**
*@description Maximum number of blocks the entity will look for to aid in the transformation. If not defined or set to 0, it will be set to the block radius
*/
"block_max"?:integer;
/**
*@description Distance in Blocks that the entity will search for blocks that can help the transformation.
*/
"block_radius"?:integer;
/**
*@description List of blocks that can help the transformation of this entity.
*/
"block_types"?:Array<BAI>;
/**
*@description Time in seconds before the entity transforms.
*/
"value"?:number;
[k:string]:any;
};
/**
*@description Cause the entity to drop all equipment upon transformation.
*/
"drop_equipment"?:boolean;
/**
*@description Cause the entity to drop all items in inventory upon transformation.
*/
"drop_inventory"?:boolean;
/**
*@description Entity Definition that this entity will transform into.
*/
"into"?:string;
/**
*@description If this entity has trades and has leveled up, it should maintain that level after transformation.
*/
"keep_level"?:boolean;
/**
*@description If this entity is owned by another entity, it should remain owned after transformation.
*/
"keep_owner"?:boolean;
/**
*@description Cause the entity to keep equipment after going through transformation.
*/
"preserve_equipment"?:boolean;
/**
*@description Sound to play when the entity is done transforming.
*/
"transformation_sound"?:BE;
};
export type CHB=Record<string,never>;
export type CHC={
/**
*@default 1
*@description The chance of the entity trusting with each item use between 0.0 and 1.0, where 1.0 is 100%
*/
"probability"?:number;
/**
*@description Event to run when this entity becomes trusting.
*/
"trust_event"?:BC;
/**
*@description The list of items that can be used to get the entity to trust players.
*/
"trust_items"?:Array<BA>;
};
export type CHD={
/**
*@description List of family names.
*/
"family":Array<string>;
};
export type CHE={
/**
*@description UNDOCUMENTED.
*/
"value"?:number;
};
export type CHF={
/**
*@default 0.5625
*@description The maximum auto step height when on any other block.
*/
"base_value"?:number;
/**
*@default 0.5625
*@description The maximum auto step height when on a block that prevents jumping.
*/
"jump_prevented_value"?:number;
};
export type CHG={
/**
*@description The ID of the variant. By convention, 0 is the ID of the base entity
*/
"value":integer;
};
export type CHH=Record<string,never>;
export type CHI=Record<string,never>;
export type CHJ={
/**
*@default 1
*@description The higher the number, the faster the animation for walking plays. A value of 1.0 means normal speed, while 2.0 means twice as fast
*/
"value"?:number;
};
export type CIA=Record<string,never>;
export type CIB={
/**
*@default 0.8
*@description Drag factor to determine movement speed when in water.
*/
"drag_factor"?:number;
};
export type CID=integer;
export type CIC={
"priority"?:CID;
/**
*@description The sound event to play when admiring the item.
*/
"admire_item_sound"?:BE;
/**
*@description The event to run when admiring the item.
*/
"on_admire_item_start"?:CEB;
/**
*@description The event to run when no longer admiring the item.
*/
"on_admire_item_stop"?:CEB;
/**
*@description The range of time in seconds to randomly wait before playing the sound again.
*/
"sound_interval"?:Array<JsonType>|number|{
"range_min"?:number;
"range_max"?:number;
};
};
export type CIE={
"priority"?:CID;
/**
*@default 1
*@description Should start tick interval.
*/
"tick_interval"?:integer;
/**
*@description Maximum distance to look for a block in xz.
*/
"search_range"?:integer;
/**
*@description Maximum distance to look for a block in y.
*/
"search_height"?:integer;
/**
*@default 1
*@description Modifier for sprint speed. 1.0 means keep the regular speed, while higher numbers make the sprint speed faster.
*/
"sprint_speed_modifier"?:number;
/**
*@default "nearest"
*@description Block search method.
*/
"target_selection_method"?:string;
/**
*@description List of block types this mob avoids.
*/
"target_blocks"?:Array<J>;
/**
*@description The sound event to play when the mob is avoiding a block.
*/
"avoid_block_sound"?:BE;
/**
*@default 1
*@description Modifier for walking speed. 1.0 means keep the regular speed, while higher numbers make the walking speed faster.
*/
"walk_speed_modifier"?:number;
/**
*@description Escape trigger.
*/
"on_escape"?:Array<CEB>;
/**
*@description The range of time in seconds to randomly wait before playing the sound again.
*/
"sound_interval"?:Array<JsonType>|number|{
"range_min"?:number;
"range_max"?:number;
};
};
export type CIG_entity_definition={
"filters"?:BG;
/**
*@default 16
*@description Maximum distance this mob can be away to be a valid choice.
*/
"max_dist"?:number;
/**
*@description UNDOCUMENTED.
*/
"max_height"?:number;
/**
*@description UNDOCUMENTED.
*/
"max_flee"?:number;
/**
*@description UNDOCUMENTED.
*/
"priority"?:number;
/**
*@description UNDOCUMENTED.
*/
"check_if_outnumbered"?:number;
/**
*@description If true, the mob has to be visible to be a valid choice.
*/
"must_see"?:boolean;
/**
*@default 3
*@description Determines the amount of time in seconds that this mob will look for a target before forgetting about it and looking for a new one when the target isn't visible any more.
*/
"must_see_forget_duration"?:number;
/**
*@description If true, the mob will stop being targeted if it stops meeting any conditions.
*/
"reevaluate_description"?:boolean;
/**
*@default 16
*@description Multiplier for the running speed. A value of 1.0 means the speed is unchanged
*/
"sprint_speed_multiplier"?:number;
/**
*@default 16
*@description Multiplier for the walking speed. A value of 1.0 means the speed is unchanged
*/
"walk_speed_multiplier"?:number;
};
export type CIG=Array<CIG_entity_definition>|CIG_entity_definition;
export type CIF={
"priority"?:CID;
/**
*@description The sound event to play when the mob is avoiding another mob.
*/
"avoid_mob_sound"?:BE;
/**
*@default 16
*@description The next target position the entity chooses to avoid another entity will be chosen within this XZ Distance.
*/
"avoid_target_xz"?:integer;
/**
*@default 7
*@description The next target position the entity chooses to avoid another entity will be chosen within this Y Distance.
*/
"avoid_target_y"?:integer;
/**
*@description Whether or not to ignore direct line of sight while this entity is running away from other specified entities.
*/
"ignore_visibilty"?:boolean;
/**
*@default 3
*@description Maximum distance to look for an avoid target for the entity.
*/
"max_dist"?:number;
/**
*@default 10
*@description How many blocks away from its avoid target the entity must be for it to stop fleeing from the avoid target.
*/
"max_flee"?:number;
/**
*@default 1
*@description Percent chance this entity will stop avoiding another entity based on that entity's strength, where 1.0 = 100%.
*/
"probability_per_strength"?:number;
/**
*@description Determine if we should remove target when fleeing or not.
*/
"remove_target"?:boolean;
/**
*@default 7
*@description How many blocks within range of its avoid target the entity must be for it to begin sprinting away from the avoid target.
*/
"sprint_distance"?:number;
/**
*@default 1
*@description Multiplier for sprint speed. 1.0 means keep the regular speed, while higher numbers make the sprint speed faster.
*/
"sprint_speed_multiplier"?:number;
/**
*@default 1
*@description Multiplier for walking speed. 1.0 means keep the regular speed, while higher numbers make the walking speed faster.
*/
"walk_speed_multiplier"?:number;
/**
*@description If true, visbility between this entity and the mob type will not be checked.
*/
"ignore_visibility"?:boolean;
/**
*@description The list of conditions another entity must meet to be a valid target to avoid.
*/
"entity_types"?:CIG;
/**
*@description Event that is triggered when escaping from a mob.
*/
"on_escape_event"?:CEB;
/**
*@default [3,8]
*@description The range of time in seconds to randomly wait before playing the sound again.
*/
"sound_interval"?:Array<JsonType>|number|{
"range_min"?:number;
"range_max"?:number;
};
};
export type CIH={
"priority"?:CID;
};
export type CII={
"priority"?:CID;
/**
*@description List of items that this mob likes.
*/
"items"?:Array<J>;
/**
*@default 8
*@description Distance in blocks the mob will beg from.
*/
"look_distance"?:number;
/**
*@default [2,4]
*@description The range of time in seconds this mob will stare at the player holding a food they like, begging for it.
*/
"look_time"?:BAD;
};
export type CJA=number;
export type CIJ={
"priority"?:CID;
"speed_multiplier"?:CJA;
};
export type CJB={
"priority"?:CID;
"speed_multiplier"?:CJA;
};
export type CJC={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@default [10,20]
*@description Minimum and maximum time between firework (positive, in seconds).
*/
"fireworks_interval"?:BAD;
/**
*@default 30
*@description The duration in seconds that the celebration lasts for.
*/
"duration"?:number;
/**
*@description The event to trigger when the goal's duration expires.
*/
"on_celebration_end_event"?:CEB;
};
export type CJD={
"priority"?:CID;
/**
*@description The sound event to trigger during the celebration.
*/
"celebration_sound"?:BE;
/**
*@default 30
*@description The duration in seconds that the celebration lasts for.
*/
"duration"?:number;
/**
*@default [1,3.5]
*@description Minimum and maximum time between jumping (positive, in seconds).
*/
"jump_interval"?:Array<JsonType>|number|{
"range_min"?:number;
"range_max"?:number;
};
/**
*@description The event to trigger when the goal's duration expires.
*/
"on_celebration_end_event"?:BAA;
/**
*@default [2,7]
*@description Minimum and maximum time between sound events (positive, in seconds).
*/
"sound_interval"?:BAD;
};
export type CJE={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@default 3
*@description A charge attack cannot start if the entity is farther than this distance to the target.
*/
"max_distance"?:number;
/**
*@default 2
*@description A charge attack cannot start if the entity is closer than this distance to the target.
*/
"min_distance"?:number;
/**
*@default 0.1428
*@description Percent chance this entity will start a charge attack, if not already attacking (1.0 = 100%)
*/
"success_rate"?:number;
};
export type CJF={
"priority"?:CID;
/**
*@description The list of items that can be used to charge the held item. This list is required and must have at least one item in it.
*/
"items"?:Array<J>;
};
export type CJG={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@default [5,15]
*@description Horizontal distance from the anchor point this entity must stay within upon a successful radius adjustment.
*/
"radius_range"?:BAD;
/**
*@default 250
*@description A random value to determine when to increase the size of the radius up to the maximum. This has a 1/value chance every tick to do so.
*/
"radius_change_chance"?:integer;
/**
*@default [0,0]
*@description The number of blocks above the target that the next anchor point can be set. This value is used only when the entity is tracking a target.
*/
"height_above_target_range"?:BAD;
/**
*@default [0,0]
*@description The range of height in blocks offset the mob can have from it's anchor point.
*/
"height_offset_range"?:BAD;
/**
*@default 350
*@description A random value to determine when to change the height of the mob from the anchor point. This has a 1/value chance every tick to do so.
*/
"height_change_chance"?:integer;
/**
*@default 0.5
*@description Maximum distance from the anchor-point in which this entity considers itself to have reached the anchor point. This is to prevent the entity from bouncing back and forth trying to reach a specific spot.
*/
"goal_radius"?:number;
/**
*@default 1
*@description The number of blocks to increase the current movement radius by, upon successful `radius_adjustment_chance`. If the current radius increases over the range maximum, the current radius will be set back to the range minimum and the entity will change between clockwise and counter-clockwise movement.
*/
"radius_change"?:number;
/**
*@default 0.004
*@description Percent chance to determine how often to increase the size of the current movement radius around the anchor point. 1 = 100%. `radius_change_chance` is deprecated and has been replaced with `radius_adjustment_chance`.
*/
"radius_adjustment_chance"?:number;
/**
*@default 0.002857
*@description Percent chance to determine how often to increase or decrease the current height around the anchor point. 1 = 100%. `height_change_chance` is deprecated and has been replaced with `height_adjustment_chance`.
*/
"height_adjustment_chance"?:number;
/**
*@default 15
*@description Number of degrees to change this entity's facing by, when the entity selects its next anchor point.
*/
"angle_change"?:number;
};
export type CJH={
"priority"?:CID;
/**
*@default 0.5
*@description The entity will attempt to rotate to face where the player is facing each tick. The entity will target this percentage of their difference in their current facing angles each tick (from 0.0 to 1.0 where 1.0 = 100%). This is limited by FractionalRotationLimit. A value of 0.0 will result in the entity no longer turning to where the player is facing.
*/
"fractional_rotation"?:number;
/**
*@default 5
*@description Limits the total degrees the entity can rotate to face where the player is facing on each tick.
*/
"fractional_rotation_limit"?:number;
/**
*@default 1
*@description Speed multiplier of mount when controlled by player.
*/
"mount_speed_multiplier"?:number;
};
export type DAA=Array<JsonType>;
export type CJJ=DAA|integer;
export type CJI={
"priority"?:CID;
/**
*@description Random range in seconds after which the croaking stops. Can also be a constant.
*/
"duration"?:CJJ;
/**
*@description Conditions for the behavior to start and keep running. The interval between runs only starts after passing the filters.
*/
"filters"?:BG;
/**
*@description Random range in seconds between runs of this behavior. Can also be a constant.
*/
"interval"?:CJJ;
};
export type DAB={
"priority"?:CID;
/**
*@description Sound to occasionally play while defending.
*/
"aggro_sound"?:BE;
/**
*@description Time in seconds between attacks.
*/
"attack_interval"?:integer;
/**
*@description If true, only entities in this mob's viewing range can be selected as targets.
*/
"must_see"?:boolean;
/**
*@default 3
*@description Determines the amount of time in seconds that this mob will look for a target before forgetting about it and looking for a new one when the target isn't visible any more.
*/
"must_see_forget_duration"?:number;
/**
*@description The event to run when this mob starts to defend the entity it trusts.
*/
"on_defend_start"?:CEB;
/**
*@description Distance in blocks that the target can be within to launch an attack.
*/
"within_radius"?:number;
/**
*@description List of entity types that this mob considers valid targets.
*/
"entity_types"?:CIG;
/**
*@default 0.05
*@description Probability that a sound will play.
*@minimum 0
*@maximum 1
*/
"sound_chance"?:number;
};
export type DAC={
"priority"?:CID;
/**
*@description List of entity types this mob considers a threat to the village.
*/
"entity_types"?:CIG;
/**
*@description The entity must be able to reach attacker.
*/
"must_reach"?:boolean;
/**
*@default 0.05
*@description The percentage chance that the entity has to attack aggressors of its village, where 1.0 = 100%.
*/
"attack_chance"?:number;
};
export type DAD={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@default 0.75
*@description The entity's attack animation will play out over this duration (in seconds). Also controls attack cooldown.
*/
"attack_duration"?:number;
/**
*@description Allows the entity to use this attack behavior, only once EVER.
*/
"attack_once"?:boolean;
/**
*@default "N/A"
*@description Defines the entity types this entity will attack.
*/
"attack_types"?:string;
/**
*@default 1
*@description Cooldown time (in seconds) between attacks.
*/
"cooldown_time"?:number;
/**
*@default 0.5
*@description The percentage into the attack animation to apply the damage of the attack (1.0 = 100%).
*/
"hit_delay_pct"?:number;
/**
*@default 0.25
*@description Time (in seconds) to add to attack path recalculation when the target is beyond the "path_inner_boundary".
*/
"inner_boundary_time_increase"?:number;
/**
*@description Unused. No effect on "minecraft:behavior.melee_attack".
*/
"max_dist"?:number;
/**
*@default 0.55
*@description Maximum base time (in seconds) to recalculate new attack path to target (before increases applied).
*/
"max_path_time"?:number;
/**
*@default 90
*@description Field of view (in degrees) when using the sensing component to detect an attack target.
*/
"melee_fov"?:number;
/**
*@default 0.2
*@description Minimum base time (in seconds) to recalculate new attack path to target (before increases applied).
*/
"min_path_time"?:number;
/**
*@description Defines the event to trigger when this entity successfully attacks.
*/
"on_attack"?:BAA;
/**
*@default 0.5
*@description Time (in seconds) to add to attack path recalculation when the target is beyond the "path_outer_boundary".
*/
"outer_boundary_time_increase"?:number;
/**
*@default 0.75
*@description Time (in seconds) to add to attack path recalculation when this entity cannot move along the current path.
*/
"path_fail_time_increase"?:number;
/**
*@default 16
*@description Distance at which to increase attack path recalculation by "inner_boundary_tick_increase".
*/
"path_inner_boundary"?:number;
/**
*@default 32
*@description Distance at which to increase attack path recalculation by "outer_boundary_tick_increase".
*/
"path_outer_boundary"?:number;
/**
*@description This entity will have a 1 in N chance to stop it's current attack, where N = "random_stop_interval".
*/
"random_stop_interval"?:integer;
/**
*@default 2
*@description Used with the base size of the entity to determine minimum target-distance before trying to deal attack damage.
*/
"reach_multiplier"?:number;
/**
*@description Toggles (on/off) the need to have a full path from the entity to the target when using this melee attack behavior.
*/
"require_complete_path"?:boolean;
/**
*@description Allows the actor to be set to persist upon targeting a player.
*/
"set_persistent"?:boolean;
/**
*@description Unused. No effect on "minecraft:behavior.melee_attack".
*/
"target_dist"?:number;
/**
*@description Allows the entity to track the attack target, even if the entity has no sensing.
*/
"track_target"?:boolean;
/**
*@default 30
*@description Maximum rotation (in degrees), on the X-axis, this entity can rotate while trying to look at the target.
*/
"x_max_rotation"?:number;
/**
*@default 30
*@description Maximum rotation (in degrees), on the Y-axis, this entity can rotate its head while trying to look at the target.
*/
"y_max_head_rotation"?:number;
};
export type DAE={
"priority"?:CID;
/**
*@description If true, this behavior can run when this entity is named. Otherwise not.
*/
"allow_dig_when_named"?:boolean;
/**
*@description Indicates that the actor should start digging when it sees daylight.
*/
"digs_in_daylight"?:boolean;
/**
*@description Goal duration in seconds.
*/
"duration"?:number;
/**
*@description The minimum idle time in seconds between the last detected disturbance to the start of digging.
*/
"idle_time"?:number;
/**
*@description If true, finding new suspicious locations count as disturbances that may delay the start of this goal.
*/
"suspicion_is_disturbance"?:boolean;
/**
*@description If true, vibrations count as disturbances that may delay the start of this goal.
*/
"vibration_is_disturbance"?:boolean;
};
export type DAF={
"priority"?:CID;
};
export type DAG={
"priority"?:CID;
/**
*@default 1
*@description The speed this entity moves when this behavior has started or while it's active.
*/
"active_speed"?:number;
/**
*@default 0.5
*@description If the dragon is outside the "target_zone" for longer than "continue_charge_threshold_time" seconds, the charge is canceled.
*/
"continue_charge_threshold_time"?:number;
/**
*@default 0.6
*@description The speed this entity moves while this behavior is not active.
*/
"flight_speed"?:number;
/**
*@default [10,150]
*@description Minimum and maximum distance, from the target, this entity can use this behavior.
*/
"target_zone"?:BAD;
/**
*@default 0.7
*@description The speed at which this entity turns while using this behavior.
*/
"turn_speed"?:number;
};
export type DAH={
"priority"?:CID;
};
export type DAI={
"priority"?:CID;
/**
*@default 10
*@description Time (in seconds), after roar, to breath flame.
*/
"cooldown_time"?:number;
/**
*@default 0.5
*@description Time (in seconds), after roar, to breath flame.
*/
"flame_time"?:number;
/**
*@default 4
*@description Number of ground flame-breath attacks to use before flight-takeoff.
*/
"ground_flame_count"?:integer;
/**
*@default 2
*@description Time (in seconds) to roar, before breathing flame.
*/
"roar_time"?:number;
};
export type DAJ={
"priority"?:CID;
};
export type DBA={
"priority"?:CID;
};
export type DBB={
"priority"?:CID;
};
export type DBC={
"priority"?:CID;
/**
*@default 1
*@description The speed this entity moves when this behavior has started or while it's active.
*/
"active_speed"?:number;
/**
*@default 64
*@description Maximum distance of this entity's fireball attack while strafing.
*/
"fireball_range"?:number;
/**
*@default 0.6
*@description The speed this entity moves while this behavior is not active.
*/
"flight_speed"?:number;
/**
*@default 0.125
*@description Percent chance to to switch this entity's strafe direction between clockwise and counterclockwise. Switch direction chance occurs each time a new target is chosen (1.0 = 100%).
*/
"switch_direction_probability"?:number;
/**
*@default 0.25
*@description Time (in seconds) the target must be in fireball range, and in view [ie, no solid terrain in-between the target and this entity], before a fireball can be shot.
*/
"target_in_range_and_in_view_time"?:number;
/**
*@default [10,150]
*@description Minimum and maximum distance, from the target, this entity can use this behavior.
*/
"target_zone"?:BAD;
/**
*@default 0.7
*@description The speed at which this entity turns while using this behavior.
*/
"turn_speed"?:number;
/**
*@default 10
*@description The target must be within "view_angle" degrees of the dragon's current rotation before a fireball can be shot.
*/
"view_angle"?:number;
};
export type DBD={
"priority"?:CID;
};
export type DBE={
"priority"?:CID;
/**
*@default 5
*@description Time (in seconds) that the goal is on cooldown before it can be used again.
*/
"cooldown_seconds"?:number;
/**
*@description Conditions that need to be met for the behavior to start.
*/
"filters"?:BG;
};
export type DBF={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description Movement speed modifier of the mob when using this AI Goal.
*/
"speed_modifier"?:JsonType;
/**
*@description A list of potions that this entity can drink.
*/
"potions"?:Array<{
/**
*@default -1
*@description The registry ID of the potion to use.
*/
"id":integer;
/**
*@default 1
*@minimum 0
*@maximum 1
*@description The percent chance (from 0.0 to 1.0) of this potion being selected when searching for a potion to use.
*/
"chance":number;
/**
*@description The filters to use when determining if this potion can be selected.
*/
"filters":BG;
}>;
};
export type DBG={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description The list of conditions another entity must meet to be a valid target to drop an item for.
*/
"entity_types"?:CIG;
/**
*@default 0.2
*@description Total time that the goal is on cooldown before it can be used again.
*/
"cooldown"?:number;
/**
*@default 1
*@description The percent chance the entity will drop an item when using this goal.
*/
"drop_item_chance"?:number;
/**
*@default 0.5
*@description Distance in blocks within the entity considers it has reached it's target position.
*/
"goal_radius"?:number;
/**
*@example
*```json
*"loot_tables/"
*```
*@description The loot table that contains the possible loot the entity can drop with this goal.
*/
"loot_table"?:string;
/**
*@default 10
*@description The maximum height the entities head will look at when dropping the item. The entity will always be looking at its target.
*/
"max_head_look_at_height"?:number;
/**
*@default 2
*@description If the target position is farther away than this distance on any tick, the entity will teleport to the target position.
*/
"minimum_teleport_distance"?:number;
/**
*@default 1
*@description The preferred distance the entity tries to be from the target it is dropping an item for.
*/
"offering_distance"?:number;
/**
*@description The event to trigger when the entity attempts to drop an item.
*/
"on_drop_attempt"?:BAA;
/**
*@description The number of blocks each tick that the entity will check within its search range and height for a valid block to move to. A value of 0 will have the mob check every block within range in one tick.
*/
"search_count"?:integer;
/**
*@default 1
*@description The Height in blocks the entity will search within to find a valid target position.
*/
"search_height"?:integer;
/**
*@description The distance in blocks the entity will search within to find a valid target position.
*/
"search_range"?:integer;
/**
*@description The numbers of seconds that will pass before the dropped entity can be picked up from the ground.
*/
"seconds_before_pickup"?:number;
/**
*@default [1,1,1]
*@description The range in blocks within which the entity searches to find a target to drop an item for.
*/
"target_range"?:CEA;
/**
*@default [0,1,0]
*@description When the entity teleports, offset the teleport position by this many blocks in the X, Y, and Z coordinate.
*/
"teleport_offset"?:CEA;
/**
*@default [0,1]
*@description The valid times of day that this goal can be used. For reference: noon is 0.0, sunset is 0.25, midnight is 0.5, and sunrise is 0.75, and back to noon for 1.0.
*/
"time_of_day_range"?:BAD;
};
export type DBH={
"priority"?:CID;
/**
*@description The event to trigger when the block eating animation has completed.
*/
"on_eat"?:BAA;
/**
*@default 0.02
*@description A molang expression defining the success chance the entity has to consume a block.
*/
"success_chance"?:E;
/**
*@default 1.8
*@description The amount of time (in seconds) it takes for the block to be eaten upon a successful eat attempt.
*/
"time_until_eat"?:number;
/**
*@description A collection of pairs of blocks; the first ("eat_block")is the block the entity should eat, the second ("replace_block") is the block that should replace the eaten block.
*/
"eat_and_replace_block_pairs"?:Array<{
/**
*@description The block to eat.
*/
"eat_block"?:BAI;
/**
*@description The block to replace the eaten block with.
*/
"replace_block"?:BAI;
[k:string]:any;
}>;
};
export type DBI={
"priority"?:CID;
/**
*@description Time in seconds the mob should wait before eating the item.
*/
"delay_before_eating"?:number;
};
export type DBJ={
"priority"?:CID;
/**
*@default 1000000
*@description Sets the time in seconds the eat animation should play for.
*/
"eat_animation_time"?:number;
/**
*@description Sets the sound that should play when eating a mob.
*/
"eat_mob_sound"?:BE;
/**
*@description The loot table for loot to be dropped when eating a mob.
*/
"loot_table"?:string;
/**
*@default 1000000
*@description Sets the force which the mob-to-be-eaten is pulled towards the eating mob.
*/
"pull_in_force"?:number;
/**
*@default 1000000
*@description Sets the desired distance to be reached before eating the mob.
*/
"reach_mob_distance"?:number;
/**
*@default 1000000
*@description Sets the entity's speed when running toward the target.
*/
"run_speed"?:number;
};
export type DCA={
"priority"?:CID;
};
export type DCB={
"priority"?:CID;
};
export type DCC={
"priority"?:CID;
};
export type DCD={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@default [5,0,5]
*@description The distance from the boundary the villager must be within in to explore the outskirts.
*/
"dist_from_boundary"?:CEA;
/**
*@default 5
*@description Total distance in blocks the the entity will explore beyond the village bounds when choosing its travel point.
*/
"explore_dist"?:number;
/**
*@default 60
*@description This is the maximum amount of time an entity will attempt to reach it's travel point on the outskirts of the village before the goal exits.
*/
"max_travel_time"?:number;
/**
*@description The wait time in seconds between choosing new explore points will be chosen on a random interval between this value and the minimum wait time. This value is also the total amount of time the entity will explore random points before the goal stops.
*/
"max_wait_time"?:number;
/**
*@default 2.2
*@description The entity must be within this distance for it to consider it has successfully reached its target.
*/
"min_dist_from_target"?:number;
/**
*@default 1
*@description The minimum perimeter of the village required to run this goal.
*/
"min_perimeter"?:number;
/**
*@default 3
*@description The wait time in seconds between choosing new explore points will be chosen on a random interval between this value and the maximum wait time.
*/
"min_wait_time"?:number;
/**
*@default 5
*@description A new explore point will randomly be chosen within this XZ distance of the current target position when navigation has finished and the wait timer has elapsed.
*/
"next_xz"?:integer;
/**
*@default 3
*@description A new explore point will randomly be chosen within this Y distance of the current target position when navigation has finished and the wait timer has elapsed.
*/
"next_y"?:integer;
/**
*@default 2
*@description Each new explore point will be chosen on a random interval between the minimum and the maximum wait time, divided by this value. This does not apply to the first explore point chosen when the goal runs.
*/
"timer_ratio"?:number;
};
export type DCE={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@default 1.5
*@description Distance in blocks within the mob considers it has reached it's target position.
*/
"goal_radius"?:number;
/**
*@default 1
*@description The maximum number of times the mob will use fertilzer on the target block.
*/
"max_fertilizer_usage"?:integer;
/**
*@default 8
*@description The maximum amount of time in seconds that the goal can take before searching again. The time is chosen between 0 and this number.
*/
"search_cooldown_max_seconds"?:number;
/**
*@default 9
*@description The number of randomly selected blocks each tick that the mob will check within its search range and height for a valid block to move to. A value of 0 will have the mob check every block within range in one tick.
*/
"search_count"?:integer;
/**
*@default 1
*@description The Height in blocks the mob will search within to find a valid target position.
*/
"search_height"?:integer;
/**
*@default 1
*@description The distance in blocks the mob will search within to find a valid target position.
*/
"search_range"?:integer;
};
export type DCF={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description Time in seconds the mob has to wait before using the goal again.
*/
"cooldown_time"?:number;
};
export type DCG={
"priority"?:CID;
/**
*@description If true, the mob will not go into water blocks when going towards a mount.
*/
"avoid_water"?:boolean;
/**
*@default -1
*@description This is the distance the mob needs to be, in blocks, from the desired mount to mount it. If the value is below 0, the mob will use its default attack distance
*/
"mount_distance"?:number;
/**
*@description Time the mob will wait before starting to move towards the mount.
*/
"start_delay"?:integer;
/**
*@description If true, the mob will only look for a mount if it has a target.
*/
"target_needed"?:boolean;
/**
*@description Distance in blocks within which the mob will look for a mount.
*/
"within_radius"?:number;
/**
*@description The number of failed attempts to make before this goal is no longer used.
*/
"max_failed_attempts"?:integer;
};
export type DCH={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description The range that the mob will search for a treasure chest within a ruin or shipwreck to move towards.
*/
"search_range"?:integer;
/**
*@default 2
*@description The distance the mob will move before stopping.
*/
"stop_distance"?:number;
};
export type DCI={
"priority"?:CID;
"speed_multiplier"?:CJA;
};
export type DCJ={
"priority"?:CID;
/**
*@default 10
*@description Distance in blocks on ground that the mob will look for a new spot to move to. Must be at least 1
*/
"xz_dist"?:integer;
/**
*@default 7
*@description Distance in blocks that the mob will look up or down for a new spot to move to. Must be at least 1
*/
"y_dist"?:integer;
/**
*@description Height in blocks to add to the selected target position.
*/
"y_offset"?:number;
/**
*@description If true, the point has to be reachable to be a valid target.
*/
"must_reach"?:boolean;
/**
*@description If true, the mob will randomly pick a new point while moving to the previously selected one.
*/
"random_reselect"?:boolean;
/**
*@default [0,0]
*@description Range of time in seconds the mob will float around before landing and choosing to do something else.
*/
"float_duration"?:BAD;
};
export type DDA={
"priority"?:CID;
};
export type DDB={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description List of entity types that this mob can follow in a caravan.
*/
"entity_types"?:CIG;
/**
*@default 1
*@description Number of entities that can be in the caravan.
*/
"entity_count"?:integer;
};
export type DDC={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description The distance in blocks it will look for a mob to follow.
*/
"search_range"?:integer;
/**
*@default 2
*@description The distance in blocks this mob stops from the mob it is following.
*/
"stop_distance"?:number;
};
export type DDD={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@default true
*@description Specify if the mob can teleport to the player if it is too far away.
*/
"can_teleport"?:boolean;
/**
*@default true
*@description Specify if the mob will follow the owner if it has heard a vibration lately.
*/
"ignore_vibration"?:boolean;
/**
*@default 60
*@description The maximum distance in blocks this mob can be from its owner to start following, only used when canTeleport is false.
*/
"max_distance"?:number;
/**
*@default 10
*@description The distance in blocks that the owner can be away from this mob before it starts following it.
*/
"start_distance"?:number;
/**
*@default 2
*@description The distance in blocks this mob will stop from its owner while following it.
*/
"stop_distance"?:number;
};
export type DDE={
"priority"?:CID;
"speed_multiplier"?:CJA;
};
export type DDF={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description Defines the distance in blocks the mob will stay from its target while following.
*/
"follow_distance"?:number;
/**
*@description Defines the maximum distance in blocks a mob can get from its target captain before giving up trying to follow it.
*/
"within_radius"?:number;
};
export type DDG={
"priority"?:CID;
/**
*@description Sets the time an entity should continue delivering items to a noteblock after hearing it.
*/
"listen_time"?:integer;
/**
*@description Event(s) to run when this mob throws items.
*/
"on_item_throw"?:BAA|Array<BAA>;
/**
*@default 3
*@description Sets the desired distance to be reached before throwing the items towards the block.
*/
"reach_block_distance"?:number;
/**
*@default 1
*@description Sets the entity's speed when running toward the block.
*/
"run_speed"?:number;
/**
*@default 0.2
*@description Sets the throw force.
*/
"throw_force"?:number;
/**
*@description Sound to play when this mob throws an item.
*/
"throw_sound"?:BE;
/**
*@default 1.5
*@description Sets the vertical throw multiplier that is applied on top of the throw force in the vertical direction.
*/
"vertical_throw_mul"?:number;
};
export type DDH={
"priority"?:CID;
/**
*@description Event(s) to run when this mob throws items.
*/
"on_item_throw"?:BAA;
/**
*@default 3
*@description Sets the desired distance to be reached before giving items to owner.
*/
"reach_mob_distance"?:number;
/**
*@default 1
*@description Sets the entity's speed when running toward the owner.
*/
"run_speed"?:number;
/**
*@default 0.2
*@description Sets the throw force.
*/
"throw_force"?:number;
/**
*@default "item_thrown"
*@description Sound to play when this mob throws an item.
*/
"throw_sound"?:BE;
/**
*@default 1.5
*@description Sets the vertical throw multiplier that is applied on top of the throw force in the vertical direction.
*/
"vertical_throw_mul"?:number;
};
export type DDI={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@default 0.5
*@description Distance in blocks within the mob considers it has reached the goal. This is the `wiggle room` to stop the AI from bouncing back and forth trying to reach a specific spot
*/
"goal_radius"?:number;
/**
*@default 120
*@description A random value to determine when to randomly move somewhere. This has a 1/interval chance to choose this goal
*/
"interval"?:integer;
/**
*@description Event(s) to run when this mob gets home.
*/
"on_home"?:Array<BAA>;
/**
*@description Event(s) to run when this goal fails.
*/
"on_failed"?:Array<CEB>;
/**
*@default 2
*@description Distance in blocks that the mob is considered close enough to the end of the current path. A new path will then be calculated to continue toward home.
*/
"calculate_new_path_radius"?:number;
};
export type DDJ={
"priority"?:CID;
/**
*@default 2
*@description Amount of additional damage dealt from an elder guardian's magic attack.
*/
"elder_extra_magic_damage"?:integer;
/**
*@default 2
*@description In hard difficulty, amount of additional damage dealt from a guardian's magic attack.
*/
"hard_mode_extra_magic_damage"?:integer;
/**
*@default 1
*@description Amount of damage dealt from a guardian's magic attack. Magic attack damage is added to the guardian's base attack damage.
*/
"magic_damage"?:integer;
/**
*@default 3
*@description Guardian attack behavior stops if the target is closer than this distance (doesn't apply to elders).
*/
"min_distance"?:number;
/**
*@default 0.5
*@description Time (in seconds) to wait after starting an attack before playing the guardian attack sound.
*/
"sound_delay_time"?:number;
/**
*@default 90
*@description Maximum rotation (in degrees), on the X-axis, this entity can rotate while trying to look at the target.
*/
"x_max_rotation"?:number;
/**
*@default 90
*@description Maximum rotation (in degrees), on the Y-axis, this entity can rotate its head while trying to look at the target.
*/
"y_max_head_rotation"?:number;
};
export type DEA={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@default 1
*@description The maximum amount of time in seconds that the goal can take before searching for the first harvest block. The time is chosen between 0 and this number.
*/
"max_seconds_before_search"?:number;
/**
*@default 8
*@description The maximum amount of time in seconds that the goal can take before searching again, after failing to find a a harvest block already. The time is chosen between 0 and this number.
*/
"search_cooldown_max_seconds"?:number;
/**
*@description The number of randomly selected blocks each tick that the entity will check within its search range and height for a valid block to move to. A value of 0 will have the mob check every block within range in one tick.
*/
"search_count"?:integer;
/**
*@default 1
*@description The height in blocks the entity will search within to find a valid target position.
*/
"search_height"?:integer;
/**
*@default 16
*@description The distance in blocks the entity will search within to find a valid target position.
*/
"search_range"?:integer;
/**
*@default 0.5
*@description The amount of time in seconds that the goal will cooldown after a successful reap/sow, before it can start again.
*/
"seconds_until_new_task"?:number;
};
export type DEB={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@default 1
*@description Amount of time in seconds that the mob reacts.
*/
"duration"?:number;
/**
*@example
*```json
*"bed"
*```
*@description Defines what POI type to hide at.
*/
"poi_type"?:string;
/**
*@default 8
*@description The cooldown time in seconds before the goal can be reused after a internal failure or timeout condition.
*/
"timeout_cooldown"?:number;
};
export type DEC={
"priority"?:CID;
/**
*@description Whether to broadcast out the mob's target to other mobs of the same type.
*/
"broadcast"?:boolean;
/**
*@description Range in blocks for how far to broadcast.
*/
"broadcast_range"?:number;
/**
*@default 10
*@description Minimum distance the target must be for the mob to run this goal.
*/
"min_radius"?:number;
/**
*@description Event to run when target is within the radius. This event is broadcasted if broadcast is true.
*/
"within_radius_event"?:CEB;
};
export type DED={
"priority"?:CID;
/**
*@description List of entity types that this mob can target if they hurt their owner.
*/
"entity_types"?:CIG;
/**
*@description If true, nearby mobs of the same type will be alerted about the damage.
*/
"alert_same_type"?:boolean;
/**
*@description If true, the mob will hurt its owner and other mobs with the same owner as itself.
*/
"hurt_owner"?:boolean;
};
export type DEE={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@default 0.5
*@description Distance in blocks within the mob considers it has reached the goal. This is the `wiggle room` to stop the AI from bouncing back and forth trying to reach a specific spot
*/
"goal_radius"?:number;
/**
*@default 10
*@description The number of blocks each tick that the mob will check within it's search range and height for a valid block to move to. A value of 0 will have the mob check every block within range in one tick
*/
"search_count"?:integer;
/**
*@default 1
*@description The height that the mob will search for bookshelves.
*/
"search_height"?:integer;
/**
*@description Distance in blocks the mob will look for books to inspect.
*/
"search_range"?:integer;
};
export type DEG=Array<JsonType>;
export type DEF={
"priority"?:CID;
/**
*@default [10,20]
*@description Minimum and maximum cooldown time-range (positive, in seconds) between each attempted jump.
*/
"cooldown_range"?:DEG;
/**
*@description Blocks that the mob can't jump to.
*/
"forbidden_blocks"?:Array<J>;
/**
*@default 1.5
*@description The maximum velocity with which the mob can jump.
*/
"max_velocity"?:number;
/**
*@default 2
*@description The minimum distance (in blocks) from the mob to a block, in order to consider jumping to it.
*/
"minimum_distance"?:integer;
/**
*@default 5
*@description The minimum length (in blocks) of the mobs path to a block, in order to consider jumping to it.
*/
"minimum_path_length"?:integer;
/**
*@description Blocks that the mob prefers jumping to.
*/
"preferred_blocks"?:Array<J>;
/**
*@default 1
*@description Chance (between 0.0 and 1.0) that the mob will jump to a preferred block, if in range. Only matters if preferred blocks are defined.
*/
"preferred_blocks_chance"?:number;
/**
*@default 0.7
*@description The scalefactor of the bounding box of the mob while it is jumping.
*/
"scale_factor"?:number;
/**
*@default 10
*@description The height (in blocks, in range [2, 15]) of the search box, centered around the mob.
*/
"search_height"?:integer;
/**
*@default 8
*@description The width (in blocks, in range [2, 15]) of the search box, centered around the mob.
*/
"search_width"?:integer;
};
export type DEH={
"priority"?:CID;
/**
*@default 0.5
*@description The delay after which the knockback occurs (in seconds).
*/
"attack_time"?:number;
/**
*@description Time in seconds the mob has to wait before using the goal again.
*/
"cooldown_time"?:number;
/**
*@description The list of conditions another entity must meet to be a valid target to apply damage to.
*/
"damage_filters"?:BG;
/**
*@default 1
*@description The duration of the roar (in seconds).
*/
"duration"?:number;
/**
*@default 6
*@description The damage dealt by the knockback roar.
*/
"knockback_damage"?:integer;
/**
*@default 4
*@description The strength of the knockback.
*/
"knockback_strength"?:integer;
/**
*@description The list of conditions another entity must meet to be a valid target to apply knockback to.
*/
"knockback_filters"?:BG;
/**
*@default 4
*@description The strength of the horizontal knockback.
*/
"knockback_horizontal_strength"?:integer;
/**
*@default 4
*@description The radius (in blocks) of the knockback effect.
*/
"knockback_range"?:integer;
/**
*@default 4
*@description The strength of the vertical knockback.
*/
"knockback_vertical_strength"?:integer;
/**
*@default 0.4
*@description The maximum height for vertical knockback.
*/
"knockback_height_cap"?:number;
/**
*@description If true, this mob will chase after the target as long as it's a valid target.
*/
"track_target"?:boolean;
/**
*@description Event that is triggered when the roar ends.
*/
"on_roar_end"?:CEB;
};
export type DEI={
"priority"?:CID;
/**
*@default 120
*@description A random value to determine at what intervals something can occur. This has a 1/interval chance to choose this goal
*/
"interval"?:integer;
/**
*@default 120
*@description A random value in which the goal can use to pull out of the behavior. This is a 1/interval chance to play the sound
*/
"random_stop_interval"?:integer;
};
export type DEJ={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description [EXPERIMENTAL] Allows the mob to lay its eggs from below the target if it can't get there. This is useful if the target block is water with air above, since mobs may not be able to get to the air block above water.
*/
"allow_laying_from_below"?:boolean;
/**
*@default "minecraft:turtle_egg"
*@description [EXPERIMENTAL] Block type for the egg to lay. If this is a turtle egg, the number of eggs in the block is randomly set.
*/
"egg_type"?:J;
/**
*@default 0.5
*@description Distance in blocks within the mob considers it has reached the goal. This is the "wiggle room" to stop the AI from bouncing back and forth trying to reach a specific spot
*/
"goal_radius"?:number;
/**
*@default "lay_egg"
*@description [EXPERIMENTAL] Sound event name for laying egg. Defaulted to lay_egg which is used for Turtles.
*/
"lay_egg_sound"?:BE;
/**
*@default 10
*@description [EXPERIMENTAL] Duration of the laying egg process in seconds.
*/
"lay_seconds"?:number;
/**
*@description Event to run when this mob lays the egg.
*/
"on_lay"?:BAA;
/**
*@default 1
*@description Height in blocks the mob will look for a target block to move towards.
*/
"search_height"?:integer;
/**
*@description The distance in blocks it will look for a target block to move towards.
*/
"search_range"?:integer;
/**
*@default ["minecraft:sand"]
*@description [EXPERIMENTAL] Blocks that the mob can lay its eggs on top of.
*/
"target_blocks"?:Array<J>;
/**
*@default ["Air"]
*@description [EXPERIMENTAL] Types of materials that can exist above the target block. Valid types are Air, Water, and Lava.
*/
"target_materials_above_block"?:Array<JsonType>;
/**
*@default true
*@description [EXPERIMENTAL] Specifies if the default lay-egg animation should be played when the egg is placed or not.
*/
"use_default_animation"?:boolean;
};
export type DFA={
"priority"?:CID;
/**
*@default true
*@description If true, the mob will only jump at its target if its on the ground. Setting it to false will allow it to jump even if its already in the air
*/
"must_be_on_ground"?:boolean;
/**
*@description Allows the actor to be set to persist upon targeting a player.
*/
"set_persistent"?:boolean;
/**
*@description The height in blocks the mob jumps when leaping at its target.
*/
"yd"?:number;
/**
*@default 0.3
*@description Distance in blocks the mob jumps when leaping at its target.
*/
"target_dist"?:number;
};
export type DFB={
"priority"?:CID;
/**
*@default 8
*@description The distance in blocks from which the entity will look at.
*/
"look_distance"?:number;
/**
*@default 0.02
*@description The probability of looking at the target. A value of 1.00 is 100%
*/
"probability"?:number;
/**
*@default [2,4]
*@description Time range to look at the entity.
*/
"look_time"?:BAD;
/**
*@default 360
*@description The angle in degrees that the mob can see in the X-axis (left-right).
*/
"angle_of_view_vertical"?:integer;
/**
*@default 360
*@description The angle in degrees that the mob can see in the Y-axis (up-down).
*/
"angle_of_view_horizontal"?:integer;
/**
*@description Filter to determine the conditions for this mob to look at the entity.
*/
"filters"?:BG;
};
export type DFC={
"priority"?:CID;
/**
*@default 360
*@description The angle in degrees that the mob can see in the X-axis (left-right).
*/
"angle_of_view_vertical"?:integer;
/**
*@default 360
*@description The angle in degrees that the mob can see in the Y-axis (up-down).
*/
"angle_of_view_horizontal"?:integer;
/**
*@default 8
*@description The distance in blocks from which the entity will look at.
*/
"look_distance"?:number;
/**
*@default 0.02
*@minimum 0
*@description The probability of looking at the target. A value of 1.00 is 100%
*/
"probability"?:number;
/**
*@default [2,4]
*@description Time range to look at the entity.
*/
"look_time"?:Array<JsonType>;
/**
*@default 6
*@description The distance in blocks from which the entity will choose a target.
*/
"target_distance"?:number;
};
export type DFD={
"priority"?:CID;
/**
*@default 8
*@description The distance in blocks from which the entity will look at.
*/
"look_distance"?:number;
/**
*@default 0.02
*@description The probability of looking at the target. A value of 1.00 is 100%
*/
"probability"?:number;
/**
*@default [2,4]
*@description Time range to look at the entity.
*/
"look_time"?:BAD;
/**
*@default 360
*@description The angle in degrees that the mob can see in the X-axis (left-right).
*/
"angle_of_view_vertical"?:integer;
/**
*@default 360
*@description The angle in degrees that the mob can see in the Y-axis (up-down).
*/
"angle_of_view_horizontal"?:integer;
};
export type DFE={
"priority"?:CID;
/**
*@default 8
*@description The distance in blocks from which the entity will look at.
*/
"look_distance"?:number;
/**
*@default 0.02
*@description The probability of looking at the target. A value of 1.00 is 100%
*/
"probability"?:number;
/**
*@default [2,4]
*@description Time range to look at the entity.
*/
"look_time"?:BAD;
/**
*@default 360
*@description The angle in degrees that the mob can see in the X-axis (left-right).
*/
"angle_of_view_vertical"?:integer;
/**
*@default 360
*@description The angle in degrees that the mob can see in the Y-axis (up-down).
*/
"angle_of_view_horizontal"?:integer;
};
export type DFF={
"priority"?:CID;
};
export type DFG={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description Allows the entity to use this attack behavior, only once EVER.
*/
"attack_once"?:boolean;
/**
*@default "N/A"
*@description Defines the entity types this entity will attack.
*/
"attack_types"?:string;
/**
*@default 1
*@description Cooldown time (in seconds) between attacks.
*/
"cooldown_time"?:number;
/**
*@default 0.25
*@description Time (in seconds) to add to attack path recalculation when the target is beyond the "path_inner_boundary".
*/
"inner_boundary_time_increase"?:number;
/**
*@description Unused. No effect on "minecraft:behavior.melee_attack".
*/
"max_dist"?:number;
/**
*@default 0.55
*@description Maximum base time (in seconds) to recalculate new attack path to target (before increases applied).
*/
"max_path_time"?:number;
/**
*@default 90
*@description Field of view (in degrees) when using the sensing component to detect an attack target.
*/
"melee_fov"?:number;
/**
*@default 0.2
*@description Minimum base time (in seconds) to recalculate new attack path to target (before increases applied).
*/
"min_path_time"?:number;
/**
*@description Defines the event to trigger when this entity successfully attacks.
*/
"on_attack"?:BAA;
/**
*@description Defines the event to trigger when this entity successfully kills.
*/
"on_kill"?:BAA;
/**
*@default 0.5
*@description Time (in seconds) to add to attack path recalculation when the target is beyond the "path_outer_boundary".
*/
"outer_boundary_time_increase"?:number;
/**
*@default 0.75
*@description Time (in seconds) to add to attack path recalculation when this entity cannot move along the current path.
*/
"path_fail_time_increase"?:number;
/**
*@default 16
*@description Distance at which to increase attack path recalculation by "inner_boundary_tick_increase".
*/
"path_inner_boundary"?:number;
/**
*@default 32
*@description Distance at which to increase attack path recalculation by "outer_boundary_tick_increase".
*/
"path_outer_boundary"?:number;
/**
*@description This entity will have a 1 in N chance to stop it's current attack, where N = "random_stop_interval".
*/
"random_stop_interval"?:integer;
/**
*@default 2
*@description Used with the base size of the entity to determine minimum target-distance before trying to deal attack damage.
*/
"reach_multiplier"?:number;
/**
*@description Toggles (on/off) the need to have a full path from the entity to the target when using this melee attack behavior.
*/
"require_complete_path"?:boolean;
/**
*@description Allows the actor to be set to persist upon targeting a player.
*/
"set_persistent"?:boolean;
/**
*@description Unused. No effect on "minecraft:behavior.melee_attack".
*/
"target_dist"?:number;
/**
*@description Allows the entity to track the attack target, even if the entity has no sensing.
*/
"track_target"?:boolean;
/**
*@default 30
*@description Maximum rotation (in degrees), on the X-axis, this entity can rotate while trying to look at the target.
*/
"x_max_rotation"?:number;
/**
*@default 30
*@description Maximum rotation (in degrees), on the Y-axis, this entity can rotate its head while trying to look at the target.
*/
"y_max_head_rotation"?:number;
};
export type DFH={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description Time in seconds the mob has to wait before using the goal again.
*/
"cooldown_time"?:number;
/**
*@default 1
*@description Amount of time in seconds that the entity will chat with another entity.
*/
"duration"?:number;
/**
*@default 2
*@description The distance from its partner that this entity will mingle. If the entity type is not the same as the entity, this value needs to be identical on both entities.
*/
"mingle_distance"?:number;
/**
*@description The entity type that this entity is allowed to mingle with.
*/
"mingle_partner_type"?:Array<string>|string;
};
export type DFI={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description The distance at which this mob wants to be away from its target.
*/
"target_dist"?:number;
/**
*@description If true, this mob will chase after the target as long as it's a valid target.
*/
"track_target"?:boolean;
};
export type DFJ={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@default 8
*@description The cooldown time in seconds before the goal can be reused after pathfinding fails.
*/
"timeout_cooldown"?:number;
};
export type DGA={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@default 0.5
*@description The radius away from the target block to count as reaching the goal.
*/
"goal_radius"?:number;
/**
*@description The amount of times to try finding a random outdoors position before failing.
*/
"search_count"?:integer;
/**
*@description The y range to search for an outdoors position for.
*/
"search_height"?:integer;
/**
*@description The x and z range to search for an outdoors position for.
*/
"search_range"?:integer;
/**
*@default 8000000
*@description The cooldown time in seconds before the goal can be reused after pathfinding fails.
*/
"timeout_cooldown"?:number;
};
export type DGB={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description If true, the mob will only move through the village during night time.
*/
"only_at_night"?:boolean;
};
export type DGC={
"priority"?:CID;
/**
*@default 0.5
*@description Distance in blocks within the mob considers it has reached the goal. This is the "wiggle room" to stop the AI from bouncing back and forth trying to reach a specific spot
*/
"goal_radius"?:number;
/**
*@description Event to run on completing a stay of stay_duration at the block.
*/
"on_stay_completed"?:Array<BAA>|BAA;
/**
*@description Event to run on block reached.
*/
"on_reach"?:Array<BAA>|BAA;
/**
*@default 1
*@description Chance to start the behavior (applied after each random tick_interval).
*/
"start_chance"?:number;
/**
*@description The distance in blocks that the mob will look for the block.
*/
"search_range"?:integer;
/**
*@default 1
*@description The height in blocks that the mob will look for the block.
*/
"search_height"?:integer;
/**
*@description Number of ticks needed to complete a stay at the block.
*/
"stay_duration"?:number;
/**
*@default "nearest"
*@description Kind of block to find fitting the specification. Valid values are "random" and "nearest".
*/
"target_selection_method"?:string;
/**
*@default [0,0,0]
*@description Offset to add to the selected target position.
*/
"target_offset"?:Array<JsonType>;
/**
*@description Block types to move to.
*/
"target_blocks"?:Array<J>;
/**
*@description Filters to apply on the target blocks. Target blocks are only valid if the filters are true.
*/
"target_block_filters"?:BG;
/**
*@default 20
*@description Average interval in ticks to try to run this behavior.
*/
"tick_interval"?:integer;
};
export type DGD={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@default 0.5
*@description Distance in blocks within the mob considers it has reached the goal. This is the `wiggle room` to stop the AI from bouncing back and forth trying to reach a specific spot
*/
"goal_radius"?:number;
/**
*@default 10
*@description The number of blocks each tick that the mob will check within it's search range and height for a valid block to move to. A value of 0 will have the mob check every block within range in one tick
*/
"search_count"?:integer;
/**
*@default 1
*@description Height in blocks the mob will look for land to move towards.
*/
"search_height"?:integer;
/**
*@description The distance in blocks it will look for land to move towards.
*/
"search_range"?:integer;
};
export type DGE={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@default 0.5
*@description Distance in blocks within the mob considers it has reached the goal. This is the `wiggle room` to stop the AI from bouncing back and forth trying to reach a specific spot
*/
"goal_radius"?:number;
/**
*@default 10
*@description The number of blocks each tick that the mob will check within it's search range and height for a valid block to move to. A value of 0 will have the mob check every block within range in one tick
*/
"search_count"?:integer;
/**
*@default 1
*@description Height in blocks the mob will look for lava to move towards.
*/
"search_height"?:integer;
/**
*@description The distance in blocks it will look for lava to move towards.
*/
"search_range"?:integer;
};
export type DGF={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@default 0.5
*@description Distance in blocks within the mob considers it has reached the goal. This is the `wiggle room` to stop the AI from bouncing back and forth trying to reach a specific spot
*/
"goal_radius"?:number;
/**
*@default 10
*@description The number of blocks each tick that the mob will check within it's search range and height for a valid block to move to. A value of 0 will have the mob check every block within range in one tick
*/
"search_count"?:integer;
/**
*@default 1
*@description Height in blocks the mob will look for lava to move towards.
*/
"search_height"?:integer;
/**
*@description The distance in blocks it will look for lava to move towards.
*/
"search_range"?:integer;
/**
*@default "Any"
*@description The material type of the liquid block to find. Valid values are 'Any', 'Water', and 'Lava'.
*/
"material_type"?:string;
};
export type DGG={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description Tells the goal what POI type it should be looking for.
*/
"poi_type"?:string;
};
export type DGH={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@default 16
*@description Defines the distance from the mob, in blocks, that the block to move to will be chosen.
*/
"block_distance"?:number;
/**
*@description Defines the distance in blocks the mob has to be from the block for the movement to be finished.
*/
"within_radius"?:number;
};
export type DGI={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description Time in seconds the mob has to wait before using the goal again.
*/
"cooldown_time"?:number;
/**
*@default 0.5
*@description Distance in blocks within the mob considers it has reached the goal. This is the `wiggle room` to stop the AI from bouncing back and forth trying to reach a specific spot
*/
"goal_radius"?:number;
/**
*@description The distance in blocks to search for villages. If <= 0, find the closest village regardless of distance.
*/
"search_range"?:integer;
};
export type DGJ={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description The distance in blocks it will look for water to move towards.
*/
"search_range"?:integer;
/**
*@default 1
*@description Height in blocks the mob will look for water to move towards.
*/
"search_height"?:integer;
/**
*@default 10
*@description The number of blocks each tick that the mob will check within it's search range and height for a valid block to move to. A value of 0 will have the mob check every block within range in one tick
*/
"search_count"?:integer;
/**
*@default 0.5
*@description Distance in blocks within the mob considers it has reached the goal. This is the `wiggle room` to stop the AI from bouncing back and forth trying to reach a specific spot
*/
"goal_radius"?:number;
};
export type DHA={
"priority"?:CID;
"speed_multiplier"?:CJA;
};
export type DHB={
"priority"?:CID;
"speed_multiplier"?:CJA;
};
export type DHC={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description UNDOCUMENTED: control flags.
*/
"control_flags"?:Array<string>;
};
export type DHD={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description Defines the radius in blocks that the mob tries to be from the target. A value of 0 means it tries to occupy the same block as the target
*/
"within_radius"?:number;
};
export type DHE={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description Maximum time in seconds the mob has to wait before using the goal again.
*/
"cooldown_max"?:number;
/**
*@description Minimum time in seconds the mob has to wait before using the goal again.
*/
"cooldown_min"?:number;
/**
*@default 6
*@description The block distance in x and z that will be checked for mobs that this mob detects.
*/
"mob_detect_dist"?:number;
/**
*@default 6
*@description The block distance in y that will be checked for mobs that this mob detects.
*/
"mob_detect_height"?:number;
/**
*@description The filters that need to be met for the nap to take place.
*/
"can_nap_filters"?:BG;
/**
*@description Filters that can trigger the entity to wake up from it nap.
*/
"wake_mob_exceptions"?:BG;
};
export type DHF_entity_type={
/**
*@description Conditions that make this target a valid type.
*/
"filters"?:BG;
/**
*@default 16
*@description To be a valid target choice, the target type cannot be farther away from this entity than `max_dist`.
*/
"max_dist"?:number;
/**
*@description Determines if target-validity requires this entity to be in range only, or both in range and in sight.
*/
"must_see"?:boolean;
/**
*@default 3
*@description Time (in seconds) the target must not be seen by this entity to become invalid. Used only if `must_see` is true.
*/
"must_see_forget_duration"?:boolean;
[k:string]:any;
};
export type DHF={
"priority"?:CID;
/**
*@description Filters which types of targets are valid for this entity
*/
"entity_types"?:CIG;
/**
*@description Time range (in seconds) between searching for an attack target, range is in (0, `attack_interval`]. Only used if `attack_interval` is greater than 0, otherwise `scan_interval` is used.
*/
"attack_interval"?:integer;
/**
*@description Alias for `attack_interval`; provides the same functionality as `attack_interval`.
*/
"attack_interval_min"?:number;
/**
*@description If true, this entity can attack its owner.
*/
"attack_owner"?:boolean;
/**
*@description If true, this entity requires a path to the target.
*/
"must_reach"?:boolean;
/**
*@description Determines if target-validity requires this entity to be in range only, or both in range and in sight.
*/
"must_see"?:boolean;
/**
*@default 3
*@description Time (in seconds) the target must not be seen by this entity to become invalid. Used only if `must_see` is true.
*/
"must_see_forget_duration"?:number;
/**
*@description Time (in seconds) this entity can continue attacking the target after the target is no longer valid.
*/
"persist_time"?:number;
/**
*@description Allows the attacking entity to update the nearest target, otherwise a target is only reselected after each `scan_interval` or `attack_interval`.
*/
"reselect_targets"?:boolean;
/**
*@default 10
*@description If `attack_interval` is 0 or isn't declared, then between attacks: scanning for a new target occurs every amount of ticks equal to `scan_interval`, minimum value is 1. Values under 10 can affect performance.
*/
"scan_interval"?:integer;
/**
*@description Allows the actor to be set to persist upon targeting a player.
*/
"set_persistent"?:boolean;
/**
*@default 0.7
*@description Multiplied with the target's armor coverage percentage to modify `max_dist` when detecting an invisible target.
*/
"target_invisible_multiplier"?:number;
/**
*@default -1
*@description Maximum vertical target-search distance, if it's greater than the target type's `max_dist`. A negative value defaults to `entity_types` greatest `max_dist`.
*/
"target_search_height"?:number;
/**
*@default 0.8
*@description Multiplied with the target type's `max_dist` when trying to detect a sneaking target.
*/
"target_sneak_visibility_multiplier"?:number;
/**
*@description Maximum distance this entity can be from the target when following it, otherwise the target becomes invalid. This value is only used if the entity doesn't declare `minecraft:follow_range`.
*/
"within_radius"?:number;
};
export type DHG={
"priority"?:CID;
/**
*@description List of entity types that this mob considers valid targets
*/
"entity_types"?:CIG;
/**
*@description Time in seconds before selecting a target.
*/
"attack_interval"?:integer;
/**
*@description If true, only entities that this mob can path to can be selected as targets.
*/
"must_reach"?:boolean;
/**
*@description If true, only entities in this mob's viewing range can be selected as targets.
*/
"must_see"?:boolean;
/**
*@default 3
*@description Determines the amount of time in seconds that this mob will look for a target before forgetting about it and looking for a new one when the target isn't visible any more.
*/
"must_see_forget_duration"?:number;
/**
*@description Time in seconds for a valid target to stay targeted when it becomes and invalid target.
*/
"persist_time"?:number;
/**
*@description If true, the target will change to the current closest entity whenever a different entity is closer.
*/
"reselect_targets"?:boolean;
/**
*@description If true, the mob will stop being targeted if it stops meeting any conditions.
*/
"reevaluate_description"?:boolean;
/**
*@default 10
*@description How many ticks to wait between scanning for a target.
*/
"scan_interval"?:integer;
/**
*@description Allows the actor to be set to persist upon targeting a player.
*/
"set_persistent"?:boolean;
/**
*@default -1
*@description Height in blocks to search for a target mob. -1.0f means the height does not matter.
*/
"target_search_height"?:number;
/**
*@description Distance in blocks that the target can be within to launch an attack.
*/
"within_radius"?:number;
};
export type DHH={
"priority"?:CID;
"speed_multiplier"?:CJA;
};
export type DHI={
"priority"?:CID;
/**
*@default 1
*@description Time (in seconds) between attacks.
*/
"cooldown_time"?:number;
/**
*@default 15
*@description Max distance from the target, this entity will use this attack behavior.
*/
"max_distance"?:number;
/**
*@default 15
*@description Max distance from the target, this entity starts sneaking.
*/
"max_sneak_range"?:number;
/**
*@default 4
*@description Max distance from the target, this entity starts sprinting (sprinting takes priority over sneaking).
*/
"max_sprint_range"?:number;
/**
*@default 2
*@description Used with the base size of the entity to determine minimum target-distance before trying to deal attack damage.
*/
"reach_multiplier"?:number;
/**
*@default 0.6
*@description Modifies the attacking entity's movement speed while sneaking.
*/
"sneak_speed_multiplier"?:number;
/**
*@default 1.33
*@description Modifies the attacking entity's movement speed while sprinting.
*/
"sprint_speed_multiplier"?:number;
/**
*@default 0.8
*@description Modifies the attacking entity's movement speed when not sneaking or sprinting, but still within attack range.
*/
"walk_speed_multiplier"?:number;
/**
*@default 30
*@description Maximum rotation (in degrees), on the X-axis, this entity can rotate while trying to look at the target.
*/
"x_max_rotation"?:number;
/**
*@default 30
*@description Maximum rotation (in degrees), on the Y-axis, this entity can rotate its head while trying to look at the target.
*/
"y_max_head_rotation"?:number;
};
export type DHJ={
"priority"?:CID;
/**
*@description Percent chance that the mob will start this goal from 0.0 to 1.0 (where 1.0 = 100%).
*/
"chance_to_start"?:number;
/**
*@description Conditions that need to be met for the behavior to start.
*/
"filters"?:BG;
/**
*@default 30
*@description Maximum rotation (in degrees), on the Y-axis, this entity can rotate its head while trying to look at the target.
*/
"max_head_rotation_y"?:number;
/**
*@default 20
*@description The max amount of time (in seconds) that the mob will offer the flower for before exiting the Goal.
*/
"max_offer_flower_duration"?:number;
/**
*@default 30
*@description Maximum rotation (in degrees), on the X-axis, this entity can rotate while trying to look at the target.
*/
"max_rotation_x"?:number;
/**
*@default [6,2,6]
*@description The dimensions of the AABB used to search for a potential mob to offer flower to.
*/
"search_area"?:CEA;
};
export type DIA={
"priority"?:CID;
/**
*@default true
*@description If true, the mob will close the door after opening it and going through it.
*/
"close_door_after"?:boolean;
};
export type DIB={
"priority"?:CID;
/**
*@description List of entity types that this mob can target if they hurt their owner.
*/
"entity_types"?:CIG;
};
export type DIC={
"priority"?:CID;
/**
*@description List of entity types that this entity can target if the potential target is hurt by this mob's owner.
*/
"entity_types"?:CIG;
};
export type DID={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@default [["all"]]
*@description The list of Entity Damage Sources that will cause this mob to panic.
*/
"damage_sources"?:Array<CJ>;
/**
*@description If true, this mob will not stop panicking until it can't move anymore or the goal is removed from it.
*/
"force"?:boolean;
/**
*@description If true, the mob will not panic in response to damage from other mobs. This overrides the damage types in `damage_sources`
*/
"ignore_mob_damage"?:boolean;
/**
*@description If true, the mob will prefer water over land.
*/
"prefer_water"?:boolean;
/**
*@description The sound event to play when this mob is in panic.
*/
"panic_sound"?:BE;
/**
*@description The range of time in seconds to randomly wait before playing the sound again.
*/
"sound_interval"?:{
/**
*@description The minimum time in seconds before the `panic_sound` plays.
*/
"range_min"?:number;
/**
*@description The maximum time in seconds before the `panic_sound` plays.
*/
"range_max"?:number;
};
};
export type DIE={
"priority"?:CID;
};
export type DIF={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@default 0.5
*@description Distance in blocks within the mob considers it has reached the goal. This is the "wiggle room" to stop the AI from bouncing back and forth trying to reach a specific spot
*/
"goal_radius"?:number;
/**
*@default 1
*@description Height in blocks from the owner the pet can be to sleep with owner.
*/
"search_height"?:integer;
/**
*@default 10
*@description The radius that the mob will search for an owner to curl up with.
*/
"search_radius"?:integer;
/**
*@default 10
*@description The range that the mob will search for an owner to curl up with.
*/
"search_range"?:integer;
};
export type DIG={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description If true, the mob can pickup any item.
*/
"can_pickup_any_item"?:boolean;
/**
*@default true
*@description If true, the mob can pickup items to its hand or armor slots.
*/
"can_pickup_to_hand_or_equipment"?:boolean;
/**
*@default 20
*@description Amount of time an offended entity needs before being willing to pick up items.
*/
"cooldown_after_being_attacked"?:number;
/**
*@description List of items this mob will not pick up.
*/
"excluded_items"?:Array<J>;
/**
*@default 0.5
*@description Distance in blocks within the mob considers it has reached the goal. This is the `wiggle room` to stop the AI from bouncing back and forth trying to reach a specific spot.
*/
"goal_radius"?:number;
/**
*@description Maximum distance this mob will look for items to pick up.
*/
"max_dist"?:number;
/**
*@description Height in blocks the mob will look for items to pick up.
*/
"search_height"?:number;
/**
*@description If true, depending on the difficulty, there is a random chance that the mob may not be able to pickup items.
*/
"pickup_based_on_chance"?:boolean;
/**
*@description If true, the mob will pickup the same item as the item in its hand.
*/
"pickup_same_items_as_in_hand"?:boolean;
/**
*@description If true, this mob will chase after the target as long as it's a valid target.
*/
"track_target"?:boolean;
};
export type DIH={
"priority"?:CID;
/**
*@default true
*@description Whether the mob will receive the regeneration effect while playing dead.
*/
"apply_regeneration"?:boolean;
/**
*@default 1
*@description The amount of time the mob will remain playing dead (in seconds).
*/
"duration"?:number;
/**
*@description The list of other triggers that are required for the mob to activate play dead.
*/
"filters"?:BG;
/**
*@description The amount of health at which damage will cause the mob to play dead.
*/
"force_below_health"?:integer;
/**
*@default 1
*@description The likelihood of this goal starting upon taking damage.
*/
"random_start_chance"?:number;
/**
*@description The range of damage that may cause the goal to start depending on randomness. Damage taken below the min will never cause the goal to start. Damage taken above the max will always cause the goal to start.
*/
"random_damage_range"?:Array<JsonType>;
/**
*@default ["all"]
*@description The list of Entity Damage Sources that will cause this mob to play dead.
*/
"damage_sources"?:CJ|Array<CJ>;
};
export type DII={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description Percent chance that the mob will start this goal, from 0 to 1.
*/
"chance_to_start"?:number;
/**
*@default 2
*@description The distance (in blocks) that the mob tries to be in range of the friend it's following.
*/
"follow_distance"?:integer;
/**
*@default [6,3,6]
*@description The dimensions of the AABB used to search for a potential friend to play with.
*/
"friend_search_area"?:CEA;
/**
*@description The entity type(s) to consider when searching for a potential friend to play with.
*/
"friend_types"?:Array<JsonType>;
/**
*@default 50
*@description The max amount of seconds that the mob will play for before exiting the Goal.
*/
"max_play_duration_seconds"?:number;
/**
*@default 3
*@description The height (in blocks) that the mob will search within to find a random position position to move to. Must be at least 1.
*/
"random_pos_search_height"?:integer;
/**
*@default 16
*@description The distance (in blocks) on ground that the mob will search within to find a random position to move to. Must be at least 1.
*/
"random_pos_search_range"?:integer;
};
export type DIJ={
"priority"?:CID;
};
export type DJA={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description Blocks that the mob is looking for to eat.
*/
"blocks"?:Array<BBE>;
/**
*@default 2
*@description Time in seconds between each time it eats.
*/
"eat_delay"?:integer;
/**
*@default 100
*@description Amount of time in seconds before this mob wants to eat again.
*/
"full_delay"?:integer;
/**
*@description Time in seconds before starting to eat/raid once it arrives at it.
*/
"initial_eat_delay"?:integer;
/**
*@default 0.5
*@description Distance in blocks within the mob considers it has reached the goal. This is the `wiggle room` to stop the AI from bouncing back and forth trying to reach a specific spot
*/
"goal_radius"?:number;
/**
*@default 6
*@description Maximum number of things this entity wants to eat.
*/
"max_to_eat"?:integer;
/**
*@description Distance in blocks the mob will look for crops to eat.
*/
"search_range"?:integer;
/**
*@description Height in blocks the mob will look for crops to eat.
*/
"search_height"?:integer;
};
export type DJB={
"priority"?:CID;
/**
*@default 0.333333
*@description The modifier to knockback that babies have.
*/
"baby_knockback_modifier"?:number;
/**
*@default [10,20]
*@description Minimum and maximum cooldown time-range (positive, in seconds) between each attempted ram attack.
*/
"cooldown_range"?:BAD;
/**
*@default 5
*@description The force of the knockback of the ram attack.
*/
"knockback_force"?:number;
/**
*@default 0.1
*@description The height of the knockback of the ram attack.
*/
"knockback_height"?:number;
/**
*@description The minimum distance at which the mob can start a ram attack.
*/
"min_ram_distance"?:number;
/**
*@description The event to trigger when attacking.
*/
"on_start"?:BAA;
/**
*@description The sound to play when an entity is about to perform a ram attack.
*/
"pre_ram_sound"?:BE;
/**
*@description The distance at which the mob start to run with ram speed.
*/
"ram_distance"?:number;
/**
*@description The sound to play when an entity is impacting on a ram attack.
*/
"ram_impact_sound"?:BE;
/**
*@default 2
*@description Sets the entity's speed when charging toward the target.
*/
"ram_speed"?:number;
/**
*@default 1
*@description Sets the entity's speed when running toward the target.
*/
"run_speed"?:number;
/**
*@description The event to trigger when attacking.
*/
"trigger"?:BAA;
};
export type DJC={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description Time in seconds the mob has to wait before using the goal again.
*/
"cooldown_time"?:number;
/**
*@default 120
*@description A random value to determine when to randomly move somewhere. This has a 1/interval chance to choose this goal
*/
"interval"?:integer;
/**
*@default 10
*@description Distance in blocks on ground that the mob will look for a new spot to move to. Must be at least 1
*/
"xz_dist"?:integer;
/**
*@default 7
*@description Distance in blocks that the mob will look up or down for a new spot to move to. Must be at least 1
*/
"y_dist"?:integer;
};
export type DJD={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description If true, the mob will avoid blocks that cause damage.
*/
"avoid_damage_blocks"?:boolean;
/**
*@default true
*@description If true, the mob can stop flying and land on a tree instead of the ground.
*/
"can_land_on_trees"?:boolean;
/**
*@default 10
*@description Distance in blocks on ground that the mob will look for a new spot to move to. Must be at least 1
*/
"xz_dist"?:integer;
/**
*@default 7
*@description Distance in blocks that the mob will look up or down for a new spot to move to. Must be at least 1
*/
"y_dist"?:integer;
/**
*@description Height in blocks to add to the selected target position.
*/
"y_offset"?:integer;
};
export type DJE={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description The height above the surface which the mob will try to maintain.
*/
"hover_height"?:Array<JsonType>;
/**
*@default 120
*@description A random value to determine when to randomly move somewhere. This has a 1/interval chance to choose this goal
*/
"interval"?:integer;
/**
*@default 10
*@description Distance in blocks on ground that the mob will look for a new spot to move to. Must be at least 1
*/
"xz_dist"?:integer;
/**
*@default 7
*@description Distance in blocks that the mob will look up or down for a new spot to move to. Must be at least 1
*/
"y_dist"?:integer;
/**
*@description Height in blocks to add to the selected target position.
*/
"y_offset"?:number;
};
export type DJF={
"priority"?:CID;
/**
*@description If the goal should continue to be used as long as the mob is leashed.
*/
"continue_if_leashed"?:boolean;
/**
*@default 30
*@description The rightmost angle a mob can look at on the horizontal plane with respect to its initial facing direction.
*/
"max_angle_of_view_horizontal"?:number;
/**
*@default 2
*@description The max amount of unique looks a mob will have while looking around.
*/
"max_look_count"?:integer;
/**
*@default 40
*@description The max amount of time (in ticks) a mob will stay looking at a direction while looking around.
*/
"max_look_time"?:integer;
/**
*@default -30
*@description The leftmost angle a mob can look at on the horizontal plane with respect to its initial facing direction.
*/
"min_angle_of_view_horizontal"?:number;
/**
*@default 1
*@description The min amount of unique looks a mob will have while looking around.
*/
"min_look_count"?:integer;
/**
*@default 20
*@description The min amount of time (in ticks) a mob will stay looking at a direction while looking around.
*/
"min_look_time"?:integer;
/**
*@default 0.02
*@description The probability of randomly looking around/sitting.
*/
"probability"?:number;
/**
*@description The cooldown in seconds before the goal can be used again.
*/
"random_look_around_cooldown"?:integer;
};
export type DJG={
"priority"?:CID;
/**
*@description The range of time in seconds the mob will stay looking in a random direction before looking elsewhere
*/
"look_time"?:DEG;
/**
*@default 30
*@description The rightmost angle a mob can look at on the horizontal plane with respect to its initial facing direction.
*/
"max_angle_of_view_horizontal"?:integer;
/**
*@default -30
*@description The leftmost angle a mob can look at on the horizontal plane with respect to its initial facing direction.
*/
"min_angle_of_view_horizontal"?:integer;
};
export type DJH={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description Time in seconds the mob has to wait before using the goal again.
*/
"cooldown"?:number;
/**
*@description Time in seconds the mob has to wait before using the goal again.
*/
"cooldown_time"?:number;
/**
*@default 10
*@description The minimum amount of time in seconds before the mob can stand back up.
*/
"min_sit_time"?:number;
/**
*@default 0.1
*@description This is the chance that the mob will start this goal, from 0 to 1.
*/
"start_chance"?:number;
/**
*@default 0.3
*@description This is the chance that the mob will stop this goal, from 0 to 1.
*/
"stop_chance"?:number;
};
export type DJI={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@default 120
*@description A random value to determine when to randomly move somewhere. This has a 1/interval chance to choose this goal
*/
"interval"?:integer;
/**
*@default 10
*@description Distance in blocks on ground that the mob will look for a new spot to move to. Must be at least 1
*/
"xz_dist"?:integer;
/**
*@default 7
*@description Distance in blocks that the mob will look up or down for a new spot to move to. Must be at least 1
*/
"y_dist"?:integer;
};
export type DJJ={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@default true
*@description If true, the mob will avoid surface water blocks by swimming below them.
*/
"avoid_surface"?:boolean;
/**
*@default 120
*@description A random value to determine when to randomly move somewhere. This has a 1/interval chance to choose this goal
*/
"interval"?:integer;
/**
*@default 10
*@description Distance in blocks on ground that the mob will look for a new spot to move to. Must be at least 1
*/
"xz_dist"?:integer;
/**
*@default 7
*@description Distance in blocks that the mob will look up or down for a new spot to move to. Must be at least 1
*/
"y_dist"?:integer;
};
export type EAA={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description Alternative to "attack_interval_min" & "attack_interval_max". Consistent reload-time (in seconds), when not using a charged shot. Does not scale with target-distance.
*/
"attack_interval"?:number;
/**
*@description Maximum bound for reload-time range (in seconds), when not using a charged shot. Reload-time range scales with target-distance.
*/
"attack_interval_max"?:number;
/**
*@description Minimum bound for reload-time range (in seconds), when not using a charged shot. Reload-time range scales with target-distance.
*/
"attack_interval_min"?:number;
/**
*@description Minimum distance to target before this entity will attempt to shoot.
*/
"attack_radius"?:number;
/**
*@description Minimum distance the target can be for this mob to fire. If the target is closer, this mob will move first before firing
*/
"attack_radius_min"?:number;
/**
*@description Time (in seconds) between each individual shot when firing a burst of shots from a charged up attack.
*/
"burst_interval"?:number;
/**
*@default 1
*@description Number of shots fired every time the attacking entity uses a charged up attack.
*/
"burst_shots"?:integer;
/**
*@description Time (in seconds, then add "charge_shoot_trigger"), before a charged up attack is done charging. Charge-time decays while target is not in sight.
*/
"charge_charged_trigger"?:number;
/**
*@description Amount of time (in seconds, then doubled) a charged shot must be charging before reloading burst shots. Charge-time decays while target is not in sight.
*/
"charge_shoot_trigger"?:number;
/**
*@default 90
*@description Field of view (in degrees) when using sensing to detect a target for attack.
*/
"ranged_fov"?:number;
/**
*@description Allows the actor to be set to persist upon targeting a player.
*/
"set_persistent"?:boolean;
/**
*@description If a swing animation (using variable.attack_time) exists, this causes the actor to swing their arm(s) upon firing the ranged attack.
*/
"swing"?:boolean;
/**
*@default 1
*@description Minimum amount of time (in seconds) the attacking entity needs to see the target before moving toward it.
*/
"target_in_sight_time"?:number;
/**
*@default 30
*@description Maximum rotation (in degrees), on the X-axis, this entity can rotate while trying to look at the target.
*/
"x_max_rotation"?:number;
/**
*@default 30
*@description Maximum rotation (in degrees), on the Y-axis, this entity can rotate its head while trying to look at the target.
*/
"y_max_head_rotation"?:number;
};
export type EAB={
"priority"?:CID;
};
export type EAC={
"priority"?:CID;
};
export type EAD={
"priority"?:CID;
};
export type EAE={
"priority"?:CID;
/**
*@description Vertical offset from the liquid.
*/
"liquid_y_offset"?:number;
/**
*@description Displacement for how much the entity will move up in the vertical axis.
*/
"rise_delta"?:number;
/**
*@description Displacement for how much the entity will move down in the vertical axis.
*/
"sink_delta"?:number;
};
export type EAF={
"priority"?:CID;
/**
*@description Goal duration in seconds.
*/
"duration"?:number;
};
export type EAG={
"priority"?:CID;
/**
*@minimum 0
*@description The probability that the mob will use the goal.
*/
"probability"?:number;
};
export type EAH={
"priority"?:CID;
"speed_multiplier"?:CJA;
};
export type EAI={
"priority"?:CID;
/**
*@description The interval in which a sound will play when active in a 1/delay chance to kick off.
*/
"sound_interval"?:integer;
};
export type EAJ_sequence=Array<{
/**
*@description Amount of time in seconds before starting this step.
*/
"base_delay"?:number;
/**
*@description The event to send to the entity.
*/
"event"?:string;
/**
*@description The sound event to play when this step happens.
*/
"sound_event"?:BE;
}>;
export type EAJ={
"priority"?:CID;
/**
*@description Time in seconds for the entire event sending process.
*/
"cast_duration"?:number;
/**
*@default true
*@description If true, the mob will face the entity it sends an event to.
*/
"look_at_target"?:boolean;
/**
*@description List of spells for the mob to use.
*/
"event_choices"?:Array<{
/**
*@description The minimum distance in blocks the target must be for this spell to be cast.
*@minimum 0
*/
"min_activation_range"?:number;
/**
*@description The maxmimum distance in blocks the target must be for this spell to be cast.
*@minimum 0
*/
"max_activation_range"?:number;
/**
*@description Time in seconds before the mob can use this spell again.
*/
"cooldown_time"?:number;
/**
*@description Time in seconds the spell casting will take.
*/
"cast_duration"?:number;
"filters"?:BG;
/**
*@format color-hex
*@description The color of the particles for this spell.
*/
"particle_color"?:string;
/**
*@description The weight of this spell. Controls how likely this spell will be picked
*/
"weight"?:integer;
/**
*@description The sound event to play when using this spell.
*/
"start_sound_event"?:BE;
"sequence"?:EAJ_sequence;
}>;
/**
*@description List of steps for the spell.
*/
"sequence"?:EAJ_sequence;
};
export type EBA={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description List of entities this mob will share items with.
*/
"entity_types"?:CIG;
/**
*@default 0.5
*@description Distance in blocks within the mob considers it has reached the goal. This is the `wiggle room` to stop the AI from bouncing back and forth trying to reach a specific spot
*/
"goal_radius"?:number;
/**
*@description Maximum distance in blocks this mob will look for entities to share items with.
*/
"max_dist"?:number;
};
export type EBB={
"priority"?:CID;
};
export type EBC={
"priority"?:CID;
};
export type EBD={
"priority"?:CID;
/**
*@default 1
*@description Amount of time in seconds the trap exists. After this amount of time is elapsed, the trap is removed from the world if it hasn't been activated
*/
"duration"?:number;
/**
*@description Distance in blocks that the player has to be within to trigger the horse trap.
*/
"within_radius"?:number;
};
export type EBE={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description If true, the mob will be able to use the sleep goal if riding something.
*/
"can_sleep_while_riding"?:boolean;
/**
*@description Time in seconds the mob has to wait before using the goal again.
*/
"cooldown_time"?:number;
/**
*@default 1
*@description The height of the mob's collider while sleeping.
*/
"sleep_collider_height"?:number;
/**
*@default 1
*@description The width of the mob's collider while sleeping.
*/
"sleep_collider_width"?:number;
/**
*@default 1
*@description The y offset of the mob's collider while sleeping.
*/
"sleep_y_offset"?:number;
/**
*@default 8
*@description The cooldown time in seconds before the goal can be reused after a internal failure or timeout condition.
*/
"timeout_cooldown"?:number;
};
export type EBF={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description Allows the actor to be set to persist upon targeting a player.
*/
"set_persistent"?:boolean;
/**
*@default 10
*@description Maximum rotation (in degrees), on the X-axis, this entity can rotate while trying to look at the target.
*/
"x_max_rotation"?:number;
/**
*@default 10
*@description Maximum rotation (in degrees), on the Y-axis, this entity can rotate while trying to look at the target.
*/
"y_max_rotation"?:number;
};
export type EBG={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@default 0.8
*@description Percent chance a slime or magma cube has to jump while in water / lava.
*/
"jump_chance_percentage"?:number;
};
export type EBH={
"priority"?:CID;
"speed_multiplier"?:CJA;
};
export type EBI={
"priority"?:CID;
/**
*@default 3
*@description Additional time (in whole seconds), chosen randomly in the range of [0, "add_random_time_range"], to add to "min_change_direction_time".
*/
"add_random_time_range"?:integer;
/**
*@default 2
*@description Constant minimum time (in seconds) to wait before choosing a new direction.
*/
"min_change_direction_time"?:number;
/**
*@default 360
*@description Maximum rotation angle range (in degrees) when randomly choosing a new direction.
*/
"turn_range"?:integer;
};
export type EBJ={
"priority"?:CID;
/**
*@description Items that we are interested in snacking on.
*/
"items"?:Array<J>|J;
/**
*@default 7.5
*@description The cooldown time in seconds before the mob is able to snack again.
*/
"snacking_cooldown"?:number;
/**
*@default 0.5
*@description The minimum time in seconds before the mob is able to snack again.
*/
"snacking_cooldown_min"?:number;
/**
*@description This is the chance that the mob will stop snacking, from 0 to 1.
*/
"snacking_stop_chance"?:number;
};
export type ECA={
"priority"?:CID;
/**
*@description Time in seconds the mob has to wait before using the goal again.
*/
"cooldown_time"?:number;
/**
*@default 1
*@description The probability that the mob will drop an item when it sneezes.
*/
"drop_item_chance"?:number;
/**
*@description List of entity types this mob will startle (cause to jump) when it sneezes.
*/
"entity_types"?:CIG;
/**
*@default "loot_tables/empty.json"
*@description Loot table to select dropped items from.
*@pattern ^loot_tables/.*.json$
*/
"loot_table"?:string;
/**
*@description Sound to play when the sneeze is about to happen.
*/
"prepare_sound"?:BE;
/**
*@default 1
*@description The time in seconds that the mob takes to prepare to sneeze (while the prepare_sound is playing).
*/
"prepare_time"?:number;
/**
*@default 0.02
*@minimum 0
*@maximum 1
*@description The probability of sneezing. A value of 1.00 is 100%
*/
"probability"?:number;
/**
*@description Sound to play when the sneeze occurs.
*/
"sound"?:BE;
/**
*@description Distance in blocks that mobs will be startled.
*/
"within_radius"?:number;
};
export type ECB={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@default 5
*@description Cooldown in seconds required after using this attack until the entity can use sonic boom again.
*/
"attack_cooldown"?:number;
/**
*@default 30
*@description Attack damage of the sonic boom.
*/
"attack_damage"?:number;
/**
*@default 15
*@description Horizontal range (in blocks) at which the sonic boom can damage the target.
*/
"attack_range_horizontal"?:number;
/**
*@default 20
*@description Vertical range (in blocks) at which the sonic boom can damage the target.
*/
"attack_range_vertical"?:number;
/**
*@description Sound event for the attack.
*/
"attack_sound"?:BE;
/**
*@description Sound event for the charge up.
*/
"charge_sound"?:BE;
/**
*@default 3
*@description Goal duration in seconds.
*/
"duration"?:number;
/**
*@default 1.7
*@description Duration in seconds until the attack sound is played.
*/
"duration_until_attack_sound"?:number;
/**
*@description Height cap of the attack knockback's vertical delta.
*/
"knockback_height_cap"?:number;
/**
*@description Horizontal strength of the attack's knockback applied to the attack target.
*/
"knockback_horizontal_strength"?:number;
/**
*@description Vertical strength of the attack's knockback applied to the attack target.
*/
"knockback_vertical_strength"?:number;
};
export type ECC={
"priority"?:CID;
};
export type ECD={
"priority"?:CID;
};
export type ECE={
"priority"?:CID;
};
export type ECF={
"priority"?:CID;
};
export type ECG={
"priority"?:CID;
};
export type ECH={
"priority"?:CID;
/**
*@default 2
*@description The amount of time the mob will be interested before pouncing. This happens when the mob is within range of pouncing
*/
"interest_time"?:number;
/**
*@default 0.8
*@description The distance in blocks the mob jumps in the direction of its target.
*/
"leap_distance"?:number;
/**
*@default 0.9
*@description The height in blocks the mob jumps when leaping at its target.
*/
"leap_height"?:number;
/**
*@default 10
*@description The maximum distance away a target can be before the mob gives up on stalking.
*/
"max_stalk_dist"?:number;
/**
*@default 5
*@description The maximum distance away from the target in blocks to begin pouncing at the target.
*/
"pounce_max_dist"?:number;
/**
*@description Allows the actor to be set to persist upon targeting a player.
*/
"set_persistent"?:boolean;
/**
*@default 1.2
*@description The movement speed in which you stalk your target.
*/
"stalk_speed"?:number;
/**
*@default 2
*@description The Maximum distance away from the target when landing from the pounce that will still result in damaging the target.
*/
"strike_dist"?:number;
/**
*@default 2
*@description The amount of time the mob will be stuck if they fail and land on a block they can be stuck on.
*/
"stuck_time"?:number;
/**
*@description The distance in blocks the mob jumps in the direction of their target.
*/
"leap_dist"?:number;
/**
*@description Filters to apply on the block the mob lands on to determine if it is valid for getting stuck.
*/
"stuck_blocks"?:BG;
};
export type ECI={
"priority"?:CID;
/**
*@description Sets the time an entity should stay near a noteblock after hearing it.
*/
"listen_time"?:integer;
/**
*@default 1
*@description Sets the entity's speed when moving toward the block.
*/
"speed"?:number;
/**
*@default 10
*@description Sets the distance the entity needs to be away from the block to attempt to start the goal.
*/
"start_distance"?:number;
/**
*@default 2
*@description Sets the distance from the block the entity will attempt to reach.
*/
"stop_distance"?:number;
};
export type ECJ={
"priority"?:CID;
};
export type EDA={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description Allows the entity to use this attack behavior, only once EVER.
*/
"attack_once"?:boolean;
/**
*@default "N/A"
*@description Defines the entity types this entity will attack.
*/
"attack_types"?:string;
/**
*@default 1
*@description Cooldown time (in seconds) between attacks.
*/
"cooldown_time"?:number;
/**
*@default 0.25
*@description Time (in seconds) to add to attack path recalculation when the target is beyond the "path_inner_boundary".
*/
"inner_boundary_time_increase"?:number;
/**
*@description Unused. No effect on "minecraft:behavior.melee_attack".
*/
"max_dist"?:number;
/**
*@default 0.55
*@description Maximum base time (in seconds) to recalculate new attack path to target (before increases applied).
*/
"max_path_time"?:number;
/**
*@default 90
*@description Field of view (in degrees) when using the sensing component to detect an attack target.
*/
"melee_fov"?:number;
/**
*@default 0.2
*@description Minimum base time (in seconds) to recalculate new attack path to target (before increases applied).
*/
"min_path_time"?:number;
/**
*@default 2
*@description Multiplied with the final AoE damage range to determine a no damage range. The stomp attack will go on cooldown if target is in this no damage range.
*/
"no_damage_range_multiplier"?:number;
/**
*@description Defines the event to trigger when this entity successfully attacks.
*/
"on_attack"?:BAA;
/**
*@default 0.5
*@description Time (in seconds) to add to attack path recalculation when the target is beyond the "path_outer_boundary".
*/
"outer_boundary_time_increase"?:number;
/**
*@default 0.75
*@description Time (in seconds) to add to attack path recalculation when this entity cannot move along the current path.
*/
"path_fail_time_increase"?:number;
/**
*@default 16
*@description Distance at which to increase attack path recalculation by "inner_boundary_tick_increase".
*/
"path_inner_boundary"?:number;
/**
*@default 32
*@description Distance at which to increase attack path recalculation by "outer_boundary_tick_increase".
*/
"path_outer_boundary"?:number;
/**
*@description This entity will have a 1 in N chance to stop it's current attack, where N = "random_stop_interval".
*/
"random_stop_interval"?:integer;
/**
*@default 2
*@description Used with the base size of the entity to determine minimum target-distance before trying to deal attack damage.
*/
"reach_multiplier"?:number;
/**
*@description Toggles (on/off) the need to have a full path from the entity to the target when using this melee attack behavior.
*/
"require_complete_path"?:boolean;
/**
*@description Allows the actor to be set to persist upon targeting a player.
*/
"set_persistent"?:boolean;
/**
*@default 2
*@description Multiplied with the base size of the entity to determine stomp AoE damage range.
*/
"stomp_range_multiplier"?:number;
/**
*@description Unused. No effect on "minecraft:behavior.melee_attack".
*/
"target_dist"?:number;
/**
*@description Allows the entity to track the attack target, even if the entity has no sensing.
*/
"track_target"?:boolean;
/**
*@default 30
*@description Maximum rotation (in degrees), on the X-axis, this entity can rotate while trying to look at the target.
*/
"x_max_rotation"?:number;
/**
*@default 30
*@description Maximum rotation (in degrees), on the Y-axis, this entity can rotate its head while trying to look at the target.
*/
"y_max_head_rotation"?:number;
};
export type EDB={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@default 0.5
*@description Distance in blocks within the mob considers it has reached the goal. This is the `wiggle room` to stop the AI from bouncing back and forth trying to reach a specific spot
*/
"goal_radius"?:number;
/**
*@default 120
*@description A random value to determine when to randomly move somewhere. This has a 1/interval chance to choose this goal
*/
"interval"?:integer;
/**
*@default 10
*@description The number of blocks each tick that the mob will check within it's search range and height for a valid block to move to. A value of 0 will have the mob check every block within range in one tick
*/
"search_count"?:integer;
/**
*@default 1
*@description Height in blocks the mob will look for turtle eggs to move towards.
*/
"search_height"?:integer;
/**
*@description The distance in blocks it will look for turtle eggs to move towards.
*/
"search_range"?:integer;
};
export type EDC={
"priority"?:CID;
/**
*@description Time in seconds the mob has to wait before using the goal again.
*/
"cooldown_time"?:number;
/**
*@default 0.5
*@description Distance in blocks within the mob considers it has reached the goal. This is the `wiggle room` to stop the AI from bouncing back and forth trying to reach a specific spot
*/
"goal_radius"?:number;
/**
*@description The distance in blocks to search for points inside villages. If <= 0, find the closest village regardless of distance.
*/
"search_range"?:integer;
/**
*@default 1
*@description Movement speed multiplier of the mob when using this AI Goal.
*/
"speed_multiplier"?:number;
/**
*@default 0.1
*@description This is the chance that the mob will start this goal, from 0 to 1.
*/
"start_chance"?:number;
};
export type EDD={
"priority"?:CID;
/**
*@description List of spells for the mob to use to summon entities.
*/
"summon_choices"?:Array<{
/**
*@description Time in seconds the spell casting will take.
*/
"cast_duration"?:number;
/**
*@description Time in seconds the mob has to wait before using the spell again.
*/
"cooldown_time"?:number;
/**
*@default true
*@description If true, the mob will do the casting animations and render spell particles.
*/
"do_casting"?:boolean;
"filters"?:BG;
/**
*@default -1
*@description Upper bound of the activation distance in blocks for this spell.
*/
"max_activation_range"?:number;
/**
*@default 1
*@description Lower bound of the activation distance in blocks for this spell.
*/
"min_activation_range"?:number;
/**
*@description The color of the particles for this spell.
*/
"particle_color"?:integer|string;
/**
*@description List of steps for the spell.
*/
"sequence"?:Array<{
/**
*@description Amount of time in seconds to wait before this step starts.
*/
"delay"?:number;
/**
*@description Amount of time in seconds before each entity is summoned in this step.
*/
"delay_per_summon"?:number;
/**
*@default -1
*@description Amount of time in seconds that the spawned entity will be alive for. A value of -1.0 means it will remain alive for as long as it can
*/
"entity_lifespan"?:number;
/**
*@description Amount of time in seconds to wait before this step starts.
*/
"base_delay"?:number;
/**
*@description The entity type of the entities we will spawn in this step.
*/
"entity_type"?:string;
/**
*@default 1
*@description Number of entities that will be spawned in this step.
*/
"num_entities_spawned"?:integer;
/**
*@default "line"
*@description The base shape of this step. Valid values are circle and line
*/
"shape"?:string;
/**
*@default 1
*@description The base size of the entity.
*/
"size"?:number;
/**
*@description The sound event to play for this step.
*/
"sound_event"?:BE;
/**
*@description Maximum number of summoned entities at any given time.
*/
"summon_cap"?:integer;
/**
*@description Maximum radius where the summon entities can spawn.
*/
"summon_cap_radius"?:number;
/**
*@default "self"
*@description The target of the spell. This is where the spell will start (line will start here, circle will be centered here)
*/
"target"?:string;
}>;
/**
*@description The sound event to play when using this spell.
*/
"start_sound_event"?:BE;
/**
*@description The weight of this spell. Controls how likely the mob is to choose this spell when casting one
*/
"weight"?:number;
}>;
};
export type EDE={
"priority"?:CID;
/**
*@default 10
*@description This mob starts swelling when a target is at least this many blocks away.
*/
"start_distance"?:number;
/**
*@default 2
*@description This mob stops swelling when a target has moved away at least this many blocks.
*/
"stop_distance"?:number;
};
export type EDF={
"priority"?:CID;
/**
*@default 5
*@description Amount of time (in seconds) to stay idle.
*/
"idle_time"?:number;
/**
*@default 0.1
*@description Percent chance this entity will go idle, 1.0 = 100%.
*/
"success_rate"?:number;
};
export type EDG={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@default 0.00833
*@description Percent chance to start wandering, when not path-finding. 1 = 100%
*/
"interval"?:number;
/**
*@default 5
*@description Distance to look ahead for obstacle avoidance, while wandering.
*/
"look_ahead"?:number;
/**
*@default 5
*@description Amount of time (in seconds) to wander after wandering behavior was successfully started.
*/
"wander_time"?:number;
};
export type EDH={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@default 0.1
*@description Percent chance to start following another entity, if not already doing so. 1.0 = 100%
*/
"success_rate"?:number;
/**
*@default 0.0333
*@description Percent chance to stop following the current entity, if they're riding another entity or they're not swimming. 1.0 = 100%
*/
"chance_to_stop"?:number;
/**
*@default 0.5
*@description Time (in seconds) between checks to determine if this entity should catch up to the entity being followed or match the direction of the entity being followed.
*/
"state_check_interval"?:number;
/**
*@default 12
*@description Distance, from the entity being followed, at which this entity will speed up to reach that entity.
*/
"catch_up_threshold"?:number;
/**
*@default 2
*@description Distance, from the entity being followed, at which this entity will try to match that entity's direction.
*/
"match_direction_threshold"?:number;
/**
*@default 2.5
*@description The multiplier this entity's speed is modified by when matching another entity's direction.
*/
"catch_up_multiplier"?:number;
/**
*@default 20
*@description Radius around this entity to search for another entity to follow.
*/
"search_range"?:number;
/**
*@default 5
*@description Distance, from the entity being followed, at which this entity will stop following that entity.
*/
"stop_distance"?:number;
/**
*@description Filters which determine what entites are valid to follow.
*/
"entity_types"?:CIG;
};
export type EDI={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@default 0.2
*@description Added to the base size of the entity, to determine the target's maximum allowable distance, when trying to deal attack damage.
*/
"damage_reach"?:number;
/**
*@default [[10,20]]
*@description Minimum and maximum cooldown time-range (in seconds) between each attempted swoop attack.
*/
"delay_range"?:BAD;
};
export type EDJ={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description Conditions that need to be met for the behavior to start.
*/
"filters"?:BG;
/**
*@default 30
*@description Maximum rotation (in degrees), on the Y-axis, this entity can rotate its head while trying to look at the target.
*/
"max_head_rotation_y"?:number;
/**
*@default 30
*@description Maximum rotation (in degrees), on the X-axis, this entity can rotate while trying to look at the target.
*/
"max_rotation_x"?:number;
/**
*@default 20
*@description The maximum amount of time (in seconds) for the mob to randomly wait for before taking the flower.
*/
"max_wait_time"?:number;
/**
*@default 2
*@description Minimum distance (in blocks) for the entity to be considered having reached its target.
*/
"min_distance_to_target"?:number;
/**
*@default 4
*@description The minimum amount of time (in seconds) for the mob to randomly wait for before taking the flower.
*/
"min_wait_time"?:number;
/**
*@default [6,2,6]
*@description The dimensions of the AABB used to search for a potential mob to take a flower from.
*/
"search_area"?:CEA;
};
export type EEA={
"priority"?:CID;
/**
*@description The list of conditions the other entity must meet to be a valid target.
*/
"entity_types"?:CIG;
/**
*@default 5
*@description Probability that the entity will target the entity that pushed it.
*/
"percent_chance"?:number;
};
export type EEB={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description If true, the mob can stop being tempted if the player moves too fast while close to this mob.
*/
"can_get_scared"?:boolean;
/**
*@description If true, the mob can be tempted even if it has a passenger (i.e. if being ridden).
*/
"can_tempt_while_ridden"?:boolean;
/**
*@description If true, vertical distance to the player will be considered when tempting.
*/
"can_tempt_vertically"?:boolean;
/**
*@description List of items this mob is tempted by.
*/
"items"?:Array<J>;
/**
*@description Range of random ticks to wait between tempt sounds.
*/
"sound_interval"?:number|JsonType;
/**
*@description Sound to play while the mob is being tempted.
*/
"tempt_sound"?:BE;
/**
*@description Distance in blocks this mob can get tempted by a player holding an item they like.
*/
"within_radius"?:number;
};
export type EEC={
"priority"?:CID;
/**
*@default 2
*@description The Maximum time in seconds that the trader will hold an item before attempting to switch for a different item that takes the same trade.
*/
"carried_item_switch_time"?:number;
/**
*@default 2
*@description The time in seconds before the trader can use this goal again.
*/
"cooldown"?:number;
/**
*@default 45
*@description The Maximum time in seconds that the trader will be interested with showing it's trade items.
*/
"interest_time"?:number;
/**
*@default 1
*@description The Maximum time in seconds that the trader will wait when you no longer have items to trade.
*/
"remove_item_time"?:number;
/**
*@description Distance in blocks this mob can be interested by a player holding an item they like.
*/
"within_radius"?:number;
};
export type EED={
"priority"?:CID;
};
export type EEE={
"priority"?:CID;
/**
*@description List of entities this mob can copy the owner from.
*/
"entity_types"?:CIG;
};
export type EEF={
"priority"?:CID;
/**
*@description List of entities this mob can copy the owner from.
*/
"entity_types"?:CIG;
};
export type EEG={
"priority"?:CID;
};
export type EEH={
"priority"?:CID;
/**
*@description List of entity types the wither takes into account to find who dealt the most damage to it.
*/
"entity_types"?:CIG;
};
export type EEI={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description The amount of ticks the NPC will stay in their the work location.
*@exclusiveMinimum 0
*/
"active_time"?:integer;
/**
*@description If true, this entity can work when their jobsite POI is being rained on.
*/
"can_work_in_rain"?:boolean;
/**
*@description The amount of ticks the goal will be on cooldown before it can be used again.
*/
"goal_cooldown"?:integer;
/**
*@description Event to run when the mob reaches their jobsite.
*/
"on_arrival"?:BAA;
/**
*@description The max interval in which a sound will play.
*/
"sound_delay_max"?:integer;
/**
*@description The min interval in which a sound will play.
*/
"sound_delay_min"?:integer;
/**
*@default -1
*@description If "can_work_in_rain" is false, this is the maximum number of ticks left in the goal where rain will not interrupt the goal
*/
"work_in_rain_tolerance"?:integer;
};
export type EEJ={
"priority"?:CID;
"speed_multiplier"?:CJA;
/**
*@description The amount of ticks the NPC will stay in their the work location.
*/
"active_time"?:integer;
/**
*@default 1
*@description The maximum number of times the mob will interact with the composter.
*/
"block_interaction_max"?:integer;
/**
*@default true
*@description Determines whether the mob can empty a full composter.
*/
"can_empty_composter"?:boolean;
/**
*@default true
*@description Determines whether the mob can add items to a composter given that it is not full.
*/
"can_fill_composter"?:boolean;
/**
*@description If true, this entity can work when their jobsite POI is being rained on.
*/
"can_work_in_rain"?:boolean;
/**
*@description The amount of ticks the goal will be on cooldown before it can be used again.
*/
"goal_cooldown"?:integer;
/**
*@default 20
*@description The maximum number of items which can be added to the composter per block interaction.
*/
"items_per_use_max"?:integer;
/**
*@default 10
*@description Limits the amount of each compostable item the mob can use. Any amount held over this number will be composted if possible
*/
"min_item_count"?:integer;
/**
*@description Event to run when the mob reaches their jobsite.
*/
"on_arrival"?:BAA;
/**
*@description Unused.
*/
"sound_delay_max"?:integer;
/**
*@description Unused.
*/
"sound_delay_min"?:integer;
/**
*@default 200
*@description The maximum interval in which the mob will interact with the composter.
*/
"use_block_max"?:integer;
/**
*@default 100
*@description The minimum interval in which the mob will interact with the composter.
*/
"use_block_min"?:integer;
/**
*@default -1
*@description If "can_work_in_rain" is false, this is the maximum number of ticks left in the goal where rain will not interrupt the goal
*/
"work_in_rain_tolerance"?:integer;
};
export type F={
"minecraft:addrider"?:G;
"minecraft:admire_item"?:H;
"minecraft:ageable"?:I;
"minecraft:ambient_sound_interval"?:BD;
"minecraft:anger_level"?:BF;
"minecraft:angry"?:JF;
"minecraft:annotation.break_door"?:JG;
"minecraft:annotation.open_door"?:JH;
"minecraft:area_attack"?:JI;
"minecraft:attack_cooldown"?:JJ;
"minecraft:attack_damage"?:BAB;
"minecraft:attack"?:BAC;
"minecraft:balloonable"?:BAE;
"minecraft:barter"?:BAF;
"minecraft:block_climber"?:BAG;
"minecraft:block_sensor"?:BAH;
"minecraft:boostable"?:BAJ;
"minecraft:boss"?:BBA;
"minecraft:break_blocks"?:BBB;
"minecraft:breathable"?:BBD;
"minecraft:breedable"?:BBF;
"minecraft:bribeable"?:BBH;
"minecraft:buoyant"?:BBI;
"minecraft:burns_in_daylight"?:BBJ;
"minecraft:can_climb"?:BCA;
"minecraft:can_fly"?:BCB;
"minecraft:can_power_jump"?:BCC;
"minecraft:celebrate_hunt"?:BCD;
"minecraft:collision_box"?:BCE;
"minecraft:color"?:BCF;
"minecraft:color2"?:BCG;
"minecraft:combat_regeneration"?:BCH;
"minecraft:conditional_bandwidth_optimization"?:BCI;
"minecraft:custom_hit_test"?:BCJ;
"minecraft:damage_over_time"?:BDA;
"minecraft:damage_sensor"?:BDB;
"minecraft:dash"?:BDC;
"minecraft:default_look_angle"?:BDD;
"minecraft:despawn"?:BDE;
"minecraft:drying_out_timer"?:BDF;
"minecraft:dweller"?:BDG;
"minecraft:economy_trade_table"?:BDH;
"minecraft:entity_sensor"?:BDI;
"minecraft:environment_sensor"?:BDJ;
"minecraft:equip_item"?:BEA;
"minecraft:equipment"?:BEB;
"minecraft:equippable"?:BED;
"minecraft:exhaustion_values"?:BEE;
"minecraft:experience_reward"?:BEF;
"minecraft:explode"?:BEG;
"minecraft:fall_damage"?:BEH;
"minecraft:fire_immune"?:BEI;
"minecraft:floats_in_liquid"?:BEJ;
"minecraft:flocking"?:BFA;
"minecraft:flying_speed"?:BFB;
"minecraft:follow_range"?:BFC;
"minecraft:friction_modifier"?:BFD;
"minecraft:game_event_movement_tracking"?:BFE;
"minecraft:genetics"?:BFF;
"minecraft:giveable"?:BFG;
"minecraft:ground_offset"?:BFH;
"minecraft:group_size"?:BFI;
"minecraft:grows_crop"?:BFJ;
"minecraft:healable"?:BGA;
"minecraft:health"?:BGB;
"minecraft:heartbeat"?:BGC;
"minecraft:hide"?:BGD;
"minecraft:home"?:BGE;
"minecraft:horse.jump_strength"?:BGF;
"minecraft:hurt_on_condition"?:BGG;
"minecraft:hurt_when_wet"?:BGH;
"minecraft:input_ground_controlled"?:BGI;
"minecraft:inside_block_notifier"?:BGJ;
"minecraft:insomnia"?:BHB;
"minecraft:instant_despawn"?:BHC;
"minecraft:interact"?:BHD;
"minecraft:inventory"?:BHE;
"minecraft:is_baby"?:BHF;
"minecraft:is_charged"?:BHG;
"minecraft:is_chested"?:BHH;
"minecraft:is_dyeable"?:BHI;
"minecraft:is_hidden_when_invisible"?:BHJ;
"minecraft:is_ignited"?:BIA;
"minecraft:is_illager_captain"?:BIB;
"minecraft:is_saddled"?:BIC;
"minecraft:is_shaking"?:BID;
"minecraft:is_sheared"?:BIE;
"minecraft:is_stackable"?:BIF;
"minecraft:is_stunned"?:BIG;
"minecraft:is_tamed"?:BIH;
"minecraft:item_controllable"?:BII;
"minecraft:item_hopper"?:BIJ;
"minecraft:jump.dynamic"?:BJA;
"minecraft:jump.static"?:BJB;
"minecraft:knockback_resistance"?:BJC;
"minecraft:lava_movement"?:BJD;
"minecraft:leashable"?:BJE;
"minecraft:lookat"?:BJF;
"minecraft:loot"?:BJG;
"minecraft:managed_wandering_trader"?:BJH;
"minecraft:mark_variant"?:BJI;
"minecraft:mob_effect"?:BJJ;
"minecraft:movement_sound_distance_offset"?:CAA;
"minecraft:movement.amphibious"?:CAB;
"minecraft:movement.basic"?:CAC;
"minecraft:movement.fly"?:CAD;
"minecraft:movement.generic"?:CAE;
"minecraft:movement.glide"?:CAF;
"minecraft:movement.hover"?:CAG;
"minecraft:movement.jump"?:CAH;
"minecraft:movement.skip"?:CAI;
"minecraft:movement.sway"?:CAJ;
"minecraft:movement"?:CBA;
"minecraft:nameable"?:CBB;
"minecraft:navigation.climb"?:CBC;
"minecraft:navigation.float"?:CBD;
"minecraft:navigation.fly"?:CBE;
"minecraft:navigation.generic"?:CBF;
"minecraft:navigation.hover"?:CBG;
"minecraft:navigation.swim"?:CBH;
"minecraft:navigation.walk"?:CBI;
"minecraft:npc"?:CBJ;
"minecraft:on_death"?:CCA;
"minecraft:on_friendly_anger"?:CCB;
"minecraft:on_hurt_by_player"?:CCC;
"minecraft:on_hurt"?:CCD;
"minecraft:on_ignite"?:CCE;
"minecraft:on_start_landing"?:CCF;
"minecraft:on_start_takeoff"?:CCG;
"minecraft:on_target_acquired"?:CCH;
"minecraft:on_target_escape"?:CCI;
"minecraft:on_wake_with_owner"?:CCJ;
"minecraft:out_of_control"?:CDA;
"minecraft:peek"?:CDB;
"minecraft:persistent"?:CDC;
"minecraft:physics"?:CDD;
"minecraft:player.exhaustion"?:CDE;
"minecraft:player.experience"?:CDF;
"minecraft:player.level"?:CDG;
"minecraft:player.saturation"?:CDH;
"minecraft:preferred_path"?:CDI;
"minecraft:projectile"?:CDJ;
"minecraft:push_through"?:CEC;
"minecraft:pushable"?:CED;
"minecraft:raid_trigger"?:CEE;
"minecraft:rail_movement"?:CEF;
"minecraft:rail_sensor"?:CEG;
"minecraft:ravager_blocked"?:CEH;
"minecraft:rideable"?:CEI;
"minecraft:scale_by_age"?:CEJ;
"minecraft:scale"?:CFA;
"minecraft:scheduler"?:CFB;
"minecraft:shareables"?:CFC;
"minecraft:shooter"?:CFD;
"minecraft:sittable"?:CFE;
"minecraft:skin_id"?:CFF;
"minecraft:sound_volume"?:CFG;
"minecraft:spawn_entity"?:CFH;
"minecraft:spell_effects"?:CFI;
"minecraft:strength"?:CFJ;
"minecraft:suspect_tracking"?:CGA;
"minecraft:tameable"?:CGB;
"minecraft:tamemount"?:CGC;
"minecraft:target_nearby_sensor"?:CGD;
"minecraft:teleport"?:CGE;
"minecraft:tick_world"?:CGF;
"minecraft:timer"?:CGG;
"minecraft:trade_resupply"?:CGH;
"minecraft:trade_table"?:CGI;
"minecraft:trail"?:CGJ;
"minecraft:transformation"?:CHA;
"minecraft:trust"?:CHB;
"minecraft:trusting"?:CHC;
"minecraft:type_family"?:CHD;
"minecraft:underwater_movement"?:CHE;
"minecraft:variable_max_auto_step"?:CHF;
"minecraft:variant"?:CHG;
"minecraft:vibration_damper"?:CHH;
"minecraft:vibration_listener"?:CHI;
"minecraft:walk_animation_speed"?:CHJ;
"minecraft:wants_jockey"?:CIA;
"minecraft:water_movement"?:CIB;
"minecraft:behavior.admire_item"?:CIC;
"minecraft:behavior.avoid_block"?:CIE;
"minecraft:behavior.avoid_mob_type"?:CIF;
"minecraft:behavior.barter"?:CIH;
"minecraft:behavior.beg"?:CII;
"minecraft:behavior.break_door"?:CIJ;
"minecraft:behavior.breed"?:CJB;
"minecraft:behavior.celebrate_survive"?:CJC;
"minecraft:behavior.celebrate"?:CJD;
"minecraft:behavior.charge_attack"?:CJE;
"minecraft:behavior.charge_held_item"?:CJF;
"minecraft:behavior.circle_around_anchor"?:CJG;
"minecraft:behavior.controlled_by_player"?:CJH;
"minecraft:behavior.croak"?:CJI;
"minecraft:behavior.defend_trusted_target"?:DAB;
"minecraft:behavior.defend_village_target"?:DAC;
"minecraft:behavior.delayed_attack"?:DAD;
"minecraft:behavior.dig"?:DAE;
"minecraft:behavior.door_interact"?:DAF;
"minecraft:behavior.dragonchargeplayer"?:DAG;
"minecraft:behavior.dragondeath"?:DAH;
"minecraft:behavior.dragonflaming"?:DAI;
"minecraft:behavior.dragonholdingpattern"?:DAJ;
"minecraft:behavior.dragonlanding"?:DBA;
"minecraft:behavior.dragonscanning"?:DBB;
"minecraft:behavior.dragonstrafeplayer"?:DBC;
"minecraft:behavior.dragontakeoff"?:DBD;
"minecraft:behavior.drink_milk"?:DBE;
"minecraft:behavior.drink_potion"?:DBF;
"minecraft:behavior.drop_item_for"?:DBG;
"minecraft:behavior.eat_block"?:DBH;
"minecraft:behavior.eat_carried_item"?:DBI;
"minecraft:behavior.eat_mob"?:DBJ;
"minecraft:behavior.emerge"?:DBJ;
"minecraft:behavior.enderman_leave_block"?:DCA;
"minecraft:behavior.enderman_take_block"?:DCB;
"minecraft:behavior.equip_item"?:DCC;
"minecraft:behavior.explore_outskirts"?:DCD;
"minecraft:behavior.fertilize_farm_block"?:DCE;
"minecraft:behavior.find_cover"?:DCF;
"minecraft:behavior.find_mount"?:DCG;
"minecraft:behavior.find_underwater_treasure"?:DCH;
"minecraft:behavior.flee_sun"?:DCI;
"minecraft:behavior.float_wander"?:DCJ;
"minecraft:behavior.float"?:DDA;
"minecraft:behavior.follow_caravan"?:DDB;
"minecraft:behavior.follow_mob"?:DDC;
"minecraft:behavior.follow_owner"?:DDD;
"minecraft:behavior.follow_parent"?:DDE;
"minecraft:behavior.follow_target_captain"?:DDF;
"minecraft:behavior.go_and_give_items_to_noteblock"?:DDG;
"minecraft:behavior.go_and_give_items_to_owner"?:DDH;
"minecraft:behavior.go_home"?:DDI;
"minecraft:behavior.guardian_attack"?:DDJ;
"minecraft:behavior.harvest_farm_block"?:DEA;
"minecraft:behavior.hide"?:DEB;
"minecraft:behavior.hold_ground"?:DEC;
"minecraft:behavior.hurt_by_target"?:DED;
"minecraft:behavior.inspect_bookshelf"?:DEE;
"minecraft:behavior.jump_to_block"?:DEF;
"minecraft:behavior.knockback_roar"?:DEH;
"minecraft:behavior.lay_down"?:DEI;
"minecraft:behavior.lay_egg"?:DEJ;
"minecraft:behavior.leap_at_target"?:DFA;
"minecraft:behavior.look_at_entity"?:DFB;
"minecraft:behavior.look_at_player"?:DFC;
"minecraft:behavior.look_at_target"?:DFD;
"minecraft:behavior.look_at_trading_player"?:DFE;
"minecraft:behavior.make_love"?:DFF;
"minecraft:behavior.melee_attack"?:DFG;
"minecraft:behavior.mingle"?:DFH;
"minecraft:behavior.mount_pathing"?:DFI;
"minecraft:behavior.move_indoors"?:DFJ;
"minecraft:behavior.move_outdoors"?:DGA;
"minecraft:behavior.move_through_village"?:DGB;
"minecraft:behavior.move_to_block"?:DGC;
"minecraft:behavior.move_to_land"?:DGD;
"minecraft:behavior.move_to_lava"?:DGE;
"minecraft:behavior.move_to_liquid"?:DGF;
"minecraft:behavior.move_to_poi"?:DGG;
"minecraft:behavior.move_to_random_block"?:DGH;
"minecraft:behavior.move_to_village"?:DGI;
"minecraft:behavior.move_to_water"?:DGJ;
"minecraft:behavior.move_towards_dwelling_restriction"?:DHA;
"minecraft:behavior.move_towards_home_restriction"?:DHB;
"minecraft:behavior.move_towards_restriction"?:DHC;
"minecraft:behavior.move_towards_target"?:DHD;
"minecraft:behavior.nap"?:DHE;
"minecraft:behavior.nearest_attackable_target"?:DHF;
"minecraft:behavior.nearest_prioritized_attackable_target"?:DHG;
"minecraft:behavior.ocelot_sit_on_block"?:DHH;
"minecraft:behavior.ocelotattack"?:DHI;
"minecraft:behavior.offer_flower"?:DHJ;
"minecraft:behavior.open_door"?:DIA;
"minecraft:behavior.owner_hurt_by_target"?:DIB;
"minecraft:behavior.owner_hurt_target"?:DIC;
"minecraft:behavior.panic"?:DID;
"minecraft:behavior.peek"?:DIE;
"minecraft:behavior.pet_sleep_with_owner"?:DIF;
"minecraft:behavior.pickup_items"?:DIG;
"minecraft:behavior.play_dead"?:DIH;
"minecraft:behavior.play"?:DII;
"minecraft:behavior.player_ride_tamed"?:DIJ;
"minecraft:behavior.raid_garden"?:DJA;
"minecraft:behavior.ram_attack"?:DJB;
"minecraft:behavior.random_breach"?:DJC;
"minecraft:behavior.random_fly"?:DJD;
"minecraft:behavior.random_hover"?:DJE;
"minecraft:behavior.random_look_around_and_sit"?:DJF;
"minecraft:behavior.random_look_around"?:DJG;
"minecraft:behavior.random_sitting"?:DJH;
"minecraft:behavior.random_stroll"?:DJI;
"minecraft:behavior.random_swim"?:DJJ;
"minecraft:behavior.ranged_attack"?:EAA;
"minecraft:behavior.receive_love"?:EAB;
"minecraft:behavior.restrict_open_door"?:EAC;
"minecraft:behavior.restrict_sun"?:EAD;
"minecraft:behavior.rise_to_liquid_level"?:EAE;
"minecraft:behavior.roar"?:EAF;
"minecraft:behavior.roll"?:EAG;
"minecraft:behavior.run_around_like_crazy"?:EAH;
"minecraft:behavior.scared"?:EAI;
"minecraft:behavior.send_event"?:EAJ;
"minecraft:behavior.share_items"?:EBA;
"minecraft:behavior.silverfish_merge_with_stone"?:EBB;
"minecraft:behavior.silverfish_wake_up_friends"?:EBC;
"minecraft:behavior.skeleton_horse_trap"?:EBD;
"minecraft:behavior.sleep"?:EBE;
"minecraft:behavior.slime_attack"?:EBF;
"minecraft:behavior.slime_float"?:EBG;
"minecraft:behavior.slime_keep_on_jumping"?:EBH;
"minecraft:behavior.slime_random_direction"?:EBI;
"minecraft:behavior.snacking"?:EBJ;
"minecraft:behavior.sneeze"?:ECA;
"minecraft:behavior.sonic_boom"?:ECB;
"minecraft:behavior.squid_dive"?:ECC;
"minecraft:behavior.squid_flee"?:ECD;
"minecraft:behavior.squid_idle"?:ECE;
"minecraft:behavior.squid_move_away_from_ground"?:ECF;
"minecraft:behavior.squid_out_of_water"?:ECG;
"minecraft:behavior.stalk_and_pounce_on_target"?:ECH;
"minecraft:behavior.stay_near_noteblock"?:ECI;
"minecraft:behavior.stay_while_sitting"?:ECJ;
"minecraft:behavior.stomp_attack"?:EDA;
"minecraft:behavior.stomp_turtle_egg"?:EDB;
"minecraft:behavior.stroll_towards_village"?:EDC;
"minecraft:behavior.summon_entity"?:EDD;
"minecraft:behavior.swell"?:EDE;
"minecraft:behavior.swim_idle"?:EDF;
"minecraft:behavior.swim_wander"?:EDG;
"minecraft:behavior.swim_with_entity"?:EDH;
"minecraft:behavior.swoop_attack"?:EDI;
"minecraft:behavior.take_flower"?:EDJ;
"minecraft:behavior.target_when_pushed"?:EEA;
"minecraft:behavior.tempt"?:EEB;
"minecraft:behavior.trade_interest"?:EEC;
"minecraft:behavior.trade_with_player"?:EED;
"minecraft:behavior.vex_copy_owner_target"?:EEE;
"minecraft:behavior.vex_random_move"?:EEF;
"minecraft:behavior.wither_random_attack_pos_goal"?:EEG;
"minecraft:behavior.wither_target_highest_damage"?:EEH;
"minecraft:behavior.work"?:EEI;
"minecraft:behavior.work_composter"?:EEJ;
};
export type EFA_addremove={
/**
*@description The components groups to add or remove.
*/
"component_groups"?:Array<string>;
};
export type EFA_event_base={
"filters"?:BG;
/**
*@description Triggers additional events.
*/
"trigger"?:BAA;
/**
*@description What gets added when the event gets triggered.
*/
"add"?:EFA_addremove;
/**
*@description What gets removed when the event gets triggered.
*/
"remove"?:EFA_addremove;
/**
*@description Randomly selects one of the following items based upon their weight and the total weights.
*/
"randomize"?:Array<{
/**
*@description What gets added when the event gets triggered.
*/
"add"?:EFA_addremove;
/**
*@description What gets removed when the event gets triggered.
*/
"remove"?:EFA_addremove;
/**
*@description Triggers additional events.
*/
"trigger"?:BAA;
/**
*@default 1
*@minimum 1
*@description The weight on how likely this section is to trigger.
*/
"weight"?:number;
[k:string]:any;
}>;
/**
*@description A series of filters and components to be added.
*/
"sequence"?:Array<{
/**
*@description What gets added when the event gets triggered.
*/
"add"?:EFA_addremove;
/**
*@description What gets removed when the event gets triggered.
*/
"remove"?:EFA_addremove;
/**
*@description Triggers additional events.
*/
"trigger"?:BAA;
"filters"?:BG;
[k:string]:any;
}>;
/**
*@example
*```json
*{
*  "example:property": false
*}
*```
*@example
*```json
*{
*  "example:property": 0
*}
*```
*@example
*```json
*{
*  "example:property": 0
*}
*```
*@example
*```json
*{
*  "example:property": "one"
*}
*```
*@example
*```json
*{
*  "example:property": "math.random(0, 10)"
*}
*```
*@description Sets a property on the entity.
*/
"set_property"?:{
[k:string]:string|number|integer|boolean;
};
};
export type EFA={
/**
*@description Event called on an entity that transforms into another entity.
*/
"minecraft:entity_transformed"?:EFA_event_base;
/**
*@description Event called on an entity that is spawned through two entities breeding.
*/
"minecraft:entity_born"?:EFA_event_base;
/**
*@description Event called on an entity that is placed in the level.
*/
"minecraft:entity_spawned"?:EFA_event_base;
/**
*@description Event called on an entity whose fuse is lit and is ready to explode.
*/
"minecraft:on_prime"?:EFA_event_base;
[k:string]:any;
};
export type B={
/**
*@description The description of the this entity.
*/
"description":{
/**
*@description Sets the mapping of internal animation / animation controllers references to actual animations. This is a JSON Object of name/animation pairs
*/
"animations"?:{
[k:string]:string;
};
/**
*@description Sets the identifier for this entity's description.
*/
"identifier":C;
/**
*@description Sets whether or not this entity has a spawn egg in the creative ui.
*/
"is_spawnable"?:boolean;
/**
*@default true
*@description Sets whether or not we can summon this entity using commands such as /summon.
*/
"is_summonable"?:boolean;
/**
*@description Sets whether or not this entity is experimental. Experimental entities are only enabled when the experimental toggle is enabled.
*/
"is_experimental"?:boolean;
/**
*@description Experimental
*/
"properties"?:{
[k:string]:{
"type"?:"bool";
/**
*@description The default value of the property.
*/
"default"?:D;
[k:string]:any;
}|{
"type"?:"int";
/**
*@description The default value of the property.
*/
"default"?:E;
/**
*@description The range of the property.
*/
"range"?:Array<JsonType>;
[k:string]:any;
}|{
"type"?:"float";
/**
*@description The default value of the property.
*/
"default"?:E;
/**
*@description The range of the property.
*/
"range"?:Array<JsonType>;
[k:string]:any;
}|{
"type"?:"enum";
"default"?:string;
/**
*@description Sets whether or not the property is synced to the client.
*/
"client_sync"?:boolean;
/**
*@description The values of the property.
*@minItems 1
*/
"values"?:Array<string>;
[k:string]:any;
};
};
/**
*@example
*```json
*"minecraft:"
*```
*@description Sets the name for the Vanilla Minecraft identifier this entity will use to build itself from.
*/
"runtime_identifier"?:string;
/**
*@description Sets the mapping of internal animation controller references to actual animation controller. This is a JSON Array of name/animation-controller pairs
*/
"scripts"?:{
/**
*@description Tells minecraft to run which animation / animation controllers and under what conditions.
*/
"animate"?:Array<string|{
[k:string]:string;
}>;
[k:string]:any;
};
[k:string]:any;
};
/**
*@description Each group when add / remove the default components.
*@uniqueItems true
*/
"component_groups"?:{
[k:string]:F;
};
/**
*@uniqueItems true
*@description The components that are added as the foundation of the entity.
*/
"components"?:F;
/**
*@uniqueItems true
*@description The events that the entity can run, these add or remove components_groups.
*/
"events"?:EFA;
};
/**
*@example
*```json
*{
*  "format_version": "1.19.0",
*  "minecraft:entity": {
*    "description": {
*      "identifier": "namespace:entity",
*      "is_spawnable": true,
*      "is_summonable": true
*    },
*    "component_groups": {},
*    "components": {},
*    "events": {}
*  }
*}
*```
*@description The minecraft entity behavior specification.
*/
export type Main={
"format_version":A;
"minecraft:entity":B;
};
}
export namespace b_feature_rules {
export type A_coord_dist=B|{
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"numerator"?:number;
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"denominator"?:number;
};
export type B=string|number;
export type C=string;
export type D_filters_spec={
/**
*@description All tests in an `all_of` group must pass in order for the group to pass.
*/
"all_of"?:D_groups_spec;
/**
*@description One or more tests in an `any_of` group must pass in order for the group to pass.
*/
"any_of"?:D_groups_spec;
/**
*@description All tests in a `none_of` group must fail in order for the group to pass.
*/
"none_of"?:D_groups_spec;
[k:string]:any;
}|E|H|I|J|BA|BB|BC|BD|BE|BF|BH|BJ|CA|CB|CC|CD|CE|CF|CG|CH|CI|CJ|DA|DB|DC|DD|DE|DF|DG|DH|DI|DJ|EA|EB|EC|ED|EE|EF|EG|EH|EI|EJ|FA|FB|FC|FD|FE|FF|FG|FH|FI|FJ|GA|GB|GC|GD|GE|GF|GG|GH|GI|GJ|HA|HB|HC|HD|HE|HF|HG|HH|HI|HJ|IA|IB|IC|JsonType;
export type D_groups_spec=Array<D_groups_spec>|D_filters_spec;
export type F=string;
export type G=string;
export type E={
/**
*@description Returns true when the bool actor property matches the value provided.
*/
"test"?:string;
/**
*@description (Required) The property name to look for
*/
"domain":string;
/**
*@default "equals"
*@description (Optional) The comparison to apply with `value`.
*/
"operator"?:F;
/**
*@default "self"
*@description (Optional) The subject of this filter test.
*/
"subject"?:G;
/**
*@default true
*@description true or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type H={
/**
*@description Compares the current time with a float value in the range (0.0, 1.0).
0.0= Noon
0.25= Sunset
0.5= Midnight
0.75= Sunrise
*/
"test"?:string;
/**
*@default "equals"
*@description (Optional) The comparison to apply with `value`.
*/
"operator"?:F;
/**
*@default "self"
*@description (Optional) The subject of this filter test.
*/
"subject"?:G;
/**
*@example
*```json
*0
*```
*@example
*```json
*0.025
*```
*@example
*```json
*0.5
*```
*@example
*```json
*0.75
*```
*@example
*```json
*1
*```
*@minimum 0
*@maximum 24000
*@description (Required) A floating point value.
*/
"value":number;
[k:string]:any;
};
export type I={
/**
*@description Compares the distance to the nearest Player with a float value.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description (Required) A floating point value.
*/
"value":number;
[k:string]:any;
};
export type J={
/**
*@description Returns true when the enum actor property matches the value provided.
*/
"test"?:string;
/**
*@description (Required) The property name to look for
*/
"domain":string;
/**
*@default "equals"
*@description (Optional) The comparison to apply with `value`.
*/
"operator"?:F;
/**
*@default "self"
*@description (Optional) The subject of this filter test.
*/
"subject"?:G;
/**
*@description (Required) A string value.
*/
"value":string;
[k:string]:any;
};
export type BA={
/**
*@description Returns true when the float actor property matches the value provided.
*/
"test"?:string;
/**
*@description (Required) The property name to look for
*/
"domain":string;
/**
*@default "equals"
*@description (Optional) The comparison to apply with `value`.
*/
"operator"?:F;
/**
*@default "self"
*@description (Optional) The subject of this filter test.
*/
"subject"?:G;
/**
*@description (Required) A floating point value.
*/
"value":number;
[k:string]:any;
};
export type BB={
/**
*@description Returns true when the subject entity has the named ability.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description (Required) The Ability type to test.
*/
"value":string;
[k:string]:any;
};
export type BC={
/**
*@description Tests whether the biome the subject is in has the specified tag.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description (Required) The tag to look for.
*/
"value":string;
[k:string]:any;
};
export type BD={
/**
*@description Returns true when the subject entity contains the named component.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description (Required) The component name to look for.
*/
"value":string;
[k:string]:any;
};
export type BE={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description (Optional) true or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type BG=string;
export type BF={
/**
*@description Returns true when the subject entity receives the named damage type.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The Damage type to test.
*/
"value":BG;
[k:string]:any;
};
export type BI=string;
export type BH={
/**
*@description Tests for the presence of a named item in the designated slot of the subject entity.
*/
"test"?:"has_equipment";
/**
*@default "any"
*@description The equipment location to test.
*/
"domain"?:JsonType;
"operator"?:F;
"subject"?:G;
/**
*@description The item name to look for.
*/
"value":BI;
[k:string]:any;
};
export type BJ={
/**
*@description Tests whether the Subject has the specified mob effect.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The specified mob effect.
*/
"value":string;
[k:string]:any;
};
export type CA={
/**
*@description Tests for the presence of a named item in the designated slot of the subject entity.
*/
"test"?:"has_nametag";
/**
*@default "any"
*@description The equipment location to test.
*/
"domain"?:JsonType;
"operator"?:F;
"subject"?:G;
/**
*@description The namtag to look for
*/
"value":boolean;
[k:string]:any;
};
export type CB={
/**
*@description Tests for the presence of a property of the subject entity.
*/
"test"?:string;
/**
*@default "equals"
*@description (Optionall) The comparison to apply with `value`.
*/
"operator"?:F;
/**
*@default "self"
*@description (Optional) The subject of this filter test.
*/
"subject"?:G;
/**
*@description (Required) The property name to look for.
*/
"value":string;
[k:string]:any;
};
export type CC={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type CD={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type CE={
/**
*@description Returns true if the subject entity has the tag provided.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The tag as a string.
*@pattern [a-zA-Z0-9_]+
*/
"value":string;
[k:string]:any;
};
export type CF={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type CG={
/**
*@description Tests whether the target has any trade supply left. Will return false if the target cannot be traded with.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type CH={
/**
*@description Compares the current 24 hour time with an int value in the range[0, 24000].
*/
"test"?:"hourly_clock_time";
"operator"?:F;
"subject"?:G;
/**
*@description (Required) An integer value set between 0 and 24000.
*@minimum 0
*@maximum 24000
*/
"value":integer;
[k:string]:any;
};
export type CI={
/**
*@description Returns true when the subject entity is inside a specified Block type.
*/
"test"?:string;
/**
*@default "equals"
*@description (Optional) The comparison to apply with `value`.
*/
"operator"?:F;
/**
*@default "self"
*@description (Optional) The subject of this filter test.
*/
"subject"?:G;
/**
*@description (Optional) A string value.
*/
"value"?:string;
[k:string]:any;
};
export type CJ={
/**
*@description Returns true if the subject entity is in a caravan.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type DA={
/**
*@description Returns true when the subject entity is in the clouds.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type DB={
/**
*@description Returns true when the subject entity in contact with any water: water, rain, splash water bottle.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description (Optional) true or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type DC={
/**
*@description Returns true when the subject entity is in lava.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type DD={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type DE={
/**
*@description Returns true when the subject entity is in water or rain.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type DF={
/**
*@description Returns true when the subject entity is in water.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type DG={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The Family name to look for.
*/
"value":integer;
[k:string]:any;
};
export type DH={
/**
*@description Returns true when the integer actor property matches the value provided.
*/
"test"?:string;
/**
*@description (Required) The property name to look for
*/
"domain":string;
/**
*@default "equals"
*@description (Optional) The comparison to apply with `value`.
*/
"operator"?:F;
/**
*@default "self"
*@description (Optional) The subject of this filter test.
*/
"subject"?:G;
/**
*@description (Required) A integer value.
*/
"value":integer;
[k:string]:any;
};
export type DI={
/**
*@description Tests the current altitude against a provided value. 0= bedrock elevation.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The altitude value to compare with.
*@minimum 0
*/
"value":integer;
[k:string]:any;
};
export type DJ={
/**
*@description Returns true if the subject entity is fleeing from other mobs.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type EA={
/**
*@description Tests whether the Subject is currently in the named biome.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The Biome type to test.
*/
"value":string;
[k:string]:any;
};
export type EB={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The Family name to look for.
*/
"value":string;
[k:string]:any;
};
export type EC={
/**
*@description Tests the current brightness against a provided value in the range (0.0f, 1.0f).
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The brightness value to compare with.
*@minimum 0
*@maximum 1
*/
"value":number;
[k:string]:any;
};
export type ED={
/**
*@description Returns true if the subject entity is climbing.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type EE={
/**
*@description Returns true if the subject entity is the named color.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The Palette Color to test.
*/
"value":string;
[k:string]:any;
};
export type EF={
/**
*@description Returns true during the daylight hours.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type EG={
/**
*@description Tests the current difficulty level of the game.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The game's difficulty level to test.
*/
"value":string;
[k:string]:any;
};
export type EH={
/**
*@description Returns true when the subject entity is a member of the named family.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The Family name to look for.
*/
"value":string;
[k:string]:any;
};
export type EI={
/**
*@example
*```json
*"commandBlockOutput"
*```
*@example
*```json
*"commandBlocksEnabled"
*```
*@example
*```json
*"doDaylightCycle"
*```
*@example
*```json
*"doEntityDrops"
*```
*@example
*```json
*"doFireTick"
*```
*@example
*```json
*"doImmediateRespawn"
*```
*@example
*```json
*"doInsomnia"
*```
*@example
*```json
*"doMobLoot"
*```
*@example
*```json
*"doMobSpawning"
*```
*@example
*```json
*"doTileDrops"
*```
*@example
*```json
*"doWeatherCycle"
*```
*@example
*```json
*"drowningDamage"
*```
*@example
*```json
*"fallDamage"
*```
*@example
*```json
*"fireDamage"
*```
*@example
*```json
*"freezeDamage"
*```
*@example
*```json
*"functionCommandLimit"
*```
*@example
*```json
*"keepInventory"
*```
*@example
*```json
*"maxCommandChainLength"
*```
*@example
*```json
*"mobGriefing"
*```
*@example
*```json
*"naturalRegeneration"
*```
*@example
*```json
*"pvp"
*```
*@example
*```json
*"randomTickSpeed"
*```
*@example
*```json
*"respawnblocksexplode"
*```
*@example
*```json
*"sendCommandFeedback"
*```
*@example
*```json
*"showCoordinates"
*```
*@example
*```json
*"showDeathMessages"
*```
*@example
*```json
*"showTags"
*```
*@example
*```json
*"spawnRadius"
*```
*@example
*```json
*"tntExplodes"
*```
*@description The Game Rule to test.
*/
"domain":JsonType;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description Tests whether a named game rule is active.
*/
"value":boolean;
[k:string]:any;
};
export type EJ={
/**
*@description Tests whether the Subject is in an area with humidity.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type FA={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type FB={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type FC={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type FD={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type FE={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The altitude value to compare with.
*/
"value"?:integer;
};
export type FF={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type FG={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type FH={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type FI={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type FJ={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type GA={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The altitude value to compare with.
*/
"value"?:integer;
[k:string]:any;
};
export type GB={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type GC={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type GD={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type GE={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type GF={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The Biome temperature catagory to test.
*/
"value":string;
[k:string]:any;
};
export type GG={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The Biome temperature value to compare with.
*@minimum 0
*@maximum 1
*/
"value":number;
[k:string]:any;
};
export type GH={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type GI={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type GJ={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The altitude value to compare with.
*/
"value":integer;
[k:string]:any;
};
export type HA={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type HB={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description true or false.
*/
"value":boolean;
[k:string]:any;
};
export type HC={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description An integer value.
*@minimum 0
*@maximum 16
*/
"value":integer;
[k:string]:any;
};
export type HD={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description A floating point value.
*@minimum 0
*@maximum 1
*/
"value":number;
[k:string]:any;
};
export type HE={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description An integer value.
*@minimum 0
*@maximum 7
*/
"value":integer;
[k:string]:any;
};
export type HF={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type HG={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type HH={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description An integer value.
*/
"value":integer;
[k:string]:any;
};
export type HI={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description An integer value.
*/
"value":integer;
[k:string]:any;
};
export type HJ={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type IA={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type IB={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@example
*```json
*"thunderstorm"
*```
*@description The Family name to look for.
*/
"value":string;
[k:string]:any;
};
export type IC={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@example
*```json
*"clear"
*```
*@example
*```json
*"thunderstorm"
*```
*@description The Family name to look for.
*/
"value":string;
[k:string]:any;
};
export type D=D_groups_spec;
export type A={
/**
*@description Specifies the version of the game this entity was made in. Minimum supported version is 1.13.0. Current supported version is 1.13.0.
*/
"format_version":"1.13.0";
/**
*@description Each feature rule controls exactly one feature and serves as the root of a chain of feature data.
*/
"minecraft:feature_rules":{
/**
*@description UNDOCUMENTED.
*/
"description":{
/**
*@description The name of this feature in the form `namespace_name:feature_name`. `feature_name` must match the filename.
*/
"identifier":C;
/**
*@description Named reference to the feature controlled by this rule.
*/
"places_feature":string;
};
/**
*@description Parameters to control where and when the feature will be placed.
*/
"conditions":{
/**
*@description When the feature should be placed relative to others. Earlier passes in the list are guaranteed to occur before later passes. Order is not guaranteed within each pass.
*/
"placement_pass":string;
/**
*@description List of filter tests to determine which biomes this rule will attach to.
*/
"minecraft:biome_filter"?:D;
};
/**
*@description Parameters controlling the initial scatter of the feature.
*/
"distribution"?:{
/**
*@description The order in which coordinates will be evaluated. Should be used when a coordinate depends on another. If omitted, defaults to `xzy`.
*/
"coordinate_eval_order"?:string;
/**
*@description Number of scattered positions to generate.
*/
"iterations":B;
"scatter_chance"?:B|{
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"numerator"?:number;
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"denominator"?:number;
};
"x"?:A_coord_dist;
"z"?:A_coord_dist;
"y"?:A_coord_dist;
};
};
};
export type ID=string;
/**
*@example
*```json
*{
*  "format_version": "1.19.0",
*  "minecraft:feature_rules": {
*    "minecraft:ore_feature": {
*      "description": {
*        "identifier": "example:foo",
*        "places_feature": "minecraft:legacy:birch_forest_tree_feature"
*      },
*      "conditions": {}
*    }
*  }
*}
*```
*/
export type Main=A|{
"format_version"?:ID;
[k:string]:any;
};
}
export namespace b_features {
export type C=string;
export type B={
/**
*@description UNDOCUMENTED.
*/
"description":{
/**
*@description The name of this feature in the form `namespace_name:feature_name`. `feature_name` must match the filename.
*/
"identifier":C;
[k:string]:any;
};
/**
*@description Collection of features to be placed one by one. No guarantee of order. All features use the same input position.
*@minItems 1
*/
"features":Array<string>;
/**
*@description LIKELY TO BE CHANGED: Do not continue placing features once either the first success or first failure has occurred.
*/
"early_out"?:string;
};
export type E=string;
export type D={
/**
*@description UNDOCUMENTED.
*/
"description":{
/**
*@description The name of this feature in the form `namespace_name:feature_name`. `feature_name` must match the filename.
*/
"identifier":C;
[k:string]:any;
};
/**
*@description Named reference of feature to be placed.
*/
"places_feature":C;
/**
*@description Dimensions of the Bounding Box.
*/
"bounding_box_min":Array<JsonType>;
/**
*@description Dimensions of the Bounding Box.
*/
"bounding_box_max":Array<JsonType>;
/**
*@description Y Delta for BAS.
*/
"y_delta":number;
/**
*@description Reference to the block to be placed.
*/
"surface_block_type":E;
/**
*@description Reference to the block to be placed.
*/
"subsurface_block_type":E;
/**
*@description Y Delta for BAS.
*/
"beard_raggedness_min"?:number;
/**
*@description Y Delta for BAS.
*/
"beard_raggedness_max"?:number;
};
export type G=string|number;
export type F={
/**
*@description UNDOCUMENTED.
*/
"description":{
/**
*@description The name of this feature in the form `namespace_name:feature_name`. `feature_name` must match the filename.
*/
"identifier":C;
[k:string]:any;
};
/**
*@description Reference to the block to fill the cave with.
*/
"fill_with"?:E;
/**
*@description How many blocks to increase the cave radius by, from the center point of the cave.
*/
"width_modifier"?:G;
};
export type I=string;
export type H={
/**
*@description UNDOCUMENTED.
*/
"description":{
/**
*@description The name of this feature in the form `namespace_name:feature_name`. `feature_name` must match the filename.
*/
"identifier":C;
[k:string]:any;
};
/**
*@description Array of Features, and their associated Conditions, for attempted placement. These features will be evaluated as ordered.
*/
"conditional_features":Array<{
/**
*@description Feature to be placed.
*/
"places_feature":C;
/**
*@description Condition for placing associated Feature.
*/
"condition":I;
}>;
/**
*@description Denote whether placement should end on first successful placement or first passed condition.
*/
"early_out_scheme"?:string;
};
export type J={
/**
*@description UNDOCUMENTED.
*/
"description":{
/**
*@description The name of this feature in the form `namespace_name:feature_name`. `feature_name` must match the filename.
*/
"identifier":C;
[k:string]:any;
};
/**
*@description The block to fill the inside of the geode.
*/
"filler":E;
/**
*@description The block that forms the inside layer of the geode shell.
*/
"inner_layer":E;
/**
*@description The block that has a chance of generating instead of inner_layer.
*/
"alternate_inner_layer":E;
/**
*@description The block that forms the middle layer of the geode shell.
*/
"middle_layer":E;
/**
*@description The block that forms the outer shell of the geode.
*/
"outer_layer":E;
/**
*@description A list of blocks that may be replaced during placement. Omit this field to allow any block to be replaced.
*@minItems 1
*/
"inner_placements"?:Array<E>;
/**
*@description The minimum distance each distribution point must be from the outer wall. [0,10]
*@minimum 1
*@maximum 10
*/
"min_outer_wall_distance":integer;
/**
*@description The maximum distance each distribution point can be from the outer wall. [0,20]
*@minimum 1
*@maximum 20
*/
"max_outer_wall_distance":integer;
/**
*@description The minimum number of points inside the distance field that can get generated. The distance field is the area consisting of all points with a minimum distance to all destribution points. [0,10]
*@minimum 1
*@maximum 10
*/
"min_distribution_points":integer;
/**
*@description The maximum number of points inside the distance field that can get generated. The distance field is the area consisting of all points with a minimum distance to all destribution points. [0,20]
*@minimum 1
*@maximum 20
*/
"max_distribution_points":integer;
/**
*@description The lowest possible value of random offset applied to the position of each distribution point. [0,10]
*@minimum 0
*@maximum 10
*/
"min_point_offset":integer;
/**
*@description The highest possible value of random offset applied to the position of each distribution point. [0,10]
*@minimum 0
*@maximum 10
*/
"max_point_offset":integer;
/**
*@description The maximum possible radius of the geode generated.
*/
"max_radius":integer;
/**
*@description An offset applied to each distribution point that forms the geode crack opening. [0,10]
*@minimum 0
*@maximum 10
*/
"crack_point_offset":integer;
/**
*@description The likelihood of a geode generating with a crack in its shell. [0,1]
*@minimum 0
*@maximum 1
*/
"generate_crack_chance":number;
/**
*@description How large the crack opening of the geode should be when generated. [0,5]
*@minimum 0
*@maximum 5
*/
"base_crack_size":number;
/**
*@description A multiplier applied to the noise that is applied to the distribution points within the geode. Higher = more noisy.
*/
"noise_multiplier":number;
/**
*@description The likelihood that a special block will be placed on the inside of the geode. [0,1]
*@minimum 0
*@maximum 1
*/
"use_potential_placements_chance":number;
/**
*@description The likelihood that a block in the innermost layer of the geode will be replaced with an alternate option. [0,1]
*@minimum 0
*@maximum 1
*/
"use_alternate_layer0_chance":number;
/**
*@description  If true, the potential placement block will only be placed on the alternate layer0 blocks that get placed. Potential placement blocks are blocks that depend on the existance of another block to be placed. The latter are the layer0 alternate blocks.
*/
"placements_require_layer0_alternate":boolean;
/**
*@description The threshold of invalid blocks for a geode to have a distribution point in before it aborts generation entirely.
*/
"invalid_blocks_threshold":integer;
};
export type BA_range={
/**
*@description The maximum plant height.
*/
"range_max":integer;
/**
*@description The minimum plant height.
*/
"range_min":integer;
[k:string]:any;
};
export type BA_rangeOrInt=integer|BA_range;
export type BA_blocks_array=Array<Array<JsonType>>;
export type BA={
/**
*@description UNDOCUMENTED.
*/
"description":{
/**
*@description The name of this feature in the form `namespace_name:feature_name`. `feature_name` must match the filename.
*/
"identifier":C;
[k:string]:any;
};
/**
*@description Age of the head of the plant.
*/
"age"?:BA_rangeOrInt;
/**
*@example
*```json
*[
*  [
*    {
*      "range_min": 8,
*      "range_max": 9
*    },
*    1
*  ],
*  [
*    6,
*    1
*  ]
*]
*```
*@description Collection of weighted heights that placement will select from.
*@minItems 1
*/
"height_distribution":Array<Array<JsonType>>;
/**
*@description Direction that the plant grows towards. Valid values: UP and DOWN
*/
"growth_direction":string;
/**
*@description Collection of weighted block descriptor that placement will select from for the body of the plant.
*/
"body_blocks":BA_blocks_array;
/**
*@description Collection of weighted block descriptor that placement will select from for the body of the plant.
*/
"head_blocks":BA_blocks_array;
/**
*@description Plant blocks can be placed in water.
*/
"allow_water"?:boolean;
};
export type BB={
/**
*@description UNDOCUMENTED.
*/
"description":{
/**
*@description The name of this feature in the form `namespace_name:feature_name`. `feature_name` must match the filename.
*/
"identifier":C;
[k:string]:any;
};
/**
*@description Reference to the block to fill the cave with.
*/
"fill_with"?:E;
/**
*@description How many blocks to increase the cave radius by, from the center point of the cave.
*/
"width_modifier"?:G;
};
export type BC={
/**
*@description UNDOCUMENTED.
*/
"description":{
/**
*@description The name of this feature in the form `namespace_name:feature_name`. `feature_name` must match the filename.
*/
"identifier":C;
[k:string]:any;
};
/**
*@description Reference to the block to be placed.
*/
"places_block":E;
/**
*@description How far, in blocks, this feature can search for a valid position to place.
*@minimum 1
*@maximum 64
*/
"search_range":integer;
/**
*@description Can this feature be placed on the ground (top face of a block)?.
*/
"can_place_on_floor":boolean;
/**
*@description Can this feature be placed on the ceiling (bottom face of a block)?.
*/
"can_place_on_ceiling":boolean;
/**
*@description Can this feature be placed on the wall (side faces of a block)?.
*/
"can_place_on_wall":boolean;
/**
*@description For each block placed by this feature, how likely will that block spread to another?.
*@minimum 0
*@maximum 1
*/
"chance_of_spreading":number;
/**
*@description  How far, in blocks, this feature can search for a valid position to place.
*@minItems 1
*/
"can_place_on"?:Array<E>;
};
export type BD={
/**
*@description UNDOCUMENTED.
*/
"description":{
/**
*@description The name of this feature in the form `namespace_name:feature_name`. `feature_name` must match the filename.
*/
"identifier":C;
[k:string]:any;
};
/**
*@description The number of blocks to be placed.
*@minimum 1
*/
"count":number;
/**
*@description Collection of replace rules that will be checked in order of definition. If a rule is resolved, the rest will not be resolved for that block position.
*@minItems 1
*/
"replace_rules"?:Array<{
/**
*@description Reference to the block to be placed.
*/
"places_block":E;
/**
*@description A list of blocks that may be replaced during placement. Omit this field to allow any block to be replaced.
*@minItems 1
*/
"may_replace"?:Array<E>;
[k:string]:any;
}>;
};
export type BE={
/**
*@description UNDOCUMENTED.
*/
"description":{
/**
*@description The name of this feature in the form `namespace_name:feature_name`. `feature_name` must match the filename.
*/
"identifier":C;
[k:string]:any;
};
/**
*@description Ratio of a Chunk to be filled with empty space rather than features.
*/
"ratio_of_empty_space"?:number;
/**
*@description UNDOCUMENTED.
*@minItems 1
*@maxItems 4294967295
*/
"feature_areas":JsonType;
};
export type BF={
/**
*@description UNDOCUMENTED.
*/
"description":{
/**
*@description The name of this feature in the form `namespace_name:feature_name`. `feature_name` must match the filename.
*/
"identifier":C;
[k:string]:any;
};
/**
*@description Named reference of feature to be placed.
*/
"scan_surface_feature":C;
};
export type BG_coordinate=G|{
/**
*@description Type of distribution - uniform random, gaussian (centered in the range), or grid (either fixed-step or jittered).
*/
"distribution":string;
/**
*@description When the distribution type is grid, defines the distance between steps along this axis.
*@minimum 1
*/
"step_size"?:integer;
/**
*@description When the distribution type is grid, defines the offset along this axis.
*@minimum 0
*/
"grid_offset"?:integer;
/**
*@description UNDOCUMENTED.
*/
"extent":Array<JsonType>;
};
export type BG={
/**
*@description UNDOCUMENTED.
*/
"description":{
/**
*@description The name of this feature in the form `namespace_name:feature_name`. `feature_name` must match the filename.
*/
"identifier":C;
[k:string]:any;
};
/**
*@description Named reference of feature to be placed.
*/
"places_feature":C;
/**
*@description If true, snaps the y-value of the scattered position to the terrain heightmap. If false or unset, y-value is unmodified.
*/
"project_input_to_floor"?:boolean;
/**
*@description Number of scattered positions to generate.
*/
"iterations"?:G;
"scatter_chance"?:{
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"numerator"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"denominator"?:integer;
}|G;
/**
*@description The order in which coordinates will be evaluated. Should be used when a coordinate depends on another. If omitted, defaults to `xzy`.
*/
"coordinate_eval_order"?:string;
"x"?:BG_coordinate;
"y"?:BG_coordinate;
"z"?:BG_coordinate;
};
export type BH={
/**
*@description UNDOCUMENTED.
*/
"description":{
/**
*@description The name of this feature in the form `namespace_name:feature_name`. `feature_name` must match the filename.
*/
"identifier":C;
[k:string]:any;
};
/**
*@description Named reference of feature to be placed.
*/
"places_feature"?:C;
/**
*@description Axis-aligned bounding box that will be searched for valid placement positions. Expressed as offsets from the input position.
*/
"search_volume"?:{
/**
*@description Maximum extent of the bounding volume expressed as [ x, y, z ].
*/
"max":Array<JsonType>;
/**
*@description Maxium extent of the bounding volume expressed as [ x, y, z ].
*/
"min":Array<JsonType>;
};
/**
*@description Axis that the search will sweep along through the `search_volume`.
*/
"search_axis":string;
/**
*@description Number of valid positions the search must find in order to place the referenced feature.
*@minimum 1
*/
"required_successes"?:integer;
};
export type BI={
/**
*@description UNDOCUMENTED.
*/
"description":{
/**
*@description The name of this feature in the form `namespace_name:feature_name`. `feature_name` must match the filename.
*/
"identifier":C;
[k:string]:any;
};
/**
*@description List of features to be placed in sequence. The output position of the previous feature is used as the input position to the next.
*@minItems 1
*/
"features":Array<C>;
};
export type BJ_block_side=string|Array<string>;
export type BJ={
/**
*@description UNDOCUMENTED.
*/
"description":{
/**
*@description The name of this feature in the form `namespace_name:feature_name`. `feature_name` must match the filename.
*/
"identifier":C;
[k:string]:any;
};
/**
*@description Reference to the block to be placed.
*/
"places_block":E;
/**
*@description If true, enforce the block's canPlace check.
*/
"enforce_placement_rules":boolean;
/**
*@description If true, enforce the block's canSurvive check.
*/
"enforce_survivability_rules":boolean;
/**
*@description UNDOCUMENTED.
*/
"may_attach_to"?:{
/**
*@description UNDOCUMENTED.
*@minimum 1
*@maximum 4
*/
"min_sides_must_attach"?:JsonType;
/**
*@description Automatically rotate the block to attach sensibly.
*/
"auto_rotate"?:JsonType;
/**
*@description UNDOCUMENTED.
*/
"top"?:BJ_block_side;
/**
*@description UNDOCUMENTED.
*/
"bottom"?:BJ_block_side;
/**
*@description UNDOCUMENTED.
*/
"north"?:BJ_block_side;
/**
*@description UNDOCUMENTED.
*/
"south"?:BJ_block_side;
/**
*@description UNDOCUMENTED.
*/
"east"?:BJ_block_side;
/**
*@description UNDOCUMENTED.
*/
"west"?:BJ_block_side;
/**
*@description UNDOCUMENTED.
*/
"all"?:BJ_block_side;
/**
*@description UNDOCUMENTED.
*/
"sides"?:BJ_block_side;
};
/**
*@description A list of blocks that may be replaced during placement. Omit this field to allow any block to be replaced.
*/
"may_replace"?:Array<E>;
};
export type CA={
/**
*@description UNDOCUMENTED.
*/
"description":{
/**
*@description The name of this feature in the form `namespace_name:feature_name`. `feature_name` must match the filename.
*/
"identifier":C;
[k:string]:any;
};
/**
*@description Named reference of feature to be snapped.
*/
"feature_to_snap":C;
/**
*@description Range to search for a floor or ceiling for snaping the feature.
*/
"vertical_search_range":number;
/**
*@description Defines the surface that the y-value of the placement position will be snapped to. Valid values: `ceiling` and `floor'
*/
"surface"?:string;
};
export type CB={
/**
*@description UNDOCUMENTED.
*/
"description":{
/**
*@description The name of this feature in the form `namespace_name:feature_name`. `feature_name` must match the filename.
*/
"identifier":C;
[k:string]:any;
};
/**
*@description Reference to the structure to be placed.
*/
"structure_name":string;
/**
*@description How far the structure is allowed to move when searching for a valid placement position. Search is radial, stopping when the nearest valid position is found. Defaults to 0 if omitted.
*@minimum 0
*@maximum 16
*/
"adjustment_radius"?:integer;
/**
*@description Direction the structure will face when placed in the world. Defaults to `random` if omitted.
*/
"facing_direction"?:string;
/**
*@description Specific constraints that must be satisfied when placing this structure.
*/
"constraints":{
/**
*@description When specified, ensures the structure is on the ground.
*/
"grounded"?:Record<string,never>;
/**
*@description When specified, ensures the structure has air above it.
*/
"unburied"?:Record<string,never>;
/**
*@description When specified, ensures the structure has air above it.
*/
"block_intersection"?:{
/**
*@description List of blocks the owning structure is allowed to intersect with.
*/
"block_allowlist"?:Array<E>;
/**
*@description List of blocks the owning structure is allowed to intersect with.
*/
"block_whitelist"?:Array<E>;
};
};
};
export type CC_branch_canopy={
/**
*@description UNDOCUMENTED.
*/
"acacia_canopy"?:{
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"canopy_size"?:integer;
/**
*@description UNDOCUMENTED.
*/
"leaf_block"?:E;
/**
*@description UNDOCUMENTED.
*/
"simplify_canopy"?:boolean;
};
/**
*@description UNDOCUMENTED.
*/
"canopy"?:{
/**
*@description UNDOCUMENTED.
*/
"canopy_offset"?:{
/**
*@description UNDOCUMENTED.
*/
"min"?:integer;
/**
*@description UNDOCUMENTED.
*/
"max"?:integer;
};
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"min_width"?:integer;
/**
*@description UNDOCUMENTED.
*/
"canopy_slope"?:{
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"rise"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"run"?:integer;
};
/**
*@description UNDOCUMENTED.
*/
"variation_chance"?:CD|number;
/**
*@description UNDOCUMENTED.
*/
"leaf_block"?:E;
/**
*@description UNDOCUMENTED.
*/
"canopy_decoration"?:{
/**
*@description UNDOCUMENTED.
*/
"decoration_chance"?:CD;
/**
*@description UNDOCUMENTED.
*/
"decoration_block"?:E;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"num_steps"?:integer;
/**
*@description UNDOCUMENTED.
*/
"step_direction"?:string;
};
};
/**
*@description UNDOCUMENTED.
*/
"fancy_canopy"?:{
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"height"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"radius"?:integer;
/**
*@description UNDOCUMENTED.
*/
"leaf_block"?:E;
};
/**
*@description UNDOCUMENTED.
*/
"mega_canopy"?:{
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"canopy_height"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"base_radius"?:number;
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"core_width"?:number;
/**
*@description UNDOCUMENTED.
*/
"simplify_canopy"?:boolean;
/**
*@description UNDOCUMENTED.
*/
"leaf_block"?:E;
};
/**
*@description UNDOCUMENTED.
*/
"mega_pine_canopy"?:{
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"canopy_height"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"base_radius"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"radius_step_modifier"?:number;
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"core_width"?:integer;
/**
*@description UNDOCUMENTED.
*/
"leaf_block"?:E;
};
/**
*@description UNDOCUMENTED.
*/
"pine_canopy"?:{
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"canopy_height"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"base_radius"?:integer;
/**
*@description UNDOCUMENTED.
*/
"leaf_block"?:E;
};
/**
*@description UNDOCUMENTED.
*/
"roofed_canopy"?:{
/**
*@description UNDOCUMENTED.
*@minimum 3
*/
"canopy_height"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"core_width"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"outer_radius"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"inner_radius"?:integer;
/**
*@description UNDOCUMENTED.
*/
"leaf_block"?:E;
};
/**
*@description UNDOCUMENTED.
*/
"spruce_canopy"?:{
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"lower_offset"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"upper_offset"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"max_radius"?:integer;
/**
*@description UNDOCUMENTED.
*/
"leaf_block"?:E;
};
};
export type CD={
/**
*@minimum 1
*@description UNDOCUMENTED.
*/
"numerator"?:number;
/**
*@minimum 1
*@description UNDOCUMENTED.
*/
"denominator"?:number;
};
export type CC={
/**
*@description UNDOCUMENTED.
*/
"description":{
/**
*@description The name of this feature in the form `namespace_name:feature_name`. `feature_name` must match the filename.
*/
"identifier":C;
[k:string]:any;
};
"base_block"?:E|Array<E>;
/**
*@description UNDOCUMENTED.
*/
"base_cluster"?:{
/**
*@description UNDOCUMENTED.
*/
"may_replace":Array<E>;
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"num_clusters":integer;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"cluster_radius":integer;
};
/**
*@description UNDOCUMENTED.
*/
"may_grow_on"?:Array<E>;
/**
*@description UNDOCUMENTED.
*/
"may_replace"?:Array<E>;
/**
*@description UNDOCUMENTED.
*/
"may_grow_through"?:Array<E>;
/**
*@description UNDOCUMENTED.
*/
"acacia_trunk"?:{
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"trunk_width"?:integer;
/**
*@description UNDOCUMENTED.
*/
"trunk_height"?:{
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"base"?:integer;
/**
*@description UNDOCUMENTED.
*@minItems 1
*/
"intervals"?:Array<integer>;
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"min_height_for_canopy"?:integer;
};
"trunk_lean"?:JsonType;
/**
*@description UNDOCUMENTED.
*/
"trunk_block"?:E;
/**
*@description UNDOCUMENTED.
*/
"branches"?:{
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"branch_length"?:number;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"branch_position"?:number;
/**
*@description UNDOCUMENTED.
*/
"branch_chance"?:CD;
/**
*@description UNDOCUMENTED.
*/
"branch_canopy"?:CC_branch_canopy;
/**
*@description UNDOCUMENTED.
*/
"trunk_decoration"?:{
/**
*@description UNDOCUMENTED.
*/
"decoration_chance"?:CD;
/**
*@description UNDOCUMENTED.
*/
"decoration_block"?:E;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"num_steps"?:integer;
/**
*@description UNDOCUMENTED.
*/
"step_direction"?:string;
};
};
};
/**
*@description UNDOCUMENTED.
*/
"fallen_trunk"?:{
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"log_length"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"stump_height"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"height_modifier"?:integer;
/**
*@description UNDOCUMENTED.
*/
"trunk_block"?:E;
/**
*@description UNDOCUMENTED.
*/
"log_decoration_feature"?:C;
/**
*@description UNDOCUMENTED.
*/
"trunk_decoration"?:{
/**
*@description UNDOCUMENTED.
*/
"decoration_chance"?:CD;
/**
*@description UNDOCUMENTED.
*/
"decoration_block"?:E;
/**
*@description UNDOCUMENTED.
*/
"num_steps"?:integer;
/**
*@description UNDOCUMENTED.
*/
"step_direction"?:string;
};
};
/**
*@description UNDOCUMENTED.
*/
"fancy_trunk"?:{
/**
*@description UNDOCUMENTED.
*/
"trunk_height"?:{
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"base"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"variance"?:integer;
/**
*@description UNDOCUMENTED.
*/
"scale"?:number;
};
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"trunk_width"?:integer;
/**
*@description UNDOCUMENTED.
*/
"branches"?:{
/**
*@description UNDOCUMENTED.
*/
"slope"?:number;
/**
*@description UNDOCUMENTED.
*/
"density"?:number;
/**
*@description UNDOCUMENTED.
*@minimum 0
*@maximum 1
*/
"min_altitude_factor"?:number;
};
/**
*@description UNDOCUMENTED.
*/
"trunk_block"?:E;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"width_scale"?:number;
/**
*@description UNDOCUMENTED.
*@minimum 0
*@maximum 1
*/
"foliage_altitude_factor"?:number;
};
/**
*@description UNDOCUMENTED.
*/
"mega_trunk"?:{
/**
*@description UNDOCUMENTED.
*/
"trunk_width"?:integer;
/**
*@description UNDOCUMENTED.
*/
"trunk_height"?:{
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"base"?:integer;
/**
*@description UNDOCUMENTED.
*/
"intervals"?:Array<integer>;
};
/**
*@description UNDOCUMENTED.
*/
"trunk_block"?:E;
/**
*@description UNDOCUMENTED.
*/
"trunk_decoration"?:{
/**
*@description UNDOCUMENTED.
*/
"decoration_chance"?:CD;
/**
*@description UNDOCUMENTED.
*/
"decoration_block"?:E;
/**
*@description UNDOCUMENTED.
*/
"num_steps"?:integer;
/**
*@description UNDOCUMENTED.
*/
"step_direction"?:string;
};
/**
*@description UNDOCUMENTED.
*/
"branches"?:{
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"branch_length"?:integer;
/**
*@description UNDOCUMENTED.
*/
"branch_slope"?:number;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"branch_interval"?:integer;
/**
*@description UNDOCUMENTED.
*/
"branch_altitude_factor"?:{
/**
*@description UNDOCUMENTED.
*@minimum 0
*@maximum 1
*/
"min"?:number;
/**
*@description UNDOCUMENTED.
*@minimum 0
*@maximum 1
*/
"max"?:number;
};
/**
*@description UNDOCUMENTED.
*/
"branch_canopy"?:CC_branch_canopy;
};
};
/**
*@description UNDOCUMENTED.
*/
"trunk"?:{
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"trunk_height"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"height_modifier"?:integer;
/**
*@description UNDOCUMENTED.
*/
"can_be_submerged"?:{
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"max_depth"?:integer;
}|boolean;
/**
*@description UNDOCUMENTED.
*/
"trunk_block"?:E;
/**
*@description UNDOCUMENTED.
*/
"trunk_decoration"?:{
/**
*@description UNDOCUMENTED.
*/
"decoration_chance"?:CD;
/**
*@description UNDOCUMENTED.
*/
"decoration_block"?:E;
/**
*@description UNDOCUMENTED.
*/
"num_steps"?:integer;
/**
*@description UNDOCUMENTED.
*/
"step_direction"?:string;
};
};
/**
*@description UNDOCUMENTED.
*/
"acacia_canopy"?:{
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"canopy_size"?:integer;
/**
*@description UNDOCUMENTED.
*/
"leaf_block"?:E;
/**
*@description UNDOCUMENTED.
*/
"simplify_canopy"?:boolean;
};
/**
*@description UNDOCUMENTED.
*/
"canopy"?:{
/**
*@description UNDOCUMENTED.
*/
"canopy_offset"?:{
/**
*@description UNDOCUMENTED.
*/
"min"?:integer;
/**
*@description UNDOCUMENTED.
*/
"max"?:integer;
};
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"min_width"?:integer;
/**
*@description UNDOCUMENTED.
*/
"canopy_slope"?:{
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"rise"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"run"?:integer;
};
/**
*@description UNDOCUMENTED.
*/
"variation_chance"?:CD|number;
/**
*@description UNDOCUMENTED.
*/
"leaf_block"?:E;
/**
*@description UNDOCUMENTED.
*/
"canopy_decoration"?:{
/**
*@description UNDOCUMENTED.
*/
"decoration_chance"?:CD;
/**
*@description UNDOCUMENTED.
*/
"decoration_block"?:E;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"num_steps"?:integer;
/**
*@description UNDOCUMENTED.
*/
"step_direction"?:string;
};
};
/**
*@description UNDOCUMENTED.
*/
"fancy_canopy"?:{
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"height"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"radius"?:integer;
/**
*@description UNDOCUMENTED.
*/
"leaf_block"?:E;
};
/**
*@description UNDOCUMENTED.
*/
"mega_canopy"?:{
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"canopy_height"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"base_radius"?:number;
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"core_width"?:number;
/**
*@description UNDOCUMENTED.
*/
"simplify_canopy"?:boolean;
/**
*@description UNDOCUMENTED.
*/
"leaf_block"?:E;
};
/**
*@description UNDOCUMENTED.
*/
"mega_pine_canopy"?:{
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"canopy_height"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"base_radius"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"radius_step_modifier"?:number;
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"core_width"?:integer;
/**
*@description UNDOCUMENTED.
*/
"leaf_block"?:E;
};
/**
*@description UNDOCUMENTED.
*/
"pine_canopy"?:{
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"canopy_height"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"base_radius"?:integer;
/**
*@description UNDOCUMENTED.
*/
"leaf_block"?:E;
};
/**
*@description UNDOCUMENTED.
*/
"roofed_canopy"?:{
/**
*@description UNDOCUMENTED.
*@minimum 3
*/
"canopy_height"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"core_width"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"outer_radius"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"inner_radius"?:integer;
/**
*@description UNDOCUMENTED.
*/
"leaf_block"?:E;
};
/**
*@description UNDOCUMENTED.
*/
"spruce_canopy"?:{
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"lower_offset"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"upper_offset"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"max_radius"?:integer;
/**
*@description UNDOCUMENTED.
*/
"leaf_block"?:E;
};
/**
*@description UNDOCUMENTED.
*/
"random_spread_canopy"?:{
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"canopy_height"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"canopy_radius"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 1
*/
"leaf_placement_attempts"?:integer;
/**
*@description UNDOCUMENTED.
*/
"leaf_blocks"?:Array<Array<JsonType>>;
};
};
export type CE={
/**
*@description UNDOCUMENTED.
*/
"description":{
/**
*@description The name of this feature in the form `namespace_name:feature_name`. `feature_name` must match the filename.
*/
"identifier":C;
[k:string]:any;
};
/**
*@description Reference to the block to fill the cave with.
*/
"fill_with"?:E;
/**
*@description How many blocks to increase the cave radius by, from the center point of the cave.
*/
"width_modifier"?:G;
/**
*@description Reference to the block to replace air blocks with.
*/
"replace_air_with"?:E;
};
export type CF={
/**
*@description UNDOCUMENTED.
*/
"description":{
/**
*@description The name of this feature in the form `namespace_name:feature_name`. `feature_name` must match the filename.
*/
"identifier":C;
[k:string]:any;
};
/**
*@description UNDOCUMENTED.
*/
"replaceable_blocks"?:Array<E>;
/**
*@description UNDOCUMENTED.
*/
"ground_block"?:E;
/**
*@description UNDOCUMENTED.
*/
"vegetation_feature"?:C;
/**
*@description UNDOCUMENTED.
*/
"surface"?:string;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"depth"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"extra_deep_block_chance"?:number;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"vertical_range"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"vegetation_chance"?:number;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"horizontal_radius"?:integer;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"extra_edge_column_chance"?:number;
/**
*@description UNDOCUMENTED.
*/
"waterlogged"?:boolean;
};
export type CG={
/**
*@description UNDOCUMENTED.
*/
"description":{
/**
*@description The name of this feature in the form `namespace_name:feature_name`. `feature_name` must match the filename.
*/
"identifier":C;
[k:string]:any;
};
/**
*@description  Collection of weighted features that placement will select from.
*@minItems 1
*/
"features":Array<Array<JsonType>>;
};
export type A={
/**
*@description Specifies the version of the game this entity was made in. Minimum supported version is 1.13.0. Current supported version is 1.13.0.
*/
"format_version":"1.13.0";
"minecraft:aggregate_feature"?:B;
"minecraft:beards_and_shavers"?:D;
"minecraft:cave_carver_feature"?:F;
"minecraft:conditional_list"?:H;
"minecraft:geode_feature"?:J;
"minecraft:growing_plant_feature"?:BA;
"minecraft:hell_cave_carver_feature"?:BB;
"minecraft:multiface_feature"?:BC;
"minecraft:ore_feature"?:BD;
"minecraft:rect_layout"?:BE;
"minecraft:scan_surface"?:BF;
"minecraft:scatter_feature"?:BG;
"minecraft:search_feature"?:BH;
"minecraft:sequence_feature"?:BI;
"minecraft:single_block_feature"?:BJ;
"minecraft:snap_to_surface_feature"?:CA;
"minecraft:structure_template_feature"?:CB;
"minecraft:tree_feature"?:CC;
"minecraft:underwater_cave_carver_feature"?:CE;
"minecraft:vegetation_patch_feature"?:CF;
"minecraft:weighted_random_feature"?:CG;
};
export type CH=string;
/**
*@example
*```json
*{
*  "format_version": "1.19.0",
*  "minecraft:ore_feature": {
*    "description": {
*      "identifier": "example:foo"
*    },
*    "features": {}
*  }
*}
*```
*/
export type Main=A|{
"format_version"?:CH;
[k:string]:any;
};
}
export namespace b_items {
export type A=string;
export type C=string;
export type D={
/**
*@description How much protection does the armor item have.
*@minimum 0
*/
"protection":integer;
/**
*@default "gold"
*@description Texture Type to apply for the armor. Note that Horse armor is restricted to leather, iron, gold, or diamond.
*/
"texture_type":string;
};
export type E_use_on_item={
/**
*@description Tags.
*/
"tags"?:F;
[k:string]:any;
};
export type F=string;
export type E={
/**
*@description Set the placement block name for the planter item.
*/
"block":string;
/**
*@description List of block descriptors that contain blocks that this item can be used on. If left empty, all blocks will be allowed.
*/
"use_on"?:Array<E_use_on_item>;
};
export type G={
/**
*@description The type of cool down for this item.
*/
"category":string;
/**
*@description The duration of time this item will spend cooling down before becoming usable again.
*/
"duration":number;
};
export type H={
/**
*@description Toggles if the item will be used efficiently.
*/
"use_efficiency"?:boolean;
/**
*@description Destroy speed per block.
*/
"destroy_speeds":Array<{
/**
*@description Speed.
*/
"speed"?:number;
/**
*@description Trigger for when you dig a block that isn't listed in destroy_speeds.
*/
"on_dig"?:string;
"block"?:string|{
/**
*@description The block tag.
*/
"any_tag"?:Array<string>;
};
}>;
/**
*@description Trigger for when you dig a block that isn't listed in destroy_speeds.
*/
"on_dig"?:string;
};
export type I={
/**
*@description Set the display name for an item.
*/
"value":string;
};
export type J={
/**
*@description Damange chance.
*/
"damage_chance":{
/**
*@description The minimum.
*/
"min":integer;
/**
*@description The minimum.
*/
"max":integer;
};
/**
*@description Maximum durability is the amount of damage that this item can take before breaking.
*/
"max_durability"?:number;
};
export type BA={
/**
*@description Defines what color the dye is.
*/
"color":string;
};
export type BB={
/**
*@description The entity to be placed in the world.
*/
"entity":string;
/**
*@description List of block descriptors that contain blocks that this item can be dispensed on. If left empty, all blocks will be allowed.
*/
"dispense_on"?:Array<JsonType>;
/**
*@description List of block descriptors that contain blocks that this item can be used on. If left empty, all blocks will be allowed.
*/
"use_on"?:Array<JsonType>;
};
export type BC=boolean;
export type BD={
/**
*@description If true you can always eat this item (even when not hungry), defaults to false.
*/
"can_always_eat"?:boolean;
/**
*@description How much nutrition does this food item give the player when eaten.
*/
"nutrition"?:number;
/**
*@description UNDOCUMENTED.
*/
"on_consume"?:{
/**
*@description UNDOCUMENTED.
*/
"event"?:string;
/**
*@description UNDOCUMENTED.
*/
"target"?:string;
};
/**
*@description If true, this food item is considered meat.
*/
"is_meat"?:boolean;
};
export type BE={
/**
*@description How long in seconds will this fuel cook items for.
*/
"duration":number;
};
export type BF=boolean;
export type BG={
/**
*@description An index or expression for which frame of the icon to display. Default resolves to 0.
*/
"frame"?:string;
/**
*@description Legacy texture id for older item icons.
*/
"legacy_id"?:string;
/**
*@description The key from the resource_pack/textures/item_texture.json `texture_data` object associated with the texture file Example: blaze_powder.
*/
"texture":string;
};
export type BH={
/**
*@description Amount of knockback resistance provided with the total maximum protection being 1.0
*/
"protection":number;
};
export type BI=integer;
export type BJ=integer;
export type CA={
/**
*@description Event trigger for when the item is used.
*/
"on_use"?:{
/**
*@description UNDOCUMENTED.
*/
"event"?:string;
/**
*@description UNDOCUMENTED.
*/
"target"?:string;
};
};
export type CB={
/**
*@description Event trigger for when the item is used.
*/
"on_use":{
/**
*@description UNDOCUMENTED.
*/
"event"?:string;
/**
*@description UNDOCUMENTED.
*/
"target"?:string;
};
};
export type CC={
/**
*@description How long you must charge a projectile for it to critically hit.
*/
"minimum_critical_power"?:number;
/**
*@description The entity to be fired as a projectile.
*/
"projectile_entity":string;
};
export type CD_offset_spec={
/**
*@description UNDOCUMENTED.
*/
"first_person"?:CD_mode;
/**
*@description UNDOCUMENTED.
*/
"thrid_person"?:CD_mode;
};
export type CD_mode={
/**
*@description The position transformation.
*/
"position"?:CD_vec3;
/**
*@description The rotation transformation.
*/
"rotation"?:CD_vec3;
/**
*@description The scale transformation.
*/
"scale"?:CD_vec3;
};
export type CD_vec3=Array<JsonType>;
export type CD={
/**
*@description Right hand transform data.
*/
"main_hand"?:string;
/**
*@description Left hand transform data.
*/
"off_hand"?:string;
};
export type CF=string|number;
export type CE={
/**
*@description Event that is called when this item has been repaired.
*/
"on_repaired"?:{
[k:string]:any;
};
/**
*@description Repair item entries.
*/
"repair_items"?:Array<{
/**
*@description UNDOCUMENTED.
*/
"items"?:Array<string>;
/**
*@description UNDOCUMENTED.
*/
"repair_amount"?:CF;
}>;
};
export type CG={
/**
*@description Ammunition.
*/
"ammunition"?:Array<{
/**
*@description UNDOCUMENTED.
*/
"item"?:string;
/**
*@description UNDOCUMENTED.
*/
"use_offhand"?:boolean;
/**
*@description UNDOCUMENTED.
*/
"search_inventory"?:boolean;
/**
*@description UNDOCUMENTED.
*/
"use_in_creative"?:boolean;
}>;
/**
*@description Charge on draw? Default is set to false.
*/
"charge_on_draw"?:boolean;
/**
*@default 1
*@description Launch power scale. Default is set to 1.0.
*/
"launch_power_scale"?:number;
/**
*@description Draw Duration. Default is set to 0.
*/
"max_draw_duration"?:number;
/**
*@description Launch power. Default is set to 1.0.
*/
"max_launch_power"?:number;
/**
*@description Scale power by draw duration? Default is set to false.
*/
"scale_power_by_draw_duration"?:boolean;
};
export type CH={
/**
*@description Whether the item should use the swing animation when thrown. Default is set to false.
*/
"do_swing_animation"?:boolean;
/**
*@default 1
*@description The scale at which the power of the throw increases. Default is set to 1.0.
*/
"launch_power_scale"?:number;
/**
*@description The maximum duration to draw a throwable item. Default is set to 0.0.
*/
"max_draw_duration"?:number;
/**
*@description The minimum duration to draw a throwable item. Default is set to 0.0.
*/
"min_draw_duration"?:number;
/**
*@default 1
*@description The maximum power to launch the throwable item. Default is set to 1.0.
*/
"max_launch_power"?:number;
/**
*@description Whether or not the power of the throw increases with duration charged. Default is set to false.
*/
"scale_power_by_draw_duration"?:boolean;
};
export type CI=integer;
export type CJ={
/**
*@description Trigger for letting you know when this item is used to hit a block.
*/
"on_hit_block"?:Record<string,never>;
/**
*@description Trigger for letting you know when this item is used to hurt another mob.
*/
"on_hurt_entity"?:Record<string,never>;
/**
*@description Trigger for letting you know when this item hit another actor, but didn't do damage.
*/
"on_not_hurt_entity"?:Record<string,never>;
};
export type DA={
/**
*@description UNDOCUMENTED.
*/
"dispensable"?:boolean;
/**
*@description equipment_slot: slot.weapon.mainhand, slot.weapon.offhand, slot.armor.head, slot.armor.chest, slot.armor.legs, slot.armor.feet, slot.hotbar, slot.inventory, slot.enderchest, slot.saddle, slot.armor, slot.chest
*/
"slot"?:string;
};
export type DB_event_base=DB_event_functions;
export type DB_event_functions={
"add_mob_effect"?:DC;
"damage"?:DD;
"decrement_stack"?:DE;
"remove_mob_effect"?:DF;
"shoot"?:DG;
"swing"?:DH;
"teleport"?:DI;
"transform_item"?:DJ;
[k:string]:any;
};
export type DC={
/**
*@description UNDOCUMENTED.
*/
"effect"?:string;
/**
*@description UNDOCUMENTED.
*/
"target"?:string;
/**
*@description UNDOCUMENTED.
*/
"duration"?:number;
/**
*@description UNDOCUMENTED.
*/
"amplifier"?:number;
};
export type DD={
/**
*@description UNDOCUMENTED.
*/
"type"?:string;
/**
*@description UNDOCUMENTED.
*/
"amount"?:number;
};
export type DE=Record<string,never>;
export type DF={
/**
*@description UNDOCUMENTED.
*/
"effect"?:string;
/**
*@description UNDOCUMENTED.
*/
"target"?:string;
};
export type DG={
/**
*@description UNDOCUMENTED.
*/
"angle_offset"?:number;
/**
*@description UNDOCUMENTED.
*/
"launch_power"?:number;
/**
*@description UNDOCUMENTED.
*/
"projectile"?:string;
};
export type DH=Record<string,never>;
export type DI={
/**
*@description UNDOCUMENTED.
*/
"target"?:string;
/**
*@description UNDOCUMENTED.
*/
"max_range"?:Array<JsonType>;
};
export type DJ={
/**
*@description UNDOCUMENTED.
*/
"transform"?:string;
};
export type DB={
"on_consume"?:DB_event_base;
[k:string]:any;
};
export type B={
/**
*@description UNDOCUMENTED.
*/
"description":{
/**
*@description The identifier for this item. The name must include a namespace and must not use the Minecraft namespace unless overriding a Vanilla item.
*/
"identifier"?:C;
/**
*@example
*```json
*"Nature"
*```
*@example
*```json
*"Equipment"
*```
*@example
*```json
*"Construction"
*```
*@example
*```json
*"Items"
*```
*@description The category for this item. Categories are used to control high level properties of how the item is integrated into the bedrock engine, such as whether it can be used in slash commands.
*/
"category"?:string;
/**
*@description If this item is experimental, it will only be registered if the world is marked as experimental.
*/
"is_experimental"?:boolean;
};
/**
*@description The components of this item.
*/
"components"?:{
"minecraft:armor"?:D;
"minecraft:block_placer"?:E;
"minecraft:cooldown"?:G;
"minecraft:digger"?:H;
"minecraft:display_name"?:I;
"minecraft:durability"?:J;
"minecraft:dye_powder"?:BA;
"minecraft:entity_placer"?:BB;
"minecraft:foil"?:BC;
"minecraft:food"?:BD;
"minecraft:fuel"?:BE;
"minecraft:hand_equipped"?:BF;
"minecraft:icon"?:BG;
"minecraft:knockback_resistance"?:BH;
"minecraft:max_damage"?:BI;
"minecraft:max_stack_size"?:BJ;
"minecraft:on_use_on"?:CA;
"minecraft:on_use"?:CB;
"minecraft:projectile"?:CC;
"minecraft:render_offsets"?:CD;
"minecraft:repairable"?:CE;
"minecraft:shooter"?:CG;
"minecraft:stacked_by_data"?:BH;
"minecraft:throwable"?:CH;
"minecraft:use_duration"?:CI;
"minecraft:weapon"?:CJ;
"minecraft:wearable"?:DA;
[k:string]:any;
};
"events"?:DB;
};
/**
*@description Minecraft items 1.16.200
*/
export type Main={
"format_version":A;
"minecraft:item":B;
[k:string]:any;
};
}
export namespace b_loot_tables {
export type pools_spec=Array<{
/**
*@description Determines how many items, will be selected.
*/
"rolls"?:integer|{
/**
*@minimum 0
*@description The minimum amount.
*/
"min":number;
/**
*@minimum 1
*@description The maximum amount.
*/
"max":number;
[k:string]:any;
};
/**
*@description Whenever this pool item is an item or another table.
*/
"type"?:string;
/**
*@description Possible conditions that need to have been met before selecting this item.
*/
"conditions"?:Array<A>;
/**
*@description The items specifiation of this pool.
*/
"entries"?:Array<{
/**
*@description UNDOCUMENTED.
*/
"type":string;
/**
*@description The amount of the item.
*/
"count"?:integer;
/**
*@description An item or loottable.
*@pattern ^([\w]+:|loot_tables/)
*/
"name"?:string;
/**
*@minimum 1
*@description UNDOCUMENTED.
*/
"weight"?:integer;
/**
*@description UNDOCUMENTED.
*/
"functions"?:Array<J>;
"pools"?:pools_spec;
/**
*@description UNDOCUMENTED.
*/
"quality"?:integer;
}>;
/**
*@description UNDOCUMENTED.
*/
"tiers"?:{
/**
*@description UNDOCUMENTED.
*/
"bonus_chance"?:number;
/**
*@description UNDOCUMENTED.
*/
"bonus_rolls"?:integer;
/**
*@description UNDOCUMENTED.
*/
"initial_range"?:integer;
};
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"bonus_rolls"?:integer;
}>;
export type B={
/**
*@description Returns true if the actor properties defined were executed.
*/
"condition"?:string;
/**
*@default "this"
*@description The entity to test. The value must be only `this`.
*/
"entity"?:string;
/**
*@default {}
*@description The entity's properties. `on_fire`, `on_ground` is used for now.
*/
"properties"?:{
/**
*@description Checks if the entity is on fire or not.
*/
"on_fire"?:boolean;
/**
*@description Checks if the entity is on the ground or not.
*/
"on_ground"?:boolean;
};
};
export type C={
/**
*@description Returns the condition true if the actor's mark variant is matched to the value.
*/
"condition"?:string;
/**
*@default "0"
*@description Tests for the actor's mark variant (if it has one).
*/
"value"?:integer;
};
export type D={
/**
*@description UNDOCUMENTED.
*/
"condition"?:string;
};
export type E={
/**
*@description UNDOCUMENTED.
*/
"condition"?:string;
};
export type F={
/**
*@description UNDOCUMENTED.
*/
"condition"?:string;
/**
*@description UNDOCUMENTED.
*/
"chance"?:number;
/**
*@description The maximum random chance value allowed.
*/
"max_chance"?:number;
};
export type G={
/**
*@description UNDOCUMENTED.
*/
"condition"?:string;
/**
*@description The random chance of the value.
*/
"chance"?:number;
/**
*@description The multiplier for the chance if the target entity has the looting enchant that affects the actor.
*/
"looting_multiplier"?:number;
};
export type H={
/**
*@description UNDOCUMENTED.
*/
"condition"?:string;
/**
*@description The default random chance if the level difficulty is not assigned.
*/
"default_chance"?:number;
/**
*@description The default random chance if the level difficulty is in easy. Omitting this field will set the value to `default_chance` field.
*/
"easy"?:number;
/**
*@description The default random chance if the level difficulty is in hard. Omitting this field will set the value to `default_chance` field.
*/
"hard"?:number;
/**
*@description The default random chance if the level difficulty is in normal. Omitting this field will set the value to `default_chance` field.
*/
"normal"?:number;
/**
*@description The default random chance if the level difficulty is in peaceful. Omitting this field will set the value to `default_chance` field.
*/
"peaceful"?:number;
};
export type I={
/**
*@description UNDOCUMENTED.
*/
"condition"?:string;
/**
*@description The default random chance if the level difficulty is not assigned.
*/
"default_chance"?:number;
/**
*@description UNDOCUMENTED.
*/
"max_chance"?:number;
/**
*@description The default random chance if the level difficulty is in easy. Omitting this field will set the value to `default_chance` field.
*/
"easy"?:number;
/**
*@description The default random chance if the level difficulty is in hard. Omitting this field will set the value to `default_chance` field.
*/
"hard"?:number;
/**
*@description The default random chance if the level difficulty is in normal. Omitting this field will set the value to `default_chance` field.
*/
"normal"?:number;
/**
*@description The default random chance if the level difficulty is in peaceful. Omitting this field will set the value to `default_chance` field.
*/
"peaceful"?:number;
};
export type A=B|C|D|E|F|G|H|I;
export type BA={
/**
*@description UNDOCUMENTED.
*/
"function"?:"enchant_random_gear";
/**
*@description Takes a chance modifier to manipulate the algorithm. Note that a chance modifier of 1.0 doesn't mean a 100% chance that gear will become enchanted.
*/
"chance"?:number;
};
export type BB={
/**
*@description UNDOCUMENTED.
*/
"function":"enchant_book_for_trading";
/**
*@description UNDOCUMENTED.
*/
"base_cost":integer;
/**
*@description UNDOCUMENTED.
*/
"base_random_cost":integer;
/**
*@description UNDOCUMENTED.
*/
"per_level_random_cost":integer;
/**
*@description UNDOCUMENTED.
*/
"per_level_cost":integer;
};
export type BC={
/**
*@description UNDOCUMENTED.
*/
"function"?:"enchant_randomly";
/**
*@description Supports the optional treasure boolean (true/false) to allow treasure enchantments to be toggled on and off.
*/
"treasure"?:boolean;
};
export type BD={
/**
*@description UNDOCUMENTED.
*/
"function"?:"enchant_with_levels";
/**
*@description UNDOCUMENTED.
*/
"levels"?:integer|{
"min":integer;
"max":integer;
};
/**
*@description UNDOCUMENTED.
*/
"treasure"?:boolean;
};
export type BE={
/**
*@description Transforms a normal map into a treasure map that marks the location of hidden treasure.
*/
"function"?:"exploration_map";
/**
*@description The destination value defines what type of treasure map they receive.
*/
"destination"?:string;
};
export type BF={
/**
*@description UNDOCUMENTED.
*/
"function"?:"fill_container";
/**
*@pattern ^loot_tables/.*\.json$
*@description UNDOCUMENTED.
*/
"loot_table"?:string;
};
export type BG={
/**
*@description UNDOCUMENTED.
*/
"function"?:"furnace_smelt";
/**
*@description UNDOCUMENTED.
*/
"conditions"?:Array<A>;
};
export type BH={
/**
*@description UNDOCUMENTED.
*/
"function"?:"looting_enchant";
/**
*@description UNDOCUMENTED.
*/
"count"?:{
"min"?:integer;
"max"?:integer;
};
};
export type BI={
/**
*@description UNDOCUMENTED.
*/
"function"?:"random_aux_value";
/**
*@description UNDOCUMENTED.
*/
"values"?:{
/**
*@description UNDOCUMENTED.
*/
"min"?:integer;
/**
*@description UNDOCUMENTED.
*/
"max"?:integer;
};
};
export type BJ={
/**
*@description UNDOCUMENTED.
*/
"function"?:"random_block_state";
/**
*@description UNDOCUMENTED.
*/
"block_state"?:string;
/**
*@description UNDOCUMENTED.
*/
"values"?:{
"min"?:integer;
"max"?:integer;
};
};
export type CA={
/**
*@description UNDOCUMENTED.
*/
"function"?:"set_actor_id";
/**
*@description UNDOCUMENTED.
*/
"id"?:string;
};
export type CB={
/**
*@description UNDOCUMENTED.
*/
"function"?:"set_banner_details";
/**
*@description UNDOCUMENTED.
*/
"type"?:integer;
};
export type CC={
/**
*@description UNDOCUMENTED.
*/
"function":"set_book_contents";
/**
*@description UNDOCUMENTED.
*/
"author":string;
/**
*@description UNDOCUMENTED.
*/
"title":string;
/**
*@description UNDOCUMENTED.
*/
"pages":Array<string>;
};
export type CD={
/**
*@description UNDOCUMENTED.
*/
"function"?:"set_count";
/**
*@description UNDOCUMENTED.
*/
"count"?:integer|{
"min"?:integer;
"max"?:integer;
[k:string]:any;
};
};
export type CE={
/**
*@description UNDOCUMENTED.
*/
"function"?:"set_damage";
/**
*@description UNDOCUMENTED.
*/
"damage"?:number|{
/**
*@description UNDOCUMENTED.
*@minimum 0
*@maximum 1
*/
"min"?:number;
/**
*@description UNDOCUMENTED.
*@minimum 0
*@maximum 1
*/
"max"?:number;
[k:string]:any;
};
};
export type CF={
/**
*@description UNDOCUMENTED.
*/
"function"?:"set_data";
/**
*@description UNDOCUMENTED.
*/
"data"?:integer|{
/**
*@description UNDOCUMENTED.
*/
"min"?:integer;
/**
*@description UNDOCUMENTED.
*/
"max"?:integer;
[k:string]:any;
};
};
export type CG={
/**
*@description UNDOCUMENTED.
*/
"function"?:"set_data_from_color_index";
};
export type CH={
/**
*@description UNDOCUMENTED.
*/
"function"?:"trader_material_type";
};
export type CI={
/**
*@description UNDOCUMENTED.
*/
"function"?:"random_dye";
};
export type CJ={
/**
*@description UNDOCUMENTED.
*/
"function"?:"set_lore";
/**
*@description UNDOCUMENTED.
*/
"lore"?:Array<string>;
};
export type DA={
/**
*@description UNDOCUMENTED.
*/
"function"?:"set_name";
/**
*@description UNDOCUMENTED.
*/
"name"?:string;
};
export type DB_IDEnchant=string;
export type DB_Enchant={
"id"?:DB_IDEnchant;
"level"?:integer|Array<JsonType>;
};
export type DB={
/**
*@description Specific enchants.
*/
"function"?:"specific_enchants";
/**
*@description A enchanting specification.
*/
"enchants"?:DB_IDEnchant|DB_Enchant|Array<DB_Enchant>;
};
export type J=BA|BB|BC|BD|BE|BF|BG|BH|BI|BJ|CA|CB|CC|CD|CE|CF|CG|CH|CI|CJ|DA|DB;
/**
*@example
*```json
*{
*  "pools": [
*    {
*      "rolls": 1,
*      "entries": [
*        {
*          "type": "item",
*          "name": "minecraft:spawn_egg",
*          "weight": 1,
*          "functions": [
*            {
*              "function": "set_count",
*              "count": {
*                "min": 1,
*                "max": 1
*              }
*            },
*            {
*              "function": "set_actor_id"
*            }
*          ]
*        }
*      ]
*    }
*  ]
*}
*```
*@description A minecraft loot table.
*/
export type Main={
/**
*@description UNDOCUMENTED.
*/
"pools"?:pools_spec;
/**
*@description UNDOCUMENTED.
*/
"type"?:string;
};
}
export namespace b_recipes {
export type C={
/**
*@pattern [a-z0-9_:\-]+
*@description UNDOCUMENTED.
*/
"identifier"?:string;
};
export type D=Array<string>;
export type B={
"description":C;
"tags"?:D;
/**
*@description Items used as input for the furnace recipe.
*/
"input"?:string;
/**
*@description Items used as output for the furnace recipe.
*/
"output"?:string;
};
export type E={
"description":C;
"tags"?:D;
/**
*@description Input potion used on the brewing stand.
*/
"input"?:string;
/**
*@description Output potion from mixing the input potion with the reagent on the brewing stand.
*/
"output"?:string;
/**
*@description Item used to mix with the input potion.
*/
"reagent"?:string;
};
export type F={
"description":C;
"tags"?:D;
/**
*@description Input potion used on the brewing stand.
*/
"input"?:string;
/**
*@description Output potion from mixing the input potion with the reagent on the brewing stand.
*/
"output"?:string;
/**
*@description Item used to mix with the input potion.
*/
"reagent"?:string;
};
export type H=string|{
"item":string;
/**
*@minimum 0
*/
"data"?:integer;
/**
*@default 1
*@minimum 1
*/
"count"?:integer;
};
export type G={
"description":C;
"tags"?:D;
/**
*@description Patten key character mapped to item names.
*@minProperties 1
*/
"key"?:{
[k:string]:H;
};
/**
*@description UNDOCUMENTED.
*/
"group"?:string;
/**
*@description Characters that represent a pattern to be defined by keys.
*@maxItems 3
*@minItems 1
*/
"pattern"?:Array<string>;
/**
*@description Item used as output for the furnace recipe.
*/
"priority"?:integer;
/**
*@description When input items match the pattern then these items are the result.
*/
"result"?:H|Array<H>;
};
export type I={
"description":C;
"tags"?:D;
/**
*@description Items used as input (without a shape) for the recipe.
*/
"ingredients"?:H|Array<H>;
/**
*@description UNDOCUMENTED.
*/
"group"?:string;
/**
*@description Item used as output for the furnace recipe.
*/
"priority"?:integer;
/**
*@description When input items match the pattern then these items are the result.
*/
"result"?:H|Array<H>;
};
export type J={
"description":C;
"tags"?:D;
/**
*@description Item used as base for the smithing recipe.
*/
"base"?:H|Array<H>;
/**
*@description Item used as addition for the smithing recipe.
*/
"addition"?:H|Array<H>;
/**
*@description When input items match the pattern then these items are the result.
*/
"result"?:H|Array<H>;
};
export type A={
/**
*@description A version that tells minecraft what type of data format can be expected when reading this file.
*/
"format_version":string;
"minecraft:recipe_furnace"?:B;
"minecraft:recipe_brewing_container"?:E;
"minecraft:recipe_brewing_mix"?:F;
"minecraft:recipe_shaped"?:G;
"minecraft:recipe_shapeless"?:I;
"minecraft:recipe_smithing_transform"?:J;
};
export type BA=string;
/**
*@example
*```json
*{
*  "format_version": "1.19.0",
*  "minecraft:recipe_shaped": {
*    "description": {
*      "identifier": "minecraft:item"
*    },
*    "tags": [
*      "crafting_table"
*    ],
*    "pattern": [],
*    "key": {},
*    "result": {
*      "item": "minecraft:boat",
*      "data": 4
*    }
*  }
*}
*```
*/
export type Main=A|A|{
"format_version"?:BA;
[k:string]:any;
};
}
export namespace b_spawn_rules {
export type A=string;
export type B=string;
export type D_filters_spec={
/**
*@description All tests in an `all_of` group must pass in order for the group to pass.
*/
"all_of"?:D_groups_spec;
/**
*@description One or more tests in an `any_of` group must pass in order for the group to pass.
*/
"any_of"?:D_groups_spec;
/**
*@description All tests in a `none_of` group must fail in order for the group to pass.
*/
"none_of"?:D_groups_spec;
[k:string]:any;
}|E|H|I|J|BA|BB|BC|BD|BE|BF|BH|BJ|CA|CB|CC|CD|CE|CF|CG|CH|CI|CJ|DA|DB|DC|DD|DE|DF|DG|DH|DI|DJ|EA|EB|EC|ED|EE|EF|EG|EH|EI|EJ|FA|FB|FC|FD|FE|FF|FG|FH|FI|FJ|GA|GB|GC|GD|GE|GF|GG|GH|GI|GJ|HA|HB|HC|HD|HE|HF|HG|HH|HI|HJ|IA|IB|IC|JsonType;
export type D_groups_spec=Array<D_groups_spec>|D_filters_spec;
export type F=string;
export type G=string;
export type E={
/**
*@description Returns true when the bool actor property matches the value provided.
*/
"test"?:string;
/**
*@description (Required) The property name to look for
*/
"domain":string;
/**
*@default "equals"
*@description (Optional) The comparison to apply with `value`.
*/
"operator"?:F;
/**
*@default "self"
*@description (Optional) The subject of this filter test.
*/
"subject"?:G;
/**
*@default true
*@description true or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type H={
/**
*@description Compares the current time with a float value in the range (0.0, 1.0).
0.0= Noon
0.25= Sunset
0.5= Midnight
0.75= Sunrise
*/
"test"?:string;
/**
*@default "equals"
*@description (Optional) The comparison to apply with `value`.
*/
"operator"?:F;
/**
*@default "self"
*@description (Optional) The subject of this filter test.
*/
"subject"?:G;
/**
*@example
*```json
*0
*```
*@example
*```json
*0.025
*```
*@example
*```json
*0.5
*```
*@example
*```json
*0.75
*```
*@example
*```json
*1
*```
*@minimum 0
*@maximum 24000
*@description (Required) A floating point value.
*/
"value":number;
[k:string]:any;
};
export type I={
/**
*@description Compares the distance to the nearest Player with a float value.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description (Required) A floating point value.
*/
"value":number;
[k:string]:any;
};
export type J={
/**
*@description Returns true when the enum actor property matches the value provided.
*/
"test"?:string;
/**
*@description (Required) The property name to look for
*/
"domain":string;
/**
*@default "equals"
*@description (Optional) The comparison to apply with `value`.
*/
"operator"?:F;
/**
*@default "self"
*@description (Optional) The subject of this filter test.
*/
"subject"?:G;
/**
*@description (Required) A string value.
*/
"value":string;
[k:string]:any;
};
export type BA={
/**
*@description Returns true when the float actor property matches the value provided.
*/
"test"?:string;
/**
*@description (Required) The property name to look for
*/
"domain":string;
/**
*@default "equals"
*@description (Optional) The comparison to apply with `value`.
*/
"operator"?:F;
/**
*@default "self"
*@description (Optional) The subject of this filter test.
*/
"subject"?:G;
/**
*@description (Required) A floating point value.
*/
"value":number;
[k:string]:any;
};
export type BB={
/**
*@description Returns true when the subject entity has the named ability.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description (Required) The Ability type to test.
*/
"value":string;
[k:string]:any;
};
export type BC={
/**
*@description Tests whether the biome the subject is in has the specified tag.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description (Required) The tag to look for.
*/
"value":string;
[k:string]:any;
};
export type BD={
/**
*@description Returns true when the subject entity contains the named component.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description (Required) The component name to look for.
*/
"value":string;
[k:string]:any;
};
export type BE={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description (Optional) true or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type BG=string;
export type BF={
/**
*@description Returns true when the subject entity receives the named damage type.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The Damage type to test.
*/
"value":BG;
[k:string]:any;
};
export type BI=string;
export type BH={
/**
*@description Tests for the presence of a named item in the designated slot of the subject entity.
*/
"test"?:"has_equipment";
/**
*@default "any"
*@description The equipment location to test.
*/
"domain"?:JsonType;
"operator"?:F;
"subject"?:G;
/**
*@description The item name to look for.
*/
"value":BI;
[k:string]:any;
};
export type BJ={
/**
*@description Tests whether the Subject has the specified mob effect.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The specified mob effect.
*/
"value":string;
[k:string]:any;
};
export type CA={
/**
*@description Tests for the presence of a named item in the designated slot of the subject entity.
*/
"test"?:"has_nametag";
/**
*@default "any"
*@description The equipment location to test.
*/
"domain"?:JsonType;
"operator"?:F;
"subject"?:G;
/**
*@description The namtag to look for
*/
"value":boolean;
[k:string]:any;
};
export type CB={
/**
*@description Tests for the presence of a property of the subject entity.
*/
"test"?:string;
/**
*@default "equals"
*@description (Optionall) The comparison to apply with `value`.
*/
"operator"?:F;
/**
*@default "self"
*@description (Optional) The subject of this filter test.
*/
"subject"?:G;
/**
*@description (Required) The property name to look for.
*/
"value":string;
[k:string]:any;
};
export type CC={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type CD={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type CE={
/**
*@description Returns true if the subject entity has the tag provided.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The tag as a string.
*@pattern [a-zA-Z0-9_]+
*/
"value":string;
[k:string]:any;
};
export type CF={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type CG={
/**
*@description Tests whether the target has any trade supply left. Will return false if the target cannot be traded with.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type CH={
/**
*@description Compares the current 24 hour time with an int value in the range[0, 24000].
*/
"test"?:"hourly_clock_time";
"operator"?:F;
"subject"?:G;
/**
*@description (Required) An integer value set between 0 and 24000.
*@minimum 0
*@maximum 24000
*/
"value":integer;
[k:string]:any;
};
export type CI={
/**
*@description Returns true when the subject entity is inside a specified Block type.
*/
"test"?:string;
/**
*@default "equals"
*@description (Optional) The comparison to apply with `value`.
*/
"operator"?:F;
/**
*@default "self"
*@description (Optional) The subject of this filter test.
*/
"subject"?:G;
/**
*@description (Optional) A string value.
*/
"value"?:string;
[k:string]:any;
};
export type CJ={
/**
*@description Returns true if the subject entity is in a caravan.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type DA={
/**
*@description Returns true when the subject entity is in the clouds.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type DB={
/**
*@description Returns true when the subject entity in contact with any water: water, rain, splash water bottle.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description (Optional) true or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type DC={
/**
*@description Returns true when the subject entity is in lava.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type DD={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type DE={
/**
*@description Returns true when the subject entity is in water or rain.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type DF={
/**
*@description Returns true when the subject entity is in water.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type DG={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The Family name to look for.
*/
"value":integer;
[k:string]:any;
};
export type DH={
/**
*@description Returns true when the integer actor property matches the value provided.
*/
"test"?:string;
/**
*@description (Required) The property name to look for
*/
"domain":string;
/**
*@default "equals"
*@description (Optional) The comparison to apply with `value`.
*/
"operator"?:F;
/**
*@default "self"
*@description (Optional) The subject of this filter test.
*/
"subject"?:G;
/**
*@description (Required) A integer value.
*/
"value":integer;
[k:string]:any;
};
export type DI={
/**
*@description Tests the current altitude against a provided value. 0= bedrock elevation.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The altitude value to compare with.
*@minimum 0
*/
"value":integer;
[k:string]:any;
};
export type DJ={
/**
*@description Returns true if the subject entity is fleeing from other mobs.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type EA={
/**
*@description Tests whether the Subject is currently in the named biome.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The Biome type to test.
*/
"value":string;
[k:string]:any;
};
export type EB={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The Family name to look for.
*/
"value":string;
[k:string]:any;
};
export type EC={
/**
*@description Tests the current brightness against a provided value in the range (0.0f, 1.0f).
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The brightness value to compare with.
*@minimum 0
*@maximum 1
*/
"value":number;
[k:string]:any;
};
export type ED={
/**
*@description Returns true if the subject entity is climbing.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type EE={
/**
*@description Returns true if the subject entity is the named color.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The Palette Color to test.
*/
"value":string;
[k:string]:any;
};
export type EF={
/**
*@description Returns true during the daylight hours.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type EG={
/**
*@description Tests the current difficulty level of the game.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The game's difficulty level to test.
*/
"value":string;
[k:string]:any;
};
export type EH={
/**
*@description Returns true when the subject entity is a member of the named family.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The Family name to look for.
*/
"value":string;
[k:string]:any;
};
export type EI={
/**
*@example
*```json
*"commandBlockOutput"
*```
*@example
*```json
*"commandBlocksEnabled"
*```
*@example
*```json
*"doDaylightCycle"
*```
*@example
*```json
*"doEntityDrops"
*```
*@example
*```json
*"doFireTick"
*```
*@example
*```json
*"doImmediateRespawn"
*```
*@example
*```json
*"doInsomnia"
*```
*@example
*```json
*"doMobLoot"
*```
*@example
*```json
*"doMobSpawning"
*```
*@example
*```json
*"doTileDrops"
*```
*@example
*```json
*"doWeatherCycle"
*```
*@example
*```json
*"drowningDamage"
*```
*@example
*```json
*"fallDamage"
*```
*@example
*```json
*"fireDamage"
*```
*@example
*```json
*"freezeDamage"
*```
*@example
*```json
*"functionCommandLimit"
*```
*@example
*```json
*"keepInventory"
*```
*@example
*```json
*"maxCommandChainLength"
*```
*@example
*```json
*"mobGriefing"
*```
*@example
*```json
*"naturalRegeneration"
*```
*@example
*```json
*"pvp"
*```
*@example
*```json
*"randomTickSpeed"
*```
*@example
*```json
*"respawnblocksexplode"
*```
*@example
*```json
*"sendCommandFeedback"
*```
*@example
*```json
*"showCoordinates"
*```
*@example
*```json
*"showDeathMessages"
*```
*@example
*```json
*"showTags"
*```
*@example
*```json
*"spawnRadius"
*```
*@example
*```json
*"tntExplodes"
*```
*@description The Game Rule to test.
*/
"domain":JsonType;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description Tests whether a named game rule is active.
*/
"value":boolean;
[k:string]:any;
};
export type EJ={
/**
*@description Tests whether the Subject is in an area with humidity.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type FA={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type FB={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type FC={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type FD={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type FE={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The altitude value to compare with.
*/
"value"?:integer;
};
export type FF={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type FG={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type FH={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type FI={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type FJ={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type GA={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The altitude value to compare with.
*/
"value"?:integer;
[k:string]:any;
};
export type GB={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type GC={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type GD={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type GE={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type GF={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The Biome temperature catagory to test.
*/
"value":string;
[k:string]:any;
};
export type GG={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The Biome temperature value to compare with.
*@minimum 0
*@maximum 1
*/
"value":number;
[k:string]:any;
};
export type GH={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type GI={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type GJ={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description The altitude value to compare with.
*/
"value":integer;
[k:string]:any;
};
export type HA={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type HB={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description true or false.
*/
"value":boolean;
[k:string]:any;
};
export type HC={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description An integer value.
*@minimum 0
*@maximum 16
*/
"value":integer;
[k:string]:any;
};
export type HD={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description A floating point value.
*@minimum 0
*@maximum 1
*/
"value":number;
[k:string]:any;
};
export type HE={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description An integer value.
*@minimum 0
*@maximum 7
*/
"value":integer;
[k:string]:any;
};
export type HF={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type HG={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type HH={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description An integer value.
*/
"value":integer;
[k:string]:any;
};
export type HI={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@description An integer value.
*/
"value":integer;
[k:string]:any;
};
export type HJ={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type IA={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@default true
*@description True or false.
*/
"value"?:boolean;
[k:string]:any;
};
export type IB={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@example
*```json
*"thunderstorm"
*```
*@description The Family name to look for.
*/
"value":string;
[k:string]:any;
};
export type IC={
/**
*@description The test property.
*/
"test"?:string;
"operator"?:F;
"subject"?:G;
/**
*@example
*```json
*"clear"
*```
*@example
*```json
*"thunderstorm"
*```
*@description The Family name to look for.
*/
"value":string;
[k:string]:any;
};
export type D=D_groups_spec;
export type C=Array<D>|D;
export type ID={
/**
*@description This is the minimum light level value that allows the mob to spawn.
*/
"min"?:integer;
/**
*@description This is the maximum light level value that allows the mob to spawn.
*/
"max"?:integer;
/**
*@default true
*@description This determines if weather can affect the light level conditions that cause the mob to spawn (e.g. Allowing hostile mobs to spawn during the day when it rains.)
*/
"adjust_for_weather"?:boolean;
};
export type IE={
/**
*@description This is the minimum delay that a mob spawns.
*/
"min"?:integer;
/**
*@description This is the maximum delay that a mob spawns.
*/
"max"?:integer;
/**
*@description The identifier of the mob that will spawn.
*/
"identifier":string;
/**
*@default 100
*@description The percent chance that this entity will spawn.
*/
"spawn_chance"?:number;
};
export type IF={
/**
*@description This is the maximum number of mobs of this type spawnable on the surface.
*/
"surface"?:integer;
/**
*@description This is the maximum number of mobs of this type spawnable underground.
*/
"underground"?:integer;
};
export type IG_difficulty=string;
export type IG={
/**
*@description This is the minimum difficulty level that a mob spawns.
*/
"min"?:IG_difficulty;
/**
*@description This is the maximum difficulty level that a mob spawns.
*/
"max"?:IG_difficulty;
};
export type IH=Record<string,never>;
export type II={
/**
*@description This is the minimum distance level that a mob spawns.
*/
"min"?:integer;
/**
*@description This is the maximum distance level that a mob spawns.
*/
"max"?:integer;
};
export type IJ={
/**
*@description This is the minimum height level that a mob spawns.
*/
"min"?:integer;
/**
*@description This is the maximum height level that a mob spawns.
*/
"max"?:integer;
};
export type JA={
/**
*@description Conditions that make this entry in the list valid.
*/
"filters"?:D;
/**
*@default 16
*@description Maximum distance this mob can be away to be a valid choice.
*/
"max_dist"?:number;
/**
*@description If true, the mob has to be visible to be a valid choice.
*/
"must_see"?:boolean;
/**
*@default 3
*@description Determines the amount of time in seconds that this mob will look for a target before forgetting about it and looking for a new one when the target isn't visible any more.
*/
"must_see_forget_duration"?:boolean;
/**
*@default 1
*@description Multiplier for the running speed. A value of 1.0 means the speed is unchanged.
*/
"sprint_speed_multiplier"?:number;
/**
*@default 1
*@description Multiplier for the walking speed. A value of 1.0 means the speed is unchanged.
*/
"walk_speed_multiplier"?:number;
};
export type JB_herd={
/**
*@description UNDOCUMENTED.
*/
"initial_event"?:string;
/**
*@description UNDOCUMENTED.
*/
"initial_event_count"?:integer;
/**
*@description This is the minimum number of mobs that spawn in a herd.
*/
"min_size"?:integer;
/**
*@description This is the maximum number of mobs that spawn in a herd.
*/
"max_size"?:integer;
/**
*@description This is an event that can be triggered from spawning.
*/
"event"?:string;
/**
*@description This is the number of mobs spawned before the specified event is triggered.
*/
"event_skip_count"?:integer;
};
export type JB=JB_herd|Array<JB_herd>;
export type JC={
/**
*@description The event String in this JSON Object is used to filter the spawn rules of the mob type. Can be type minecraft:pillager_patrols_event, minecraft:wandering_trader_event, or minecraft:ender_dragon_event..
*/
"event"?:string;
};
export type JD_permute_type={
/**
*@description The percentage of 100 of a type of mob that should spawn. If there are multiple weights, they must add up to 100.
*/
"weight"?:integer;
/**
*@description The type of mob to spawn.
*/
"entity_type"?:string;
/**
*@description Causes mobs to spawn with a guaranteed_count before mobs that do not have this spawn condition.
*/
"guaranteed_count"?:number;
};
export type JD=JD_permute_type|Array<JD_permute_type>;
export type JE={
/**
*@description UNDOCUMENTED.
*/
"distance"?:integer;
/**
*@description UNDOCUMENTED.
*/
"village_border_tolerance"?:integer;
};
export type JF={
/**
*@description UNDOCUMENTED.
*/
"event"?:string;
};
export type JG={
/**
*@description UNDOCUMENTED.
*/
"blocks"?:string|Array<string>;
/**
*@description UNDOCUMENTED.
*@minimum 0
*/
"distance"?:number;
};
export type JH=Record<string,never>;
export type JI=string|Array<string>;
export type JJ=string|Array<string>;
export type BAA=Record<string,never>;
export type BAB=Record<string,never>;
export type BAC=Record<string,never>;
export type BAD={
/**
*@description This is the priority of the mob spawning out of 100.
*/
"default"?:integer;
/**
*@description UNDOCUMENTED.
*/
"rarity"?:integer;
};
export type BAE={
/**
*@description This is the minimum world_age_filter level that a mob spawns.
*/
"min"?:integer;
};
/**
*@example
*```json
*{
*  "format_version": "1.19.0",
*  "minecraft:spawn_rules": {
*    "description": {
*      "identifier": "minecraft:entity",
*      "population_control": "ambient"
*    },
*    "conditions": [
*      {}
*    ]
*  }
*}
*```
*@description Data-Driven spawning allows you to adjust the spawn conditions of mobs.
*/
export type Main={
"format_version":A;
/**
*@description Data-Driven spawning allows you to adjust the spawn conditions of mobs.
*/
"minecraft:spawn_rules":{
/**
*@description The descripton of to which entity this spawn rule belongs.
*/
"description"?:{
/**
*@description The entity identifier this spawn rule will apply to, entity must exist.
*/
"identifier":B;
/**
*@description Setting an entity to a pool it will spawn as long as that pool hasn't reached the spawn limit.
*/
"population_control":string;
};
/**
*@description UNDOCUMENTED.
*/
"conditions"?:Array<{
"minecraft:biome_filter"?:C;
"minecraft:brightness_filter"?:ID;
"minecraft:delay_filter"?:IE;
"minecraft:density_limit"?:IF;
"minecraft:difficulty_filter"?:IG;
"minecraft:disallow_spawns_in_bubble"?:IH;
"minecraft:distance_filter"?:II;
"minecraft:height_filter"?:IJ;
"minecraft:entity_types"?:JA;
"minecraft:herd"?:JB;
"minecraft:mob_event_filter"?:JC;
"minecraft:permute_type"?:JD;
"minecraft:player_in_village_filter"?:JE;
"minecraft:spawn_event"?:JF;
"minecraft:spawns_above_block_filter"?:JG;
"minecraft:spawns_lava"?:JH;
"minecraft:spawns_on_block_filter"?:JI;
"minecraft:spawns_on_block_prevented_filter"?:JJ;
"minecraft:spawns_on_surface"?:BAA;
"minecraft:spawns_underground"?:BAB;
"minecraft:spawns_underwater"?:BAC;
"minecraft:weight"?:BAD;
"minecraft:world_age_filter"?:BAE;
}>;
};
};
}
export namespace b_trading {
export type Item=string|{
"item"?:string;
"price_multiplier"?:number;
"functions"?:Functions;
/**
*@description UNDOCUMENTED.
*/
"biomes"?:Array<A>;
"quantity"?:integer|{
/**
*@minimum 1
*/
"min":integer;
/**
*@minimum 1
*/
"max":integer;
};
};
export type Functions=Array<B>;
export type TradeArray=Array<{
"gives":Array<string|{
"item"?:string;
"quantity"?:integer|{
/**
*@minimum 1
*/
"min":integer;
/**
*@minimum 1
*/
"max":integer;
};
"functions"?:Functions;
/**
*@description UNDOCUMENTED.
*/
"choice"?:Array<Item>;
}>;
"wants":Array<string|{
"item"?:string;
"quantity"?:integer|{
/**
*@minimum 1
*/
"min":integer;
/**
*@minimum 1
*/
"max":integer;
};
/**
*@description UNDOCUMENTED.
*/
"price_multiplier"?:number;
"functions"?:Functions;
/**
*@description UNDOCUMENTED.
*/
"choice"?:Array<Item>;
}>;
"trader_exp"?:integer;
"max_uses"?:integer;
"weight"?:integer;
"reward_exp"?:boolean;
}>;
export type A=string;
export type C={
/**
*@description UNDOCUMENTED.
*/
"function"?:"enchant_random_gear";
/**
*@description Takes a chance modifier to manipulate the algorithm. Note that a chance modifier of 1.0 doesn't mean a 100% chance that gear will become enchanted.
*/
"chance"?:number;
};
export type D={
/**
*@description UNDOCUMENTED.
*/
"function":"enchant_book_for_trading";
/**
*@description UNDOCUMENTED.
*/
"base_cost":integer;
/**
*@description UNDOCUMENTED.
*/
"base_random_cost":integer;
/**
*@description UNDOCUMENTED.
*/
"per_level_random_cost":integer;
/**
*@description UNDOCUMENTED.
*/
"per_level_cost":integer;
};
export type E={
/**
*@description UNDOCUMENTED.
*/
"function"?:"enchant_randomly";
/**
*@description Supports the optional treasure boolean (true/false) to allow treasure enchantments to be toggled on and off.
*/
"treasure"?:boolean;
};
export type F={
/**
*@description UNDOCUMENTED.
*/
"function"?:"enchant_with_levels";
/**
*@description UNDOCUMENTED.
*/
"levels"?:integer|{
"min":integer;
"max":integer;
};
/**
*@description UNDOCUMENTED.
*/
"treasure"?:boolean;
};
export type G={
/**
*@description Transforms a normal map into a treasure map that marks the location of hidden treasure.
*/
"function"?:"exploration_map";
/**
*@description The destination value defines what type of treasure map they receive.
*/
"destination"?:string;
};
export type H={
/**
*@description UNDOCUMENTED.
*/
"function"?:"fill_container";
/**
*@pattern ^loot_tables/.*\.json$
*@description UNDOCUMENTED.
*/
"loot_table"?:string;
};
export type BA={
/**
*@description Returns true if the actor properties defined were executed.
*/
"condition"?:string;
/**
*@default "this"
*@description The entity to test. The value must be only `this`.
*/
"entity"?:string;
/**
*@default {}
*@description The entity's properties. `on_fire`, `on_ground` is used for now.
*/
"properties"?:{
/**
*@description Checks if the entity is on fire or not.
*/
"on_fire"?:boolean;
/**
*@description Checks if the entity is on the ground or not.
*/
"on_ground"?:boolean;
};
};
export type BB={
/**
*@description Returns the condition true if the actor's mark variant is matched to the value.
*/
"condition"?:string;
/**
*@default "0"
*@description Tests for the actor's mark variant (if it has one).
*/
"value"?:integer;
};
export type BC={
/**
*@description UNDOCUMENTED.
*/
"condition"?:string;
};
export type BD={
/**
*@description UNDOCUMENTED.
*/
"condition"?:string;
};
export type BE={
/**
*@description UNDOCUMENTED.
*/
"condition"?:string;
/**
*@description UNDOCUMENTED.
*/
"chance"?:number;
/**
*@description The maximum random chance value allowed.
*/
"max_chance"?:number;
};
export type BF={
/**
*@description UNDOCUMENTED.
*/
"condition"?:string;
/**
*@description The random chance of the value.
*/
"chance"?:number;
/**
*@description The multiplier for the chance if the target entity has the looting enchant that affects the actor.
*/
"looting_multiplier"?:number;
};
export type BG={
/**
*@description UNDOCUMENTED.
*/
"condition"?:string;
/**
*@description The default random chance if the level difficulty is not assigned.
*/
"default_chance"?:number;
/**
*@description The default random chance if the level difficulty is in easy. Omitting this field will set the value to `default_chance` field.
*/
"easy"?:number;
/**
*@description The default random chance if the level difficulty is in hard. Omitting this field will set the value to `default_chance` field.
*/
"hard"?:number;
/**
*@description The default random chance if the level difficulty is in normal. Omitting this field will set the value to `default_chance` field.
*/
"normal"?:number;
/**
*@description The default random chance if the level difficulty is in peaceful. Omitting this field will set the value to `default_chance` field.
*/
"peaceful"?:number;
};
export type BH={
/**
*@description UNDOCUMENTED.
*/
"condition"?:string;
/**
*@description The default random chance if the level difficulty is not assigned.
*/
"default_chance"?:number;
/**
*@description UNDOCUMENTED.
*/
"max_chance"?:number;
/**
*@description The default random chance if the level difficulty is in easy. Omitting this field will set the value to `default_chance` field.
*/
"easy"?:number;
/**
*@description The default random chance if the level difficulty is in hard. Omitting this field will set the value to `default_chance` field.
*/
"hard"?:number;
/**
*@description The default random chance if the level difficulty is in normal. Omitting this field will set the value to `default_chance` field.
*/
"normal"?:number;
/**
*@description The default random chance if the level difficulty is in peaceful. Omitting this field will set the value to `default_chance` field.
*/
"peaceful"?:number;
};
export type J=BA|BB|BC|BD|BE|BF|BG|BH;
export type I={
/**
*@description UNDOCUMENTED.
*/
"function"?:"furnace_smelt";
/**
*@description UNDOCUMENTED.
*/
"conditions"?:Array<J>;
};
export type BI={
/**
*@description UNDOCUMENTED.
*/
"function"?:"looting_enchant";
/**
*@description UNDOCUMENTED.
*/
"count"?:{
"min"?:integer;
"max"?:integer;
};
};
export type BJ={
/**
*@description UNDOCUMENTED.
*/
"function"?:"random_aux_value";
/**
*@description UNDOCUMENTED.
*/
"values"?:{
/**
*@description UNDOCUMENTED.
*/
"min"?:integer;
/**
*@description UNDOCUMENTED.
*/
"max"?:integer;
};
};
export type CA={
/**
*@description UNDOCUMENTED.
*/
"function"?:"random_block_state";
/**
*@description UNDOCUMENTED.
*/
"block_state"?:string;
/**
*@description UNDOCUMENTED.
*/
"values"?:{
"min"?:integer;
"max"?:integer;
};
};
export type CB={
/**
*@description UNDOCUMENTED.
*/
"function"?:"set_actor_id";
/**
*@description UNDOCUMENTED.
*/
"id"?:string;
};
export type CC={
/**
*@description UNDOCUMENTED.
*/
"function"?:"set_banner_details";
/**
*@description UNDOCUMENTED.
*/
"type"?:integer;
};
export type CD={
/**
*@description UNDOCUMENTED.
*/
"function":"set_book_contents";
/**
*@description UNDOCUMENTED.
*/
"author":string;
/**
*@description UNDOCUMENTED.
*/
"title":string;
/**
*@description UNDOCUMENTED.
*/
"pages":Array<string>;
};
export type CE={
/**
*@description UNDOCUMENTED.
*/
"function"?:"set_count";
/**
*@description UNDOCUMENTED.
*/
"count"?:integer|{
"min"?:integer;
"max"?:integer;
[k:string]:any;
};
};
export type CF={
/**
*@description UNDOCUMENTED.
*/
"function"?:"set_damage";
/**
*@description UNDOCUMENTED.
*/
"damage"?:number|{
/**
*@description UNDOCUMENTED.
*@minimum 0
*@maximum 1
*/
"min"?:number;
/**
*@description UNDOCUMENTED.
*@minimum 0
*@maximum 1
*/
"max"?:number;
[k:string]:any;
};
};
export type CG={
/**
*@description UNDOCUMENTED.
*/
"function"?:"set_data";
/**
*@description UNDOCUMENTED.
*/
"data"?:integer|{
/**
*@description UNDOCUMENTED.
*/
"min"?:integer;
/**
*@description UNDOCUMENTED.
*/
"max"?:integer;
[k:string]:any;
};
};
export type CH={
/**
*@description UNDOCUMENTED.
*/
"function"?:"set_data_from_color_index";
};
export type CI={
/**
*@description UNDOCUMENTED.
*/
"function"?:"trader_material_type";
};
export type CJ={
/**
*@description UNDOCUMENTED.
*/
"function"?:"random_dye";
};
export type DA={
/**
*@description UNDOCUMENTED.
*/
"function"?:"set_lore";
/**
*@description UNDOCUMENTED.
*/
"lore"?:Array<string>;
};
export type DB={
/**
*@description UNDOCUMENTED.
*/
"function"?:"set_name";
/**
*@description UNDOCUMENTED.
*/
"name"?:string;
};
export type DC_IDEnchant=string;
export type DC_Enchant={
"id"?:DC_IDEnchant;
"level"?:integer|Array<JsonType>;
};
export type DC={
/**
*@description Specific enchants.
*/
"function"?:"specific_enchants";
/**
*@description A enchanting specification.
*/
"enchants"?:DC_IDEnchant|DC_Enchant|Array<DC_Enchant>;
};
export type B=C|D|E|F|G|H|I|BI|BJ|CA|CB|CC|CD|CE|CF|CG|CH|CI|CJ|DA|DB|DC;
export type DD=string;
/**
*@example
*```json
*{
*  "tiers": [
*    {
*      "trades": [
*        {
*          "wants": [
*            {
*              "item": "minecraft:coal:0",
*              "quantity": {
*                "min": 16,
*                "max": 24
*              }
*            }
*          ],
*          "gives": [
*            {
*              "item": "minecraft:emerald"
*            }
*          ]
*        }
*      ]
*    }
*  ]
*}
*```
*@description UNDOCUMENTED.
*/
export type Main={
"format_version"?:DD;
/**
*@description A collection of tiers.
*/
"tiers"?:Array<{
"trades"?:TradeArray;
"total_exp_required"?:integer;
/**
*@description A collection of groups.
*/
"groups"?:Array<{
"num_to_select"?:integer;
"trades"?:TradeArray;
}>;
}>;
};
}
export namespace r_animation_controller {
export type animationspec=string|{
[k:string]:A|number;
};
export type particle_effect_spec={
/**
*@description Set to false to have the effect spawned in the world without being bound to an actor (by default an effect is bound to the actor).
*/
"bind_to_actor"?:boolean;
/**
*@description The name of a particle effect that should be played.
*/
"effect":string;
/**
*@description The name of a locator on the actor where the effect should be located.
*/
"locator"?:string;
/**
*@description A molang script that will be run when the particle emitter is initialized.
*@pattern ^.+;$
*/
"pre_effect_script"?:string;
};
export type commands=string;
export type A=string;
export type B=string;
export type C=string|number;
/**
*@example
*```json
*{
*  "format_version": "1.19.0",
*  "animation_controllers": {
*    "controller.animation.example": {
*      "states": {
*        "default": {
*          "transitions": [
*            {
*              "state_1": "query.is_baby"
*            }
*          ]
*        },
*        "state_1": {
*          "animations": [
*            "state_1"
*          ],
*          "transitions": [
*            {
*              "default": "query.all_animations_finished"
*            }
*          ]
*        }
*      }
*    }
*  }
*}
*```
*@description UNDOCUMENTED.
*/
export type Main={
"format_version":B;
/**
*@description The animation controllers schema for.
*/
"animation_controllers":{
[k:string]:{
/**
*@description The states of this animation controller.
*@minProperties 1
*/
"states":{
[k:string]:{
/**
*@description The animations definition for.
*/
"animations"?:Array<animationspec>;
"blend_transition"?:number|{
[k:string]:number;
};
/**
*@description When blending a transition to another state, animate each euler axis through the shortest rotation, instead of by value.
*/
"blend_via_shortest_path"?:boolean;
/**
*@description The effects to be emitted.
*/
"particle_effects"?:Array<particle_effect_spec>;
/**
*@description Collection of sounds to trigger on entry to this animation state.
*/
"sound_effects"?:Array<{
/**
*@description Valid sound effect names should be listed in the entity's resource_definition json file.
*/
"effect":string;
}>;
/**
*@description The transition definition for.
*@minProperties 1
*/
"transitions"?:Array<animationspec>;
"variables"?:{
[k:string]:{
"input":C;
"remap_curve"?:{
[k:string]:number;
};
};
};
/**
*@description Sets molang on data on entry.
*/
"on_entry"?:Array<string>;
/**
*@description Sets molang on data on exit.
*/
"on_exit"?:Array<string>;
};
};
/**
*@description The state to start with, if not specified state at position 0 in the array is used.
*/
"initial_state"?:string;
};
};
};
}
export namespace r_actor_animation {
export type ParticleEffect={
/**
*@description The name of a particle effect that should be played.
*/
"effect":string;
/**
*@description The name of a locator on the actor where the effect should be located.
*/
"locator"?:string;
/**
*@description A molang script that will be run when the particle emitter is initialized.
*/
"pre_effect_script"?:A;
/**
*@description Set to false to have the effect spawned in the world without being bound to an actor (by default an effect is bound to the actor).
*/
"bind_to_actor"?:boolean;
};
export type PositionV3=Array<JsonType>;
export type RotationV3=Array<JsonType>;
export type ScaleV3=Array<JsonType>;
export type SoundEffect={
/**
*@description Valid sound effect names should be listed in the entity's resource_definition json file.
*/
"effect"?:string;
};
export type A=string;
export type B=string|number;
export type C=string;
/**
*@example
*```json
*{
*  "format_version": "1.19.0",
*  "animations": {
*    "animation.annie.idle": {
*      "loop": true,
*      "animation_length": 2.12,
*      "bones": {}
*    }
*  }
*}
*```
*@description The RP animation that changes an actors models, or molang data.
*/
export type Main={
"format_version":C;
/**
*@description The animation specification.
*/
"animations":{
[k:string]:{
/**
*@description How does time pass when playing the animation. Defaults to `query.anim_time + query.delta_time` which means advance in seconds.
*/
"anim_time_update"?:B;
/**
*@description Override calculated value (set as the last keyframe time) and set animation length in seconds.
*/
"animation_length"?:number;
/**
*@description The weight of the animation when blending with other animations. Defaults to 1.
*/
"blend_weight"?:B;
/**
*@description Defines how the bones in an animation move or transform.
*@minProperties 1
*/
"bones"?:{
[k:string]:{
/**
*@description The Position transformation during this animation.
*/
"position"?:PositionV3|{
[k:string]:B|PositionV3|{
/**
*@description UNDOCUMENTED.
*/
"lerp_mode"?:string;
/**
*@description UNDOCUMENTED.
*/
"pre"?:PositionV3;
/**
*@description UNDOCUMENTED.
*/
"post"?:PositionV3;
};
};
/**
*@description The rotation transformation during this animation.
*/
"rotation"?:RotationV3|{
[k:string]:B|RotationV3|{
/**
*@description UNDOCUMENTED.
*/
"lerp_mode"?:string;
/**
*@description UNDOCUMENTED.
*/
"pre"?:RotationV3;
/**
*@description UNDOCUMENTED.
*/
"post"?:RotationV3;
};
};
/**
*@description If set, makes the bone rotation relative to the entity instead of the bone's parent.
*/
"relative_to"?:{
/**
*@description If set, makes the bone rotation relative to the entity instead of the bone's parent.
*/
"rotation"?:string;
[k:string]:any;
};
/**
*@description UNDOCUMENTED.
*/
"scale"?:B|ScaleV3|{
[k:string]:B|ScaleV3|{
/**
*@description UNDOCUMENTED.
*/
"lerp_mode"?:string;
/**
*@description UNDOCUMENTED.
*/
"pre"?:ScaleV3;
/**
*@description UNDOCUMENTED.
*/
"post"?:ScaleV3;
};
};
};
};
/**
*@description Should this animation stop, loop, or stay on the last frame when finished (true, false, hold_on_last_frame).
*/
"loop"?:boolean|string;
/**
*@description How long to wait in seconds before looping this animation. Note that this expression is evaluated after each loop and on looping animation only.
*/
"loop_delay"?:B;
/**
*@description Reset bones in this animation to the default pose before applying this animation.
*/
"override_previous_animation"?:boolean;
/**
*@example
*```json
*{
*  "0.0": {}
*}
*```
*@description UNDOCUMENTED.
*/
"particle_effects"?:{
[k:string]:ParticleEffect|Array<ParticleEffect>;
};
/**
*@description How long to wait in seconds before playing this animation. Note that this expression is evaluated once before playing, and only re-evaluated if asked to play from the beginning again. A looping animation should use `loop_delay` if it wants a delay between loops.
*/
"start_delay"?:B;
/**
*@description UNDOCUMENTED.
*/
"sound_effects"?:{
[k:string]:SoundEffect|Array<SoundEffect>;
};
/**
*@example
*```json
*{
*  "0.0": {}
*}
*```
*@description The time line.
*/
"timeline"?:{
[k:string]:string|Array<string>;
};
};
};
};
}
export namespace r_attachables {
export type B=string;
export type C=string|number;
export type A={
/**
*@pattern ^1.8.0$
*@description A version that tells minecraft what type of data format can be expected when reading this file.
*/
"format_version":string;
/**
*@description The attachables definition for 1.8.0
*/
"minecraft:attachable":{
/**
*@description UNDOCUMENTED: description.
*/
"description":{
/**
*@description The connecting of animations in animations controllers with the actuall animations, names should corosponds.
*@minProperties 1
*/
"animations"?:{
[k:string]:string;
};
/**
*@minItems 1
*@description UNDOCUMENTED: animation controllers.
*/
"animation_controllers"?:Array<{
[k:string]:string;
}>;
/**
*@description UNDOCUMENTED: enable attachables.
*/
"enable_attachables"?:boolean;
/**
*@minProperties 1
*@description UNDOCUMENTED: geometry.
*/
"geometry":{
[k:string]:string;
};
/**
*@description UNDOCUMENTED: identifier.
*/
"identifier":B;
/**
*@description UNDOCUMENTED.
*/
"item"?:{
[k:string]:string;
};
/**
*@description UNDOCUMENTED: materials.
*/
"materials"?:{
[k:string]:string;
};
/**
*@pattern [0-9]+\.[0-9]+\.[0-9]+
*@description UNDOCUMENTED: Minimum engine version.
*/
"min_engine_version"?:string;
/**
*@minProperties 1
*@description UNDOCUMENTED: particle effects.
*/
"particle_effects"?:{
[k:string]:string;
};
/**
*@minProperties 1
*@description UNDOCUMENTED: particle emitters.
*/
"particle_emitters"?:{
[k:string]:string;
};
/**
*@description UNDOCUMENTED: render controllers.
*@minItems 1
*/
"render_controllers"?:Array<string>;
/**
*@description UNDOCUMENTED: sound effects.
*@minItems 1
*/
"sound_effects"?:Array<string>;
/**
*@description UNDOCUMENTED: spawn egg.
*/
"spawn_egg"?:{
/**
*@description UNDOCUMENTED: base colour.
*/
"base_colour"?:string;
/**
*@description UNDOCUMENTED: overlay color.
*/
"overlay_color"?:string;
/**
*@description UNDOCUMENTED: texture.
*/
"texture"?:string;
/**
*@description UNDOCUMENTED: texture index.
*/
"texture_index"?:integer;
[k:string]:any;
};
/**
*@description UNDOCUMENTED: scripts.
*/
"scripts"?:{
/**
*@description UNDOCUMENTED: pre aninamtion.
*/
"pre_animation"?:Array<C>;
/**
*@description UNDOCUMENTED: scale.
*/
"scale"?:string;
/**
*@description UNDOCUMENTED: animate.
*/
"animate"?:Array<string|{
[k:string]:string;
}>;
"parent_setup"?:C;
[k:string]:any;
};
/**
*@description UNDOCUMENTED: textures.
*/
"textures"?:{
[k:string]:string;
};
};
};
};
export type D={
/**
*@pattern ^(1.10.0|1.10)$
*@description A version that tells minecraft what type of data format can be expected when reading this file.
*/
"format_version":string;
/**
*@description The attachables definition.
*/
"minecraft:attachable":{
/**
*@description UNDOCUMENTED: description.
*/
"description":{
/**
*@description The collection of animations references.
*/
"animations"?:{
[k:string]:string;
};
/**
*@description The specification of animation controllers.
*/
"animation_controllers"?:Array<JsonType>;
/**
*@description UNDOCUMENTED: enable attachables.
*/
"enable_attachables"?:boolean;
/**
*@minProperties 1
*@description The geometry specification.
*/
"geometry"?:{
[k:string]:string;
};
/**
*@description UNDOCUMENTED: identifier.
*/
"identifier":B;
/**
*@description UNDOCUMENTED.
*/
"item"?:{
[k:string]:string;
};
/**
*@description A collection of material references.
*/
"materials"?:{
[k:string]:string;
};
/**
*@pattern [0-9]+\.[0-9]+\.[0-9]+
*@description The minimum engine needed to use this.
*/
"min_engine_version"?:string;
/**
*@minProperties 1
*@description A collection of particle effect references.
*/
"particle_effects"?:{
[k:string]:string;
};
/**
*@minProperties 1
*@description UNDOCUMENTED: particle emitters.
*/
"particle_emitters"?:{
[k:string]:string;
};
/**
*@description UNDOCUMENTED: render controllers.
*@minItems 1
*/
"render_controllers"?:Array<string>;
/**
*@description UNDOCUMENTED: scripts.
*/
"scripts"?:{
/**
*@minItems 1
*@description UNDOCUMENTED: animate.
*/
"animate"?:Array<string|{
[k:string]:string;
}>;
/**
*@description UNDOCUMENTED: initialize.
*/
"initialize"?:Array<C>;
/**
*@description UNDOCUMENTED: pre aninamtion.
*/
"pre_animation"?:Array<C>;
/**
*@description UNDOCUMENTED: parent setup.
*/
"parent_setup"?:C;
/**
*@description UNDOCUMENTED: scale.
*/
"scale"?:C;
};
/**
*@description UNDOCUMENTED: sound effects.
*@minItems 1
*/
"sound_effects"?:Array<string>;
/**
*@description UNDOCUMENTED: spawn egg.
*/
"spawn_egg"?:{
/**
*@description UNDOCUMENTED: base colour.
*/
"base_colour"?:string;
/**
*@description UNDOCUMENTED: overlay color.
*/
"overlay_color"?:string;
/**
*@description UNDOCUMENTED: texture.
*/
"texture"?:string;
/**
*@description UNDOCUMENTED: texture index.
*/
"texture_index"?:integer;
[k:string]:any;
};
/**
*@description UNDOCUMENTED: textures.
*/
"textures"?:{
[k:string]:string;
};
};
};
};
export type E=string;
/**
*@example
*```json
*{
*  "format_version": "1.19.0",
*  "minecraft:attachable": {
*    "description": {
*      "identifier": "minecraft:item",
*      "materials": {
*        "default": "entity_alphatest",
*        "enchanted": "entity_alphatest_glint"
*      },
*      "textures": {
*        "default": "textures/items/item"
*      },
*      "geometry": {
*        "default": "geometry.item"
*      },
*      "scripts": {},
*      "render_controllers": [
*        "controller.render.item"
*      ]
*    }
*  }
*}
*```
*/
export type Main=A|D|D|{
"format_version"?:E;
[k:string]:any;
};
}
export namespace r_entity {
export type B=string;
export type C=string;
export type D=string|number;
export type A={
/**
*@description A version that tells minecraft what type of data format can be expected when reading this file.
*/
"format_version":"1.8.0";
/**
*@description The entity description for clientside rendering, animations and models.
*/
"minecraft:client_entity":{
/**
*@description The entity description for clientside rendering, animations and models.
*/
"description":{
/**
*@example
*```json
*{
*  "basic": "controller.generic.basic"
*}
*```
*@description These names are used by the animation controller JSON. Players can reference animations from the vanilla Minecraft Resource Pack or create their own. Custom animations should be in the animation folder at the root of the Resource Pack.
*@minProperties 1
*/
"animations"?:{
[k:string]:string;
};
/**
*@minItems 1
*@description A reference to an animation controller.
*/
"animation_controllers"?:Array<{
[k:string]:string;
}>;
/**
*@description UNDOCUMENTED: enable attachables.
*/
"enable_attachables"?:boolean;
/**
*@description The reference to defined geometries in `<resource pack>/models/'.
*@minProperties 1
*/
"geometry"?:{
[k:string]:string;
};
/**
*@default true
*@description Hides or shows the possible armor.
*/
"hide_armor"?:boolean;
/**
*@description This determines if the item held by an entity should render fully lit up (if true), or depending on surrounding lighting.
*/
"held_item_ignores_lighting"?:boolean;
/**
*@description The entity indentifier.
*/
"identifier":B;
/**
*@description A collection of material definitions.
*/
"materials"?:{
[k:string]:string;
};
/**
*@pattern [0-9]+\.[0-9]+\.[0-9]+
*@description The minimum engine version to be used.
*/
"min_engine_version"?:string;
/**
*@minProperties 1
*@description Keys are required and need to be unique from all other keys in the animation controllers. Players can reference particles from the vanilla Minecraft Resource Pack or create their own. Custom particles should be in the particle folder at the root of the Resource Pack.
*/
"particle_effects"?:{
[k:string]:string;
};
/**
*@minProperties 1
*@description A collection of particle emitters definitions.
*/
"particle_emitters"?:{
[k:string]:string;
};
/**
*@description Players can reference Render Controllers from the vanilla Minecraft Resource Pack or create their own. Custom Render Controllers should be in the textures folder at the root of the Resource Pack.
*@minItems 1
*/
"render_controllers"?:Array<string|{
[k:string]:string;
}>;
/**
*@description The place where variables, and animations / controller to be run is specified.
*/
"scripts"?:{
/**
*@description Client side scripts that are evaluated immediately before animations are processed.
*/
"pre_animation"?:Array<C>;
/**
*@description UNDOCUMENTED: parent setup.
*/
"parent_setup"?:D;
/**
*@description Scale sets the scale of the mob's geometry.
*/
"scale"?:D;
"scalex"?:D;
"scaley"?:D;
"scalez"?:D;
};
/**
*@description A collection of sound effect definition.
*@minProperties 1
*/
"sound_effects"?:{
[k:string]:string;
};
/**
*@example
*```json
*{
*  "base_color": "#FFFFFF",
*  "overlay_color": "#000000"
*}
*```
*@example
*```json
*{
*  "texture": "example_egg",
*  "texture_index": 0
*}
*```
*@description The definition of how the spawn_egg icon looks like.
*/
"spawn_egg"?:{
/**
*@example
*```json
*"#FFFFFF"
*```
*@description The basic color of the egg.
*@format color-hex
*/
"base_color"?:string;
/**
*@example
*```json
*"#FFFFFF"
*```
*@description The colors of the dots on the egg.
*@format color-hex
*/
"overlay_color"?:string;
/**
*@description The texture reference in item_texture.json
*/
"texture"?:string;
/**
*@description The index of the texture.
*/
"texture_index"?:integer;
};
/**
*@description A collection of references to textures in the resourcepack.
*/
"textures"?:{
[k:string]:string;
};
};
};
};
export type F=string;
export type E={
"format_version":F;
/**
*@description The entity description for clientside rendering, animations and models.
*/
"minecraft:client_entity":{
/**
*@description The entity description for clientside rendering, animations and models.
*/
"description":{
/**
*@example
*```json
*{
*  "basic": "controller.generic.basic"
*}
*```
*@description These names are used by the animation controller JSON. Players can reference animations from the vanilla Minecraft Resource Pack or create their own. Custom animations should be in the animation folder at the root of the Resource Pack.
*@minProperties 1
*/
"animations"?:{
[k:string]:string;
};
/**
*@description Whether or not attachables are enaboled.
*/
"enable_attachables"?:boolean;
/**
*@description The reference to defined geometries in `<resource pack>/models/'.
*@minProperties 1
*/
"geometry"?:{
[k:string]:string;
};
/**
*@description UNDOCUMENTED.
*/
"queryable_geometry"?:string;
/**
*@default true
*@description Hides or shows the possible armor.
*/
"hide_armor"?:boolean;
/**
*@description This determines if the item held by an entity should render fully lit up (if true), or depending on surrounding lighting.
*/
"held_item_ignores_lighting"?:boolean;
/**
*@description The entity indentifier.
*/
"identifier":B;
/**
*@description A collection of material definitions.
*/
"materials"?:{
[k:string]:string;
};
/**
*@pattern [0-9]+\.[0-9]+\.[0-9]+
*@description The minimum engine version to be used.
*/
"min_engine_version"?:string;
/**
*@minProperties 1
*@description A collection of particle definitions.
*/
"particle_effects"?:{
[k:string]:string;
};
/**
*@minProperties 1
*@description A collection of particle emitters definitions.
*/
"particle_emitters"?:{
[k:string]:string;
};
/**
*@description A collection of Render controller definitions.
*@minItems 1
*/
"render_controllers"?:Array<string|{
[k:string]:string;
}>;
/**
*@description The place where variables, and animations / controller to be run is specified.
*/
"scripts"?:{
/**
*@description The array of items to animate.
*@minItems 1
*/
"animate"?:Array<string|{
[k:string]:string|number;
}>;
/**
*@description Clientside molang variables that are to be evaluated during the creation of the entity.
*@minItems 1
*/
"initialize"?:Array<C>;
/**
*@description Clientside molang variables that are to be evaluated during the animation.
*/
"pre_animation"?:Array<C>;
/**
*@description UNDOCUMENTED: parent setup.
*/
"parent_setup"?:D;
/**
*@description Scale sets the scale of the mob's geometry.
*/
"scale"?:D;
"scalex"?:D;
"scaley"?:D;
"scalez"?:D;
/**
*@description Bones and effects will still be updated if the entity is off screen if this expression returns anything other than 0.0.
*/
"should_update_bones_and_effects_offscreen"?:boolean|C;
/**
*@description Effects will still be updated if the entity is off screen if this expression or `should_update_bones_and_effects_offscreen` returns anything other than 0.0.
*/
"should_update_effects_offscreen"?:boolean|C;
/**
*@description  A list of variables that need certain settings applied to them. Currently, for the client, only `public` is supported.
*@minProperties 1
*/
"variables"?:{
[k:string]:string;
};
};
/**
*@description A collection of sound effect definition.
*@minProperties 1
*/
"sound_effects"?:{
[k:string]:string;
};
/**
*@example
*```json
*{
*  "base_color": "#FFFFFF",
*  "overlay_color": "#000000"
*}
*```
*@example
*```json
*{
*  "texture": "example_egg",
*  "texture_index": 0
*}
*```
*@description The definition of how the spawn_egg icon looks like.
*/
"spawn_egg"?:{
/**
*@example
*```json
*"#FFFFFF"
*```
*@description The basic color of the egg.
*@format color-hex
*/
"base_color"?:string;
/**
*@example
*```json
*"#FFFFFF"
*```
*@description The colors of the dots on the egg.
*@format color-hex
*/
"overlay_color"?:string;
/**
*@description The texture reference in item_texture.json
*/
"texture"?:string;
/**
*@description The index of the texture.
*/
"texture_index"?:integer;
};
/**
*@description A collection of references to textures in the resourcepack.
*/
"textures"?:{
[k:string]:string;
};
};
};
};
/**
*@example
*```json
*{
*  "format_version": "1.19.0",
*  "minecraft:client_entity": {
*    "description": {
*      "identifier": "minecraft:entity",
*      "materials": {
*        "default": "entity_custom"
*      },
*      "textures": {
*        "default": "textures/entity/custom/entity"
*      },
*      "geometry": {
*        "default": "geometry.entity"
*      },
*      "animations": {},
*      "particle_effects": {},
*      "scripts": {},
*      "render_controllers": [
*        "controller.render.entity"
*      ],
*      "spawn_egg": {
*        "base_color": "#288483",
*        "overlay_color": "#2B7135"
*      }
*    }
*  }
*}
*```
*/
export type Main=A;
}
export namespace r_particles {
export type A=string;
export type B=string;
export type C=string|number;
export type E=string;
export type D={
/**
*@description This is run once at emitter startup.
*/
"creation_expression"?:E;
/**
*@description This is run once per emitter update.
*/
"per_update_expression"?:E;
};
export type F={
/**
*@description Fires when the emitter is created.
*/
"creation_event"?:Array<string>|string;
/**
*@description Fires when the emitter expires (does not wait for particles to expire too).
*/
"expiration_event"?:Array<string>|string;
/**
*@description A series of times, e.g. 0.0 or 1.0, that trigger the event, these get fired on every loop the emitter goes through, `time` is the time, e.g. one line might be: `0.4`: `event`
*/
"timeline"?:{
[k:string]:Array<string>|string;
};
/**
*@description A series of distances, e.g. 0.0 or 1.0, that trigger the event these get fired when the emitter has moved by the specified input distance, e.g. one line might be: `0.4`: `event`
*/
"travel_distance_events"?:JsonType;
/**
*@description A series of events that occur at set intervals these get fired every time the emitter has moved the specified input distance from the last time it was fired.
*/
"looping_travel_distance_events"?:Array<{
/**
*@description UNDOCUMENTED.
*/
"distance"?:number;
/**
*@description UNDOCUMENTED.
*/
"effects"?:Array<string>|string;
}>;
};
export type G={
/**
*@description When the expression is non-zero, the emitter will emit particles. Evaluated every frame
*/
"activation_expression"?:C;
/**
*@description Emitter will expire if the expression is non-zero. Evaluated every frame
*/
"expiration_expression"?:C;
};
export type H={
/**
*@description How long the particles emit for evaluated once.
*/
"active_time"?:C;
};
export type I={
/**
*@description Emitter will emit particles for this time per loop evaluated once per particle emitter loop.
*/
"active_time"?:C;
/**
*@description Emitter will pause emitting particles for this time per loop evaluated once per particle emitter loop.
*/
"sleep_time"?:C;
};
export type J={
/**
*@description UNDOCUMENTED: position.
*/
"position"?:boolean;
/**
*@description UNDOCUMENTED: rotation.
*/
"rotation"?:boolean;
/**
*@description UNDOCUMENTED: rotation.
*/
"velocity"?:boolean;
};
export type BA={
/**
*@default 10
*@description This many particles are emitted at once evaluated once per particle emitter loop.
*/
"num_particles"?:C;
};
export type BB={
/**
*@description Evaluated once per particle emitted.
*/
"max_particles"?:C;
};
export type BC={
/**
*@description Maximum number of particles that can be active at once for this emitter, evaluated once per particle emitter loop.
*/
"max_particles"?:C;
/**
*@description How often a particle is emitted, in particles/sec evaluated once per particle emitted.
*/
"spawn_rate"?:C;
};
export type BD={
/**
*@description UNDOCUMENTED: direction.
*/
"direction"?:string|Array<JsonType>;
/**
*@description UNDOCUMENTED: radius.
*/
"radius"?:C;
/**
*@description UNDOCUMENTED.
*/
"offset"?:Array<JsonType>;
/**
*@description UNDOCUMENTED: half dimensions.
*/
"half_dimensions"?:Array<JsonType>;
/**
*@description UNDOCUMENTED: surface only.
*/
"surface_only"?:boolean;
};
export type BE={
/**
*@description UNDOCUMENTED: direction.
*/
"direction"?:Array<JsonType>;
/**
*@description UNDOCUMENTED.
*/
"offset"?:Array<JsonType>;
};
export type BF={
/**
*@description UNDOCUMENTED: direction.
*/
"direction"?:string|Array<JsonType>;
/**
*@description UNDOCUMENTED: radius.
*/
"radius"?:C;
/**
*@description UNDOCUMENTED.
*/
"offset"?:Array<JsonType>;
/**
*@default [0,1,0]
*@description Specifies the normal of the disc plane, the disc will be perpendicular to this direction.
*/
"plane_normal"?:string|Array<JsonType>;
/**
*@description UNDOCUMENTED: surface only.
*/
"surface_only"?:boolean;
};
export type BG={
/**
*@description UNDOCUMENTED: direction.
*/
"direction"?:Array<JsonType>;
/**
*@description UNDOCUMENTED.
*/
"offset"?:Array<JsonType>;
};
export type BH={
/**
*@description UNDOCUMENTED: direction.
*/
"direction"?:Array<JsonType>;
/**
*@description UNDOCUMENTED.
*/
"offset"?:Array<JsonType>;
};
export type BI={
/**
*@description UNDOCUMENTED: direction.
*/
"direction"?:string|Array<JsonType>;
/**
*@description UNDOCUMENTED.
*/
"offset"?:Array<JsonType>;
/**
*@description UNDOCUMENTED: radius.
*/
"radius"?:C;
/**
*@description UNDOCUMENTED: surface only.
*/
"surface_only"?:boolean;
};
export type BJ={
/**
*@minItems 2
*@maxItems 2
*@description UNDOCUMENTED: size.
*/
"size"?:Array<C>;
/**
*@description Used to orient the billboard.
*/
"facing_camera_mode"?:string;
/**
*@description UNDOCUMENTED
*/
"direction"?:{
/**
*@description Specified how to calculate the billboard direction of a particle.
*/
"mode"?:string;
/**
*@minItems 3
*@maxItems 3
*@description The facing direction of emitted particles.
*/
"custom_direction"?:Array<C>;
/**
*@default 0.01
*@description The direction is set if the speed of the particle is above the threshold.
*/
"min_speed_threshold"?:number;
[k:string]:any;
};
/**
*@description UNDOCUMENTED: uv.
*/
"uv"?:{
/**
*@description UNDOCUMENTED: texture width.
*/
"texture_width"?:integer;
/**
*@description UNDOCUMENTED: texture height.
*/
"texture_height"?:integer;
/**
*@description UNDOCUMENTED: flipbook.
*/
"flipbook"?:{
/**
*@minItems 2
*@maxItems 2
*@description UNDOCUMENTED: base UV.
*/
"base_UV"?:Array<C>;
/**
*@minItems 2
*@maxItems 2
*@description UNDOCUMENTED: size UV.
*/
"size_UV"?:Array<C>;
/**
*@minItems 2
*@maxItems 2
*@description UNDOCUMENTED: step UV.
*/
"step_UV"?:Array<C>;
/**
*@description UNDOCUMENTED: frames per second.
*/
"frames_per_second"?:C;
/**
*@description UNDOCUMENTED: Maximum frame.
*/
"max_frame":C;
/**
*@description UNDOCUMENTED: stretch to lifetime.
*/
"stretch_to_lifetime"?:boolean;
/**
*@description UNDOCUMENTED: loop.
*/
"loop"?:boolean;
};
/**
*@minItems 2
*@maxItems 2
*@description UNDOCUMENTED: uv.
*/
"uv"?:Array<C>;
/**
*@minItems 2
*@maxItems 2
*@description UNDOCUMENTED: uv size.
*/
"uv_size"?:Array<C>;
};
};
export type CA={
/**
*@description UNDOCUMENTED.
*/
"color"?:Array<C>|string|{
"gradient"?:Array<string>|{
[k:string]:string;
}|Array<Array<number|string>>;
/**
*@description UNDOCUMENTED: interpolant.
*/
"interpolant"?:C;
};
};
export type CB=Record<string,never>;
export type CD=string;
export type CC=Array<CD>;
export type CE=Array<CD>;
export type CF={
/**
*@description UNDOCUMENTED: per update expression.
*/
"per_update_expression"?:C;
/**
*@description UNDOCUMENTED: per render expression.
*/
"per_render_expression"?:C;
};
export type CG=C|Array<JsonType>;
export type CH={
/**
*@description Specifies the initial rotation in degrees.
*/
"rotation"?:C;
/**
*@description Specifies the spin rate in degrees/second.
*/
"rotation_rate"?:C;
};
export type CI={
/**
*@description This expression makes the particle expire when true (non-zero), The float/expr is evaluated once per particle, evaluated every frame.
*/
"expiration_expression"?:C;
/**
*@description Alternate way to express lifetime, particle will expire after this much time, evaluated once.
*/
"max_lifetime"?:C;
};
export type CJ={
/**
*@description Fires when the particle is created.
*/
"creation_event"?:Array<string>|string;
/**
*@description UNDOCUMENTED, unclear structure :(.
*/
"custom_events"?:JsonType;
/**
*@description Fires when the particle expires (does not wait for particles to expire too).
*/
"expiration_event"?:Array<string>|string;
/**
*@description UNDOCUMENTED: timeline.
*/
"timeline"?:JsonType;
};
export type DA=Array<JsonType>;
export type DB={
/**
*@description UNDOCUMENTED: collision drag.
*/
"collision_drag"?:number;
/**
*@description UNDOCUMENTED: coefficient of restitution.
*/
"coefficient_of_restitution"?:number;
/**
*@description UNDOCUMENTED: collision radius.
*/
"collision_radius"?:number;
/**
*@description UNDOCUMENTED: enabled.
*/
"enabled"?:C;
/**
*@description UNDOCUMENTED: expire on contact.
*/
"expire_on_contact"?:boolean;
/**
*@description UNDOCUMENTED: events.
*/
"events"?:Array<{
"additionalProperties"?:JsonType;
/**
*@description UNDOCUMENTED: event.
*/
"event"?:string;
/**
*@description UNDOCUMENTED: Minimum speed.
*/
"min_speed"?:number;
[k:string]:any;
}>;
};
export type DC={
/**
*@default [0,0,0]
*@minItems 3
*@maxItems 3
*@description The linear acceleration applied to the particle. Units are blocks/sec/sec
*/
"linear_acceleration"?:Array<C>;
/**
*@description Using the equation: `acceleration = -linear_drag_coefficient*velocity` where velocity is the current direction times speed. Think of this as air-drag. The higher the value, the more drag evaluated every frame
*/
"linear_drag_coefficient"?:C;
/**
*@description Acceleration applies to the rotation speed of the particle.
*/
"rotation_acceleration"?:C;
/**
*@description Drag applied to rotation.
*/
"rotation_drag_coefficient"?:C;
};
export type DD={
/**
*@minItems 3
*@maxItems 3
*@description UNDOCUMENTED: relative position.
*/
"relative_position"?:Array<C>;
/**
*@description UNDOCUMENTED: rotation.
*/
"rotation"?:C;
/**
*@minItems 3
*@maxItems 3
*@description UNDOCUMENTED: relative position.
*/
"direction"?:Array<C>;
};
/**
*@example
*```json
*{
*  "format_version": "1.19.0",
*  "particle_effect": {
*    "description": {
*      "identifier": "example:particle",
*      "basic_render_parameters": {
*        "material": "particles_alpha",
*        "texture": "textures/particle/particle"
*      }
*    },
*    "curves": {},
*    "components": {}
*  }
*}
*```
*@description A particle definition file.
*/
export type Main={
"format_version"?:A;
/**
*@description UNDOCUMENTED: particle effect.
*/
"particle_effect"?:{
/**
*@description UNDOCUMENTED: description.
*/
"description"?:{
/**
*@description UNDOCUMENTED: identifier.
*/
"identifier":B;
/**
*@description UNDOCUMENTED: basic render parameters.
*/
"basic_render_parameters":{
/**
*@example
*```json
*"particles_alpha"
*```
*@example
*```json
*"particles_blend"
*```
*@description  Minecraft material to use for emitter.
*/
"material"?:string;
/**
*@pattern ^.+$
*@description Minecraft texture to use for emitter.
*/
"texture"?:string;
};
};
/**
*@description Curves are interpolation values, with inputs from 0 to 1, and outputs based on the curve. The result of the curve is a Molang variable of the same name that can be referenced in Molang in components. For each rendering frame for each particle, the curves are evaluated and the result is placed in a Molang variable of the name of the curve.
*/
"curves"?:{
[k:string]:{
/**
*@description What is the input value to use.
*/
"input"?:C;
/**
*@description Control nodes for curve.  These are assumed to be equally, used Object for bezier_chain
*/
"nodes"?:Array<C>|{
[k:string]:{
[k:string]:any;
};
};
/**
*@description The type of curve.
*/
"type"?:string;
/**
*@description What is the range the input is mapped onto.
*/
"horizontal_range"?:C;
};
};
/**
*@description The particle components.
*/
"components"?:{
"minecraft:emitter_initialization"?:D;
"minecraft:emitter_lifetime_events"?:F;
"minecraft:emitter_lifetime_expression"?:G;
"minecraft:emitter_lifetime_once"?:H;
"minecraft:emitter_lifetime_looping"?:I;
"minecraft:emitter_local_space"?:J;
"minecraft:emitter_rate_instant"?:BA;
"minecraft:emitter_rate_manual"?:BB;
"minecraft:emitter_rate_steady"?:BC;
"minecraft:emitter_shape_box"?:BD;
"minecraft:emitter_shape_custom"?:BE;
"minecraft:emitter_shape_disc"?:BF;
"minecraft:emitter_shape_entity_aabb"?:BG;
"minecraft:emitter_shape_point"?:BH;
"minecraft:emitter_shape_sphere"?:BI;
"minecraft:particle_appearance_billboard"?:BJ;
"minecraft:particle_appearance_tinting"?:CA;
"minecraft:particle_appearance_lighting"?:CB;
"minecraft:particle_expire_if_not_in_blocks"?:CC;
"minecraft:particle_expire_if_in_blocks"?:CE;
"minecraft:particle_initialization"?:CF;
"minecraft:particle_initial_speed"?:CG;
"minecraft:particle_initial_spin"?:CH;
"minecraft:particle_lifetime_expression"?:CI;
"minecraft:particle_lifetime_events"?:CJ;
"minecraft:particle_kill_plane"?:DA;
"minecraft:particle_motion_collision"?:DB;
"minecraft:particle_motion_dynamic"?:DC;
"minecraft:particle_motion_parametric"?:DD;
};
/**
*@description UNDOCUMENTED: events.
*/
"events"?:{
[k:string]:{
/**
*@description UNDOCUMENTED.
*/
"particle_effect"?:{
/**
*@description UNDOCUMENTED: effect.
*/
"effect"?:string;
/**
*@description UNDOCUMENTED: type.
*/
"type"?:string;
[k:string]:any;
};
/**
*@description UNDOCUMENTED.
*/
"sound_effect"?:{
/**
*@description UNDOCUMENTED: effect.
*/
"event_name"?:string;
[k:string]:any;
};
};
};
};
};
}
export namespace r_render_controllers {
export type color=number|string;
export type A=string;
export type B=string;
export type C=string|number;
/**
*@example
*```json
*{
*  "format_version": "1.19.0",
*  "render_controllers": {
*    "controller.render.example": {
*      "geometry": "Geometry.default",
*      "materials": [
*        {
*          "*": "Material.default"
*        }
*      ],
*      "textures": [
*        "Texture.default"
*      ]
*    }
*  }
*}
*```
*@description A collection of render controllers to apply.
*/
export type Main={
"format_version"?:A;
/**
*@description The collection of render controllers, each property is the identifier of a render controller.
*/
"render_controllers"?:{
[k:string]:{
/**
*@description A collection of definition of arrays.
*/
"arrays"?:{
/**
*@minProperties 1
*@description A collection of Geometry array.
*/
"geometries"?:{
[k:string]:Array<string>;
};
/**
*@minProperties 1
*@description A collection of materials array.
*/
"materials"?:{
[k:string]:Array<string>;
};
/**
*@minProperties 1
*@description A collection of texture array.
*/
"textures"?:{
[k:string]:Array<string>;
};
};
/**
*@description The color to apply.
*/
"color"?:{
/**
*@description The value of red, between 0 and 1.
*/
"r"?:color;
/**
*@description The value of green, between 0 and 1.
*/
"g"?:color;
/**
*@description The value of blue, between 0 and 1.
*/
"b"?:color;
/**
*@description The value of alpha, between 0 and 1.
*/
"a"?:color;
};
/**
*@description Whenever or not to apply enviroment lighting to this object.
*/
"filter_lighting"?:boolean;
/**
*@example
*```json
*"geometry.default"
*```
*@description The model data to use.
*/
"geometry":B;
/**
*@description Whenever or not to apply enviroment lighting to this object.
*/
"ignore_lighting"?:boolean;
/**
*@description The color to overlay on the entity when hurt.
*/
"is_hurt_color"?:{
/**
*@description The value of red, between 0 and 1.
*/
"r"?:color;
/**
*@description The value of green, between 0 and 1.
*/
"g"?:color;
/**
*@description The value of blue, between 0 and 1.
*/
"b"?:color;
/**
*@description The value of alpha, between 0 and 1.
*/
"a"?:color;
};
/**
*@description The amount of light that blends into what is being rendered, lower values gives darker rendering, (1 = 100%).
*/
"light_color_multiplier"?:C;
/**
*@example
*```json
*[
*  {
*    "*": "material.default"
*  }
*]
*```
*@example
*```json
*[
*  {
*    "Alpha_*": "material.alpha"
*  }
*]
*```
*@description The specification where to apply materials to.
*@minItems 1
*/
"materials":Array<{
[k:string]:string;
}>;
/**
*@description The color that will be overlayed when the object is on fire.
*/
"on_fire_color"?:{
/**
*@description The value of red, must result in a float between 0 and 1.
*/
"r"?:color;
/**
*@description The value of green, must result in a float between 0 and 1.
*/
"g"?:color;
/**
*@description The value of blue, must result in a float between 0 and 1.
*/
"b"?:color;
/**
*@description The value of alpha, must result in a float between 0 and 1.
*/
"a"?:color;
};
/**
*@description The color to put over the object.
*/
"overlay_color"?:{
/**
*@description The value of red, between 0 and 1.
*/
"r"?:color;
/**
*@description The value of green, between 0 and 1.
*/
"g"?:color;
/**
*@description The value of blue, between 0 and 1.
*/
"b"?:color;
/**
*@description The value of alpha, between 0 and 1.
*/
"a"?:color;
};
/**
*@description Determines what part of the object to show or hide.
*@minItems 1
*/
"part_visibility"?:Array<{
[k:string]:string|boolean|number;
}>;
/**
*@description The texture to apply, multiple texture can be used as to create an overlay effect, a specific material is required though.
*@minItems 1
*/
"textures"?:Array<B>;
/**
*@description The UV animation to apply to the render texture.
*/
"uv_anim"?:{
/**
*@description The offset to apply the UV, this will cause the texture on the object to shift by said amount, can be molang. The value for how much to offset is usually specified between 0 and 1
*@minItems 2
*@maxItems 2
*/
"offset":Array<C>;
/**
*@description The scale to apply to the texture, this will cause texture to seem to grow and shrink if done per frame.
*@minItems 2
*@maxItems 2
*/
"scale":Array<C>;
};
};
};
};
}